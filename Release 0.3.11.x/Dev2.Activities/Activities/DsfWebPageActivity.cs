//#define PARALLEL

using System;
using System.Activities;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Dev2.Common;
using Dev2.DataList.Contract;
using Dev2.DataList.Contract.Binary_Objects;
using Dev2;
using Dev2.Network.Execution;
using Unlimited.Framework;
using Dev2.DynamicServices;

namespace Unlimited.Applications.BusinessDesignStudio.Activities
{
    public sealed class DsfWebPageActivity : DsfActivity
    {
        private string _xmlConfig = "<WebParts/>";
        private string _websiteServiceName = "Default Master Page";
        private string _formEncodingType = "application/x-www-form-urlencoded";
        private string _metaTags = string.Empty;


        /// <summary>
        /// The XML data containing the configuration data for the web page
        /// </summary>
        public string XMLConfiguration
        {
            get
            {
                return _xmlConfig;
            }
            set
            {
                _xmlConfig = value;
            }
        }

        /// <summary>
        /// The website that that contains the structure that the webpage will render into
        /// </summary>
        public string WebsiteServiceName
        {
            get
            {
                return _websiteServiceName;
            }
            set
            {
                _websiteServiceName = value;
            }
        }

        /// <summary>
        /// The region in the website that will contain this web page
        /// </summary>
        public string WebsiteRegionName { get; set; }

        /// <summary>
        /// Indicates whether this activity is in Preview Mode or not, if so
        /// then bookmarks will not be created
        /// </summary>
        public bool IsPreview { get; set; }

        protected override bool CanInduceIdle
        {
            get
            {
                return true;
            }
        }

        /// <summary>
        /// The enctype of the html form that will be generated by this activity
        /// </summary>
        public string FormEncodingType
        {
            get
            {
                return _formEncodingType;
            }
            set
            {

                if(!value.Equals("application/x-www-form-urlencoded") && !value.Equals("multipart/form-data") && !value.Equals("text/plain"))
                {
                    throw new ArgumentException(string.Format("'{0}' is an invalid form encoding type", value), "FormEncodingType");
                }
                _formEncodingType = value;

            }

        }

        /// <summary>
        /// The meta tags to associate with this page
        /// </summary>
        public string MetaTags
        {
            get
            {
                return _metaTags;
            }
            set
            {
                _metaTags = value;
            }
        }


        public DsfWebPageActivity()
        {
            DisplayName = "Webpage";
        }

        protected override void CacheMetadata(NativeActivityMetadata metadata)
        {
            base.CacheMetadata(metadata);
        }

        protected override void OnExecute(NativeActivityContext context)
        {
            throw new NotImplementedException("WebPage");
        }

        // Travis.Frisinger - 13.08.2012 : Inject the wizard helper script server side now ;)
        private string InjectWizardInjectionScript(string template)
        {
            
            const string toInject = @"<script type=""text/javascript"">
                    $(document).ready(function () {
                        $('form').submit(function (event) {
                                var formPostData = $(this).serialize();
                                if(isValidForm) {
                                   Dev2Awesomium.Dev2Set(formPostData, document.forms[0].action);
                                }
                                return false;                    
                        });
                    });
                </script>";

            int idx = template.IndexOf("</head>", StringComparison.Ordinal);
            string result = template.Insert(idx, toInject);

            return result;
        }
    }
}
