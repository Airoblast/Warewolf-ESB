// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Dev2.CodedUI.Tests.UIMaps.ConnectViewUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class ConnectViewUIMap
    {

        private void EnterServerName(string name) {
            #region Variable Declaration

            WpfEdit uIUI_ServerNametxt_AutEdit = this.UIConnectToServerWindow1.UIUI_ServerNametxt_AutEdit;

            #endregion Variable Declaration

            // Type 'name' in 'ServerName' text box
            uIUI_ServerNametxt_AutEdit.Text = name;
        }

        private void EnterServerAddress(string address) {
            #region Variable Declaration

            WpfEdit uIUI_Addresstxt_AutoIDEdit = this.UIConnectToServerWindow1.UIUI_Addresstxt_AutoIDEdit;

            #endregion Variable Declaration

            // Type 'address' in 'Addresstxt' text box
            uIUI_Addresstxt_AutoIDEdit.Text = address;
        }

        private void ConnectBtnClick() {
            #region Variable Declarations

            WpfButton uIConnectButton = this.UIConnectToServerWindow1.UIConnectButton;

            #endregion Variable Declaration

            // Click 'Connect' button
            Mouse.Click(uIConnectButton, new Point(6, 17));
        }

        
        #region Properties
        public virtual ConnectClickNewServerParams ConnectClickNewServerParams
        {
            get
            {
                if ((this.mConnectClickNewServerParams == null))
                {
                    this.mConnectClickNewServerParams = new ConnectClickNewServerParams();
                }
                return this.mConnectClickNewServerParams;
            }
        }
        
        public UIBusinessDesignStudioWindow UIBusinessDesignStudioWindow
        {
            get
            {
                if ((this.mUIBusinessDesignStudioWindow == null))
                {
                    this.mUIBusinessDesignStudioWindow = new UIBusinessDesignStudioWindow();
                }
                return this.mUIBusinessDesignStudioWindow;
            }
        }
        
        public UIConnectToServerWindow UIConnectToServerWindow
        {
            get
            {
                if ((this.mUIConnectToServerWindow == null))
                {
                    this.mUIConnectToServerWindow = new UIConnectToServerWindow();
                }
                return this.mUIConnectToServerWindow;
            }
        }
        
        public UIConnectToServerWindow1 UIConnectToServerWindow1
        {
            get
            {
                if ((this.mUIConnectToServerWindow1 == null))
                {
                    this.mUIConnectToServerWindow1 = new UIConnectToServerWindow1();
                }
                return this.mUIConnectToServerWindow1;
            }
        }
        #endregion
        
        #region Fields
        private ConnectClickNewServerParams mConnectClickNewServerParams;
        
        private UIBusinessDesignStudioWindow mUIBusinessDesignStudioWindow;
        
        private UIConnectToServerWindow mUIConnectToServerWindow;
        
        private UIConnectToServerWindow1 mUIConnectToServerWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConnectClickNewServer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class ConnectClickNewServerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'newserver' in 'UI_ServerNametxt_AutoID' text box
        /// </summary>
        public string UIUI_ServerNametxt_AutEditText = "newserver";
        
        /// <summary>
        /// Type 'http://newserver:77/dsf' in 'UI_Addresstxt_AutoID' text box
        /// </summary>
        public string UIUI_Addresstxt_AutoIDEditText = "http://newserver:77/dsf";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIBusinessDesignStudioWindow : WpfWindow
    {
        
        public UIBusinessDesignStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = TestBase.GetStudioWindowName();
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public UIExplorerCustom UIExplorerCustom
        {
            get
            {
                if ((this.mUIExplorerCustom == null))
                {
                    this.mUIExplorerCustom = new UIExplorerCustom(this);
                }
                return this.mUIExplorerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIExplorerCustom mUIExplorerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIExplorerCustom : WpfCustom
    {
        
        public UIExplorerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties["AutomationId"] = "UI_ExplorerPane_AutoID";
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public UIExplorerCustom1 UIExplorerCustom1
        {
            get
            {
                if ((this.mUIExplorerCustom1 == null))
                {
                    this.mUIExplorerCustom1 = new UIExplorerCustom1(this);
                }
                return this.mUIExplorerCustom1;
            }
        }
        #endregion
        
        #region Fields
        private UIExplorerCustom1 mUIExplorerCustom1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIExplorerCustom1 : WpfCustom
    {
        
        public UIExplorerCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties["AutomationId"] = "Explorer";
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public WpfButton UIConnectButton
        {
            get
            {
                if ((this.mUIConnectButton == null))
                {
                    this.mUIConnectButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIConnectButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_btnConnect_AutoID";
                    this.mUIConnectButton.WindowTitles.Add(TestBase.GetStudioWindowName());
                    #endregion
                }
                return this.mUIConnectButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIConnectButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIConnectToServerWindow : WinWindow
    {
        
        public UIConnectToServerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Connect To Server";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Connect To Server");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIConnectToServerWindow1 : WpfWindow
    {
        
        public UIConnectToServerWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Connect To Server";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Connect To Server");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUI_ServerNametxt_AutEdit
        {
            get
            {
                if ((this.mUIUI_ServerNametxt_AutEdit == null))
                {
                    this.mUIUI_ServerNametxt_AutEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_ServerNametxt_AutEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_ServerNametxt_AutoID";
                    this.mUIUI_ServerNametxt_AutEdit.WindowTitles.Add("Connect To Server");
                    #endregion
                }
                return this.mUIUI_ServerNametxt_AutEdit;
            }
        }
        
        public WpfEdit UIUI_Addresstxt_AutoIDEdit
        {
            get
            {
                if ((this.mUIUI_Addresstxt_AutoIDEdit == null))
                {
                    this.mUIUI_Addresstxt_AutoIDEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUI_Addresstxt_AutoIDEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_Addresstxt_AutoID";
                    this.mUIUI_Addresstxt_AutoIDEdit.WindowTitles.Add("Connect To Server");
                    #endregion
                }
                return this.mUIUI_Addresstxt_AutoIDEdit;
            }
        }
        
        public WpfButton UIConnectButton
        {
            get
            {
                if ((this.mUIConnectButton == null))
                {
                    this.mUIConnectButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIConnectButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Connectbtn_AutoID";
                    this.mUIConnectButton.WindowTitles.Add("Connect To Server");
                    #endregion
                }
                return this.mUIConnectButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUI_ServerNametxt_AutEdit;
        
        private WpfEdit mUIUI_Addresstxt_AutoIDEdit;
        
        private WpfButton mUIConnectButton;
        #endregion
    }
}
