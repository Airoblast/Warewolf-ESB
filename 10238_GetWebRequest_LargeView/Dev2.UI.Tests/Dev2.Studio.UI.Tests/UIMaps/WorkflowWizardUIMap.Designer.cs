// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Dev2.CodedUI.Tests.UIMaps.WorkflowWizardUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using Dev2.Studio.UI.Tests;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class WorkflowWizardUIMap
    {
        public WpfWindow GetWindow()
        {
            #region Variable Declarations
            WpfWindow theWindow = this.UIWorkflowServiceDetaiWindow;
            #endregion

            return theWindow;
        }

        public bool IsWindowOpen()
        {
            WpfWindow theWindow = this.UIWorkflowServiceDetaiWindow;
            Point p = new Point();
            if (theWindow.TryGetClickablePoint(out p))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public WinWindow GetProcessErrorWindow()
        {
            WinWindow uIProcessErrorWindow = this.UIProcessErrorWindow;
            
            if (uIProcessErrorWindow != null)
            {
                return uIProcessErrorWindow;
            }
            else
            {
                return null;
            }
        }
        
        #region Properties
        public UIWorkflowServiceDetaiWindow UIWorkflowServiceDetaiWindow
        {
            get
            {
                if ((this.mUIWorkflowServiceDetaiWindow == null))
                {
                    this.mUIWorkflowServiceDetaiWindow = new UIWorkflowServiceDetaiWindow();
                }
                return this.mUIWorkflowServiceDetaiWindow;
            }
        }
        
        public UIWorkflowServiceDetaiWindow1 UIWorkflowServiceDetaiWindow1
        {
            get
            {
                if ((this.mUIWorkflowServiceDetaiWindow1 == null))
                {
                    this.mUIWorkflowServiceDetaiWindow1 = new UIWorkflowServiceDetaiWindow1();
                }
                return this.mUIWorkflowServiceDetaiWindow1;
            }
        }

        public virtual Environment_Wizards_Workflow_EnterSampleWorkflowDetailsParams Environment_Wizards_Workflow_EnterSampleWorkflowDetailsParams {
            get {
                if((this.mEnvironment_Wizards_Workflow_EnterSampleWorkflowDetailsParams == null)) {
                    this.mEnvironment_Wizards_Workflow_EnterSampleWorkflowDetailsParams = new Environment_Wizards_Workflow_EnterSampleWorkflowDetailsParams();
                }
                return this.mEnvironment_Wizards_Workflow_EnterSampleWorkflowDetailsParams;
            }
        }

        public UIProcessErrorWindow UIProcessErrorWindow
        {
            get
            {
                if ((this.mUIProcessErrorWindow == null))
                {
                    this.mUIProcessErrorWindow = new UIProcessErrorWindow();
                }
                return this.mUIProcessErrorWindow;
            }
        }

        private UIProcessErrorWindow mUIProcessErrorWindow;

        #endregion
        
        #region Fields
        private UIWorkflowServiceDetaiWindow mUIWorkflowServiceDetaiWindow;
        private Environment_Wizards_Workflow_EnterSampleWorkflowDetailsParams mEnvironment_Wizards_Workflow_EnterSampleWorkflowDetailsParams;

        private UIWorkflowServiceDetaiWindow1 mUIWorkflowServiceDetaiWindow1;
        #endregion
    }

    // Sample data sent to the textboxes

    /// <summary>
    /// Parameters to be passed into 'Environment_Wizards_Workflow_EnterSampleWorkflowDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class Environment_Wizards_Workflow_EnterSampleWorkflowDetailsParams {

        #region Fields
        /// <summary>
        /// Type 'CodedUITestWorkflow' in 'Service Details' window
        /// </summary>
        public string UIServiceDetailsWindow1SendKeys = "CodedUITestWorkflow";

        /// <summary>
        /// Type 'CodedUITestCategory' in 'Service Details' window
        /// </summary>
        public string UIServiceDetailsWindow1SendKeys1 = "CodedUITestCategory";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIWorkflowServiceDetaiWindow : WpfWindow
    {
        
        public UIWorkflowServiceDetaiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Workflow Service Details";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Workflow Service Details");
            #endregion
        }

        public UIWorkflowServiceDetaiTitleBar UIWorkflowServiceDetaiTitleBar
        {
            get
            {
                if ((this.mUIWorkflowServiceDetaiTitleBar == null))
                {
                    this.mUIWorkflowServiceDetaiTitleBar = new UIWorkflowServiceDetaiTitleBar(this);
                }
                return this.mUIWorkflowServiceDetaiTitleBar;
            }
        }
        
        #region Fields
        private UIWorkflowServiceDetaiTitleBar mUIWorkflowServiceDetaiTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIWorkflowServiceDetaiWindow1 : WinWindow
    {
        
        public UIWorkflowServiceDetaiWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Workflow Service Details";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Workflow Service Details");
            #endregion
        }
    }

    public class UIProcessErrorWindow : WinWindow
    {

        public UIProcessErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Process Error";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Process Error");
            this.Find();
            #endregion
        }
    }
}
