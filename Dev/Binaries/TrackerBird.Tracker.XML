<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Trackerbird.Tracker</name>
    </assembly>
    <members>
        <member name="T:Trackerbird.Tracker.ConnectionReturn">
            <summary>
            Represents the state of the internet connection
            </summary>
        </member>
        <member name="T:Trackerbird.Tracker.KeyType">
            <summary>
            Represents the type of the license key currently being used
            </summary>
        </member>
        <member name="T:Trackerbird.Tracker.MessageType">
            <summary>
            Represents the types of messages which can be retrieved.
            </summary>
        </member>
        <member name="T:Trackerbird.Tracker.StartStatusEnum">
            <summary>
            Represents the status of App.Start()
            </summary>
        </member>
        <member name="T:Trackerbird.Tracker.VersionCheckReturn">
            <summary>
            Represents the status of the version of the application using Trackerbird 
            </summary>
        </member>
        <member name="T:Trackerbird.Tracker.TBPrivacyMode">
            <summary>
            Use this to set the privacy mode for Trackerbird
            </summary>  
        </member>
        <member name="F:Trackerbird.Tracker.TBPrivacyMode.Off">
            <summary>
            Collects both architecture and usage data (default).
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.TBPrivacyMode.Low">
            <summary>
            Collect only architecture data but NOT usage data.
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.TBPrivacyMode.High">
            <summary>
            Does not collect any architecture or usage data.
            </summary>
        </member>
        <member name="T:Trackerbird.Tracker.App">
            <summary>
             Use this class to Track your applications.
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.App.allowEveryoneRule">
            <summary>
            Shows if App.Start has been called and that if the Trackerbird configuration has been loaded. 
            </summary>
            
        </member>
        <member name="M:Trackerbird.Tracker.App.StartAutoSync">
            <summary>
            This signals the start of autosynchronization with the server. After calling this method a sync will be done automatically every fixed period of time
            Call on StopAutoSync() to stop the automatic synchronization.
            </summary>    
        </member>
        <member name="M:Trackerbird.Tracker.App.StopAutoSync">
            <summary>
            Used to stop the auto synchronization which can be started by calling on StartAutoSync().
            </summary>
        </member>
        <member name="M:Trackerbird.Tracker.App.Start(Trackerbird.Tracker.ITBConfig)">
            <summary>
            This signals that your application has started. This should be placed before calling any other Trackerbird method (Except SetProxy when using a proxy).
            </summary>
            <param name="configObj">Object that contains settings for trackerbird.</param>
        </member>
        <member name="M:Trackerbird.Tracker.App.Stop(System.Boolean)">
            <summary>
            This method should be called when your application is exiting. It will signal Trackerbird to log the event and to attempt to Sync with the Servers.
            After calling this Method, App.Start must be called again to start using Trackerbird.
            </summary>       
            <param name="doSync">Set this parameter to false only in important scencarios where the SDK should exit instantaneously such as installations. For more information please refer to the documentation or contact Trackerbird Support.</param>
        </member>
        <member name="M:Trackerbird.Tracker.App.ConfigChange(Trackerbird.Tracker.ITBConfig)">
            <summary>
            Change the application settings currently being sent to the server
            </summary>
            <param name="configObj"></param>
        </member>
        <member name="M:Trackerbird.Tracker.App.SetPrivacyMode(Trackerbird.Tracker.TBPrivacyMode)">
            <summary>
            Use this to set the privacy mode. 
            </summary>
            <param name="privacyMode">Sets what data Trackerbird will collect from your end users.</param>
        </member>
        <member name="M:Trackerbird.Tracker.App.GetPrivacyMode">
            <summary>
            Use this method to retrieve the current privacy mode being used by Trackerbird
            </summary>
            <returns></returns>
        </member>
        <member name="M:Trackerbird.Tracker.App.MessageCheck(System.String@,Trackerbird.Tracker.MessageType@)">
            <summary>
            Checks with the Trackerbird Sever if there are any messages available to be recieved by your application. 
            This overload retrieves all message types and should be handled accordingly.
            </summary>
            <param name="message">Will be populated with the message retrieved from the server.</param>
            <param name="messageType">The type of the message which has been retrieved.</param>
            <returns>
            Returns an integer representing 
            the number of messages which are available on the server.
            </returns>
        </member>
        <member name="M:Trackerbird.Tracker.App.MessageCheck(System.String@,Trackerbird.Tracker.MessageType)">
            <summary>
            Checks with the Trackerbird Sever if there are any messages available to be recieved by your application. 
            This overload will retrieve only specified message types..
            </summary>
            <param name="message">Will be populated with the message retrieved from the server.</param>
            <param name="messageTypeExpected">Set which message type should be retrieved by the server.</param>
            <returns>
            Returns an integer representing 
            the number of messages which are available on the server.
            </returns>
        </member>
        <member name="M:Trackerbird.Tracker.App.VersionCheck(System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Checks if there is a newer version of your application available.
            </summary>
            <param name="internalNewVersion">The internal version used by the application, set when a new version is available</param>
            <param name="userFriendlyNewVersion">The newer version which can be used to be displayed to users.</param>
            <returns>Returns VersionCheckReturn which will represent the status of the version</returns>
        </member>
        <member name="M:Trackerbird.Tracker.App.KeyCheck(System.String)">
            <summary>
            Checks the status of the key being used by your application with the server.
            </summary>
            <param name="licKey">The key being used</param>
            <returns>Returns an instance of a TBLicenseInfo object which contains all of the key information.</returns>
        </member>
        <member name="M:Trackerbird.Tracker.App.KeyChanged(System.String)">
            <summary>
            Checks the status of a new key being given to your application.
            </summary>
            <param name="newKey">The new key attempting to be entered.</param>
            <returns>Returns an instance of a TBLicenseInfo object which contains all of the key information</returns>
        </member>
        <member name="M:Trackerbird.Tracker.App.Sync">
            <summary>
            Attempts to sync all of the logs and information gathered from the machine to the server.
            </summary>
        </member>
        <member name="M:Trackerbird.Tracker.App.KeyStatusChange(Trackerbird.Tracker.KeyType,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Update the status and type of key currently being used by your application.
             </summary>
             <param name="keyType">Type of key being used.</param>
             <param name="keyExpired">Is the current key in use Expired?</param>
             <param name="keyActivated">Is the current key in use Activated?</param>
             <param name="keyBlacklisted">Is the current key in use blacklisted?</param>
             <param name="keyWhitelisted">Is the current key in use whitelisted?</param>
        </member>
        <member name="M:Trackerbird.Tracker.App.ExceptionTrack(System.String,System.String,System.Exception)">
            <summary>
            Tracks and logs exceptions from within your code.
            </summary>
            <param name="className">The class name from which the error originated. If the length of the string is greater than 50 it will be truncated.</param>
            <param name="methodName">The method name from which the error originated. If the length of the string is greater than 50 it will be truncated.</param>
            <param name="ex">The handled exception</param>
        </member>
        <member name="M:Trackerbird.Tracker.App.Uninstall">
            <summary>
            Logs and syncs with the servers as the last call when your application is uninstalling.
            </summary>
        </member>
        <member name="M:Trackerbird.Tracker.App.SetProxy(System.String,System.String,System.String)">
            <summary>
            Sets the proxy to be used by the dll to contact the default proxy server. 
            </summary>
        </member>
        <member name="M:Trackerbird.Tracker.App.ConnectionCheck(System.String)">
            <summary>
            Check if the sdk is able to connect to the internet in order to connect with Trackerbird Servers
            </summary>
        </member>
        <member name="M:Trackerbird.Tracker.App.EventTrack(System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Track features being used from within your application
            </summary>
            <param name="group">String by which to group your event. If the length of this string and the 'customText' parameter is greater than 40 it will be truncated. Also ';' (semicolons) and '|' (pipeline) are not to be used inside this parameter</param>
            <param name="customText">The text used to describe the feature. If the length of this string and the 'group' parameter is greater than 40 it will be truncated. Also ';' (semicolons) and '|' (pipeline) are not to be used inside this parameter</param>        
            <param name="customText">The text used to describe the feature. If the length of this string and the 'group' parameter is greater than 40 it will be truncated. Also ';' (semicolons) and '|' (pipeline) are not to be used inside this parameter</param>
            <param name="customValue">A value which is related to your event and you would like to store</param>        
        </member>
        <member name="M:Trackerbird.Tracker.App.EventTrack(System.String,System.Nullable{System.Double},System.String)">
            <summary>
            Track events being used from within your application
            </summary>
            <param name="customText">The text used to describe the feature. If the length of the string is greater than 40 it will be truncated. Also ';' (semicolons) and '|' (pipeline) are not to be used inside this parameter</param>
        </member>
        <member name="M:Trackerbird.Tracker.App.EventTrack(System.String,System.Nullable{System.Double})">
            <summary>
            Track events being used from within your application
            </summary>
            <param name="customText">The text used to describe the feature. If the length of the string is greater than 40 it will be truncated. Also ';' (semicolons) and '|' (pipeline) are not to be used inside this parameter</param>
            <param name="customValue">A value which is related to your event and you would like to store</param>        
        </member>
        <member name="M:Trackerbird.Tracker.App.EventTrack(System.String,System.String,System.Nullable{System.Double},System.String)">
            <summary>
            Track events being used from within your application
            </summary>
            <param name="group">String by which to group your event. If the length of this string and the 'customText' parameter is greater than 40 it will be truncated. Also ';' (semicolons) and '|' (pipeline) are not to be used inside this parameter</param>
            <param name="customText">The text used to describe the feature. If the length of this string and the 'group' parameter is greater than 40 it will be truncated. Also ';' (semicolons) and '|' (pipeline) are not to be used inside this parameter</param>
            <param name="customValue">A value which is related to your event and you would like to store</param>        
            <param name="sessionID">The current Session ID</param>
        </member>
        <member name="T:RGiesecke.DllExport.DllExportAttribute">
            <summary>
            Used to control how to create an unmanaged export for a static method.
            </summary>
            <remarks>
            You are not bound to using this class in this assembly.
            By default, any attribute named "RGiesecke.DllExport.DllExportAttribute.DllExportAttribute" will do the trick.
            Even if it is declared to be only visible inside the assembly with the static methods you want to export.
            In such a case the naming and typing of the fileds/properties is critical or otherwise the provided values will not be used.
            </remarks>
        </member>
        <member name="M:RGiesecke.DllExport.DllExportAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RGiesecke.DllExport.DllExportAttribute"/> class.
            </summary>
        </member>
        <member name="M:RGiesecke.DllExport.DllExportAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RGiesecke.DllExport.DllExportAttribute"/> class.
            </summary>
            <param name="exportName">Name of the unmanaged export.
            <seealso cref="P:RGiesecke.DllExport.DllExportAttribute.ExportName"/></param>
        </member>
        <member name="M:RGiesecke.DllExport.DllExportAttribute.#ctor(System.String,System.Runtime.InteropServices.CallingConvention)">
            <summary>
            Initializes a new instance of the <see cref="T:RGiesecke.DllExport.DllExportAttribute"/> class.
            </summary>
            <param name="exportName">Name of the unmanaged export.
            <seealso cref="P:RGiesecke.DllExport.DllExportAttribute.ExportName"/></param>
            <param name="callingConvention">The calling convention of the unmanaged .
            <seealso cref="P:RGiesecke.DllExport.DllExportAttribute.CallingConvention"/></param>
        </member>
        <member name="P:RGiesecke.DllExport.DllExportAttribute.CallingConvention">
            <summary>
            Gets or sets the calling convention that will be used by the unmanaged export.
            </summary>
            <value>The calling convention.</value>
        </member>
        <member name="P:RGiesecke.DllExport.DllExportAttribute.ExportName">
            <summary>
            Gets or sets the name of the unmanaged export.
            </summary>
            <value>The name of the export.</value>
        </member>
        <member name="T:Trackerbird.Cryptography.RsaEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="T:Trackerbird.Cryptography.IAsymmetricBlockCipher">
            <remarks>Base interface for a public/private key block cipher.</remarks>
        </member>
        <member name="M:Trackerbird.Cryptography.IAsymmetricBlockCipher.Init(System.Boolean,Trackerbird.Cryptography.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.IAsymmetricBlockCipher.GetInputBlockSize">
            <returns>The maximum size, in bytes, an input block may be.</returns>
        </member>
        <member name="M:Trackerbird.Cryptography.IAsymmetricBlockCipher.GetOutputBlockSize">
            <returns>The maximum size, in bytes, an output block will be.</returns>
        </member>
        <member name="M:Trackerbird.Cryptography.IAsymmetricBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="inLen">The length of the input block.</param>
            <exception cref="T:Trackerbird.Cryptography.InvalidCipherTextException">Input decrypts improperly.</exception>
            <exception cref="T:Trackerbird.Cryptography.DataLengthException">Input is too large for the cipher.</exception>
        </member>
        <member name="P:Trackerbird.Cryptography.IAsymmetricBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.RsaEngine.Init(System.Boolean,Trackerbird.Cryptography.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:Trackerbird.Cryptography.RsaCoreEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaCoreEngine.Init(System.Boolean,Trackerbird.Cryptography.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaCoreEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaCoreEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="T:Trackerbird.Cryptography.ICipherParameters">
            all parameter classes implement this.
        </member>
        <member name="T:Trackerbird.Cryptography.DataLengthException">
            this exception is thrown if a buffer that is meant to have output
            copied into it turns out to be too short, or if we've been given
            insufficient input. In general this exception will Get thrown rather
            than an ArrayOutOfBounds exception.
        </member>
        <member name="M:Trackerbird.Cryptography.DataLengthException.#ctor">
            base constructor.
        </member>
        <member name="M:Trackerbird.Cryptography.DataLengthException.#ctor(System.String)">
             create a DataLengthException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:Trackerbird.Cryptography.RsaKeyPairGenerator">
            an RSA key pair generator.
        </member>
        <member name="T:Trackerbird.Cryptography.IAsymmetricCipherKeyPairGenerator">
            interface that a public/private key pair generator should conform to.
        </member>
        <member name="M:Trackerbird.Cryptography.IAsymmetricCipherKeyPairGenerator.Init(Trackerbird.Cryptography.KeyGenerationParameters)">
             intialise the key pair generator.
            
             @param the parameters the key pair is to be initialised with.
        </member>
        <member name="M:Trackerbird.Cryptography.IAsymmetricCipherKeyPairGenerator.GenerateKeyPair">
             return an AsymmetricCipherKeyPair containing the Generated keys.
            
             @return an AsymmetricCipherKeyPair containing the Generated keys.
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.AddMagnitudes(System.Int32[],System.Int32[])">
            return a = a + b - b preserved.
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.CompareTo(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            unsigned comparison on two arrays - note the arrays may
            start with leading zeros.
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.Divide(System.Int32[],System.Int32[])">
            return z = x / y - done in place (z value preserved, x contains the
            remainder)
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.IsProbablePrime(System.Int32)">
            return whether or not a BigInteger is probably prime with a
            probability of 1 - (1/2)**certainty.
            <p>From Knuth Vol 2, pg 395.</p>
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.ExtEuclid(Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
             Calculate the numbers u1, u2, and u3 such that:
            
             u1 * a + u2 * b = u3
            
             where u3 is the greatest common divider of a and b.
             a and b using the extended Euclid algorithm (refer p. 323
             of The Art of Computer Programming vol 2, 2nd ed).
             This also seems to have the side effect of calculating
             some form of multiplicative inverse.
            
             @param a    First number to calculate gcd for
             @param b    Second number to calculate gcd for
             @param u1Out      the return object for the u1 value
             @param u2Out      the return object for the u2 value
             @return     The greatest common divisor of a and b
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.Square(System.Int32[],System.Int32[])">
            return w with w = x * x - w is assumed to have enough space.
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.Multiply(System.Int32[],System.Int32[],System.Int32[])">
            return x with x = y * z - x is assumed to have enough space.
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.GetMQuote">
            Calculate mQuote = -m^(-1) mod b with b = 2^32 (32 = word size)
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.MultiplyMonty(System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int64)">
            Montgomery multiplication: a = x * y * R^(-1) mod m
            <br/>
            Based algorithm 14.36 of Handbook of Applied Cryptography.
            <br/>
            <li> m, x, y should have length n </li>
            <li> a should have length (n + 1) </li>
            <li> b = 2^32, R = b^n </li>
            <br/>
            The result is put in x
            <br/>
            NOTE: the indices of x, y, m, a different in HAC and in Java
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.Remainder(System.Int32[],System.Int32[])">
            return x = x % y - done in place (y value preserved)
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.ShiftLeft(System.Int32[],System.Int32)">
            do a left shift - this returns a new array.
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.ShiftRightInPlace(System.Int32,System.Int32[],System.Int32)">
            do a right shift - this does it in place.
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.ShiftRightOneInPlace(System.Int32,System.Int32[])">
            do a right shift by one - this does it in place.
        </member>
        <member name="M:Trackerbird.Cryptography.BigInteger.Subtract(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            returns x = x - y - we assume x is >= y
        </member>
        <member name="T:Trackerbird.Cryptography.AsymmetricCipherKeyPair">
            a holding class for public/private parameter pairs.
        </member>
        <member name="M:Trackerbird.Cryptography.AsymmetricCipherKeyPair.#ctor(Trackerbird.Cryptography.AsymmetricKeyParameter,Trackerbird.Cryptography.AsymmetricKeyParameter)">
             basic constructor.
            
             @param publicParam a public key parameters object.
             @param privateParam the corresponding private key parameters.
        </member>
        <member name="P:Trackerbird.Cryptography.AsymmetricCipherKeyPair.Public">
             return the public key parameters.
            
             @return the public key parameters.
        </member>
        <member name="P:Trackerbird.Cryptography.AsymmetricCipherKeyPair.Private">
             return the private key parameters.
            
             @return the private key parameters.
        </member>
        <member name="T:Trackerbird.Cryptography.KeyGenerationParameters">
            The base class for parameters to key generators.
        </member>
        <member name="M:Trackerbird.Cryptography.KeyGenerationParameters.#ctor(Trackerbird.Cryptography.SecureRandom,System.Int32)">
             initialise the generator with a source of randomness
             and a strength (in bits).
            
             @param random the random byte source.
             @param strength the size, in bits, of the keys we want to produce.
        </member>
        <member name="P:Trackerbird.Cryptography.KeyGenerationParameters.Random">
             return the random source associated with this
             generator.
            
             @return the generators random source.
        </member>
        <member name="P:Trackerbird.Cryptography.KeyGenerationParameters.Strength">
             return the bit strength for keys produced by this generator,
            
             @return the strength of the keys this generator produces (in bits).
        </member>
        <member name="M:Trackerbird.Cryptography.SecureRandom.#ctor(Trackerbird.Cryptography.IRandomGenerator)">
            <summary>Use the specified instance of IRandomGenerator as random source.</summary>
            <remarks>
            This constructor performs no seeding of either the <c>IRandomGenerator</c> or the
            constructed <c>SecureRandom</c>. It is the responsibility of the client to provide
            proper seed material as necessary/appropriate for the given <c>IRandomGenerator</c>
            implementation.
            </remarks>
            <param name="generator">The source to generate all random bytes from.</param>
        </member>
        <member name="T:Trackerbird.Cryptography.IRandomGenerator">
            <remarks>Generic interface for objects generating random bytes.</remarks>
        </member>
        <member name="M:Trackerbird.Cryptography.IRandomGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.IRandomGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.IRandomGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.IRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="T:Trackerbird.Cryptography.ReversedWindowGenerator">
            <remarks>
            Takes bytes generated by an underling RandomGenerator and reverses the order in
            each small window (of configurable size).
            <p>
            Access to internals is synchronized so a single one of these can be shared.
            </p>
            </remarks>
        </member>
        <member name="M:Trackerbird.Cryptography.ReversedWindowGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.ReversedWindowGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.ReversedWindowGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.ReversedWindowGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="T:Trackerbird.Cryptography.ThreadedSeedGenerator">
            A thread based seed generator - one source of randomness.
            <p>
            Based on an idea from Marcus Lippert.
            </p>
        </member>
        <member name="M:Trackerbird.Cryptography.ThreadedSeedGenerator.GenerateSeed(System.Int32,System.Boolean)">
            Generate seed bytes. Set fast to false for best quality.
            <p>
            If fast is set to true, the code should be round about 8 times faster when
            generating a long sequence of random bytes. 20 bytes of random values using
            the fast mode take less than half a second on a Nokia e70. If fast is set to false,
            it takes round about 2500 ms.
            </p>
            @param numBytes the number of bytes to generate
            @param fast true if fast mode should be used
        </member>
        <member name="T:Trackerbird.Cryptography.DigestRandomGenerator">
            Random generation based on the digest with counter. Calling AddSeedMaterial will
            always increase the entropy of the hash.
            <p>
            Internal access to the digest is synchronized so a single one of these can be shared.
            </p>
        </member>
        <member name="T:Trackerbird.Cryptography.IDigest">
            interface that a message digest conforms to.
        </member>
        <member name="M:Trackerbird.Cryptography.IDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.IDigest.GetByteLength">
             return the size, in bytes, of the internal buffer used by this digest.
            
             @return the size, in bytes, of the internal buffer used by this digest.
        </member>
        <member name="M:Trackerbird.Cryptography.IDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:Trackerbird.Cryptography.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param input the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:Trackerbird.Cryptography.IDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param output the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:Trackerbird.Cryptography.IDigest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="P:Trackerbird.Cryptography.IDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="T:Trackerbird.Cryptography.Sha256Digest">
             Draft FIPS 180-2 implementation of SHA-256. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="T:Trackerbird.Cryptography.GeneralDigest">
            base implementation of MD4 family style digest as outlined in
            "Handbook of Applied Cryptography", pages 344 - 347.
        </member>
        <member name="M:Trackerbird.Cryptography.Sha256Digest.#ctor(Trackerbird.Cryptography.Sha256Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.Sha256Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Trackerbird.Cryptography.Sha1Digest">
             implementation of SHA-1 as outlined in "Handbook of Applied Cryptography", pages 346 - 349.
            
             It is interesting to ponder why the, apart from the extra IV, the other difference here from MD5
             is the "endienness" of the word processing!
        </member>
        <member name="M:Trackerbird.Cryptography.Sha1Digest.#ctor(Trackerbird.Cryptography.Sha1Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.Sha1Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:Trackerbird.Cryptography.SignerUtilities">
            <summary>
             Signer Utility class contains methods that can not be specifically grouped into other classes.
            </summary>
        </member>
        <member name="M:Trackerbird.Cryptography.SignerUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="F:Trackerbird.Cryptography.X9ObjectIdentifiers.AnsiX942">
            X9.42
        </member>
        <member name="F:Trackerbird.Cryptography.X9ObjectIdentifiers.IdDsaWithSha1">
            id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)
                  us(840) x9-57 (10040) x9cm(4) 3 }
        </member>
        <member name="F:Trackerbird.Cryptography.X9ObjectIdentifiers.X9x63Scheme">
            X9.63
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1Encodable.GetDerEncoded">
             Return the DER encoding of the object, null if the DER encoding can not be made.
            
             @return a DER byte array, null otherwise.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1Object.FromByteArray(System.Byte[])">
            <summary>Create a base ASN.1 object from a byte array.</summary>
            <param name="data">The byte array to parse.</param>
            <returns>The base ASN.1 object represented by the byte array.</returns>
            <exception cref="T:System.IO.IOException">If there is a problem parsing the data.</exception>
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1Object.FromStream(System.IO.Stream)">
            <summary>Read a base ASN.1 object from a stream.</summary>
            <param name="inStr">The stream to parse.</param>
            <returns>The base ASN.1 object represented by the byte array.</returns>
            <exception cref="T:System.IO.IOException">If there is a problem parsing the data.</exception>
        </member>
        <member name="M:Trackerbird.Cryptography.DerObjectIdentifier.GetInstance(System.Object)">
             return an Oid from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerObjectIdentifier.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return an object Identifier from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="T:Trackerbird.Cryptography.DerNull">
            A Null object.
        </member>
        <member name="M:Trackerbird.Cryptography.AlgorithmIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
                 AlgorithmIdentifier ::= Sequence {
                                       algorithm OBJECT IDENTIFIER,
                                       parameters ANY DEFINED BY algorithm OPTIONAL }
            </pre>
        </member>
        <member name="T:Trackerbird.Cryptography.DigestUtilities">
            <remarks>
             Utility class for creating IDigest objects from their names/Oids
            </remarks>
        </member>
        <member name="M:Trackerbird.Cryptography.DigestUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a given digest mechanism.
            </summary>
            <param name="mechanism">A string representation of the digest meanism.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="M:Trackerbird.Cryptography.RsassaPssParameters.#ctor">
            The default version
        </member>
        <member name="M:Trackerbird.Cryptography.RsassaPssParameters.ToAsn1Object">
             <pre>
             RSASSA-PSS-params ::= SEQUENCE {
               hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,
                maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
                saltLength         [2] INTEGER  DEFAULT 20,
                trailerField       [3] TrailerField  DEFAULT trailerFieldBC
              }
            
             OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
                { OID id-sha1 PARAMETERS NULL   }|
                { OID id-sha256 PARAMETERS NULL }|
                { OID id-sha384 PARAMETERS NULL }|
                { OID id-sha512 PARAMETERS NULL },
                ...  -- Allows for future expansion --
             }
            
             PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
               { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
                ...  -- Allows for future expansion --
             }
            
             TrailerField ::= INTEGER { trailerFieldBC(1) }
             </pre>
             @return the asn1 primitive representing the parameters.
        </member>
        <member name="M:Trackerbird.Cryptography.DerInteger.GetInstance(System.Object)">
             return an integer from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerInteger.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return an Integer from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="P:Trackerbird.Cryptography.DerInteger.PositiveValue">
            in some cases positive values Get crammed into a space,
            that's not quite big enough...
        </member>
        <member name="M:Trackerbird.Cryptography.ISigner.Init(System.Boolean,Trackerbird.Cryptography.ICipherParameters)">
             Initialise the signer for signing or verification.
            
             @param forSigning true if for signing, false otherwise
             @param param necessary parameters.
        </member>
        <member name="M:Trackerbird.Cryptography.ISigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Trackerbird.Cryptography.ISigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Trackerbird.Cryptography.ISigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Trackerbird.Cryptography.ISigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="M:Trackerbird.Cryptography.ISigner.Reset">
            reset the internal state
        </member>
        <member name="P:Trackerbird.Cryptography.ISigner.AlgorithmName">
             Return the name of the algorithm the signer implements.
            
             @return the name of the algorithm the signer implements.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaDigestSigner.#cctor">
            <summary>
            Load oid table.
            </summary>
        </member>
        <member name="M:Trackerbird.Cryptography.RsaDigestSigner.Init(System.Boolean,Trackerbird.Cryptography.ICipherParameters)">
             Initialise the signer for signing or verification.
            
             @param forSigning true if for signing, false otherwise
             @param param necessary parameters.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaDigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Trackerbird.Cryptography.RsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Trackerbird.Cryptography.RsaDigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaDigestSigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="M:Trackerbird.Cryptography.MD2Digest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param out the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:Trackerbird.Cryptography.MD2Digest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="M:Trackerbird.Cryptography.MD2Digest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param in the input byte to be entered.
        </member>
        <member name="M:Trackerbird.Cryptography.MD2Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param in the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="P:Trackerbird.Cryptography.MD2Digest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:Trackerbird.Cryptography.MD4Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Trackerbird.Cryptography.MD4Digest.#ctor(Trackerbird.Cryptography.MD4Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.MD4Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="M:Trackerbird.Cryptography.MD5Digest.#ctor(Trackerbird.Cryptography.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.MD5Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="M:Trackerbird.Cryptography.Sha224Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Trackerbird.Cryptography.Sha224Digest.#ctor(Trackerbird.Cryptography.Sha224Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.Sha224Digest.Reset">
            reset the chaining variables
        </member>
        <member name="M:Trackerbird.Cryptography.LongDigest.#ctor">
            Constructor for variable length word
        </member>
        <member name="M:Trackerbird.Cryptography.LongDigest.#ctor(Trackerbird.Cryptography.LongDigest)">
            Copy constructor.  We are using copy constructors in place
            of the object.Clone() interface as this interface is not
            supported by J2ME.
        </member>
        <member name="M:Trackerbird.Cryptography.LongDigest.AdjustByteCounts">
            adjust the byte counts so that byteCount2 represents the
            upper long (less 3 bits) word of the byte count.
        </member>
        <member name="M:Trackerbird.Cryptography.Sha384Digest.#ctor(Trackerbird.Cryptography.Sha384Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.Sha384Digest.Reset">
            reset the chaining variables
        </member>
        <member name="M:Trackerbird.Cryptography.Sha512Digest.#ctor(Trackerbird.Cryptography.Sha512Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.Sha512Digest.Reset">
            reset the chaining variables
        </member>
        <member name="M:Trackerbird.Cryptography.RsaBlindedEngine.Init(System.Boolean,Trackerbird.Cryptography.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaBlindedEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaBlindedEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:Trackerbird.Cryptography.RsaBlindedEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="M:Trackerbird.Cryptography.DsaDigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Trackerbird.Cryptography.DsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Trackerbird.Cryptography.DsaDigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Trackerbird.Cryptography.DsaDigestSigner.VerifySignature(System.Byte[])">
            <returns>true if the internal state represents the signature described in the passed in array.</returns>
        </member>
        <member name="M:Trackerbird.Cryptography.DsaDigestSigner.Reset">
            <summary>Reset the internal state</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.IDsa.Init(System.Boolean,Trackerbird.Cryptography.ICipherParameters)">
             initialise the signer for signature generation or signature
             verification.
            
             @param forSigning true if we are generating a signature, false
             otherwise.
             @param param key parameters for signature generation.
        </member>
        <member name="M:Trackerbird.Cryptography.IDsa.GenerateSignature(System.Byte[])">
             sign the passed in message (usually the output of a hash function).
            
             @param message the message to be signed.
             @return two big integers representing the r and s values respectively.
        </member>
        <member name="M:Trackerbird.Cryptography.IDsa.VerifySignature(System.Byte[],Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
             verify the message message against the signature values r and s.
            
             @param message the message that was supposed to have been signed.
             @param r the r signature value.
             @param s the s signature value.
        </member>
        <member name="M:Trackerbird.Cryptography.DsaSigner.GenerateSignature(System.Byte[])">
             Generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Trackerbird.Cryptography.DsaSigner.VerifySignature(System.Byte[],Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message for standard DSA the message should be a
            SHA-1 hash of the real message to be verified.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1TaggedObject.#ctor(System.Int32,Trackerbird.Cryptography.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1TaggedObject.#ctor(System.Boolean,System.Int32,Trackerbird.Cryptography.Asn1Encodable)">
            @param explicitly true if the object is explicitly tagged.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1TaggedObject.IsExplicit">
            return whether or not the object may be explicitly tagged.
            <p>
            Note: if the object has been read from an input stream, the only
            time you can be sure if isExplicit is returning the true state of
            affairs is if it returns false. An implicitly tagged object may appear
            to be explicitly tagged, so you need to understand the context under
            which the reading was done as well, see GetObject below.</p>
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1TaggedObject.GetObject">
            return whatever was following the tag.
            <p>
            Note: tagged objects are generally context dependent if you're
            trying to extract a tagged object you should be going via the
            appropriate GetInstance method.</p>
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1TaggedObject.GetObjectParser(System.Int32,System.Boolean)">
            Return the object held in this tagged object as a parser assuming it has
            the type of the passed in tag. If the object doesn't have a parser
            associated with it, the base object is returned.
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD128Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD128Digest.#ctor(Trackerbird.Cryptography.RipeMD128Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD128Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD160Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD160Digest.#ctor(Trackerbird.Cryptography.RipeMD160Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD160Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD256Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD256Digest.#ctor(Trackerbird.Cryptography.RipeMD256Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD256Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.PssSigner.#ctor(Trackerbird.Cryptography.IAsymmetricBlockCipher,Trackerbird.Cryptography.IDigest,System.Int32)">
            <summary>Basic constructor</summary>
            <param name="cipher">the asymmetric cipher to use.</param>
            <param name="digest">the digest to use.</param>
            <param name="saltLen">the length of the salt to use (in bytes).</param>
        </member>
        <member name="M:Trackerbird.Cryptography.PssSigner.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.PssSigner.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.PssSigner.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.PssSigner.GenerateSignature">
            <summary> Generate a signature for the message we've been loaded with using
            the key we were initialised with.
            </summary>
        </member>
        <member name="M:Trackerbird.Cryptography.PssSigner.VerifySignature(System.Byte[])">
            <summary> return true if the internal state represents the signature described
            in the passed in array.
            </summary>
        </member>
        <member name="M:Trackerbird.Cryptography.PssSigner.ItoOSP(System.Int32,System.Byte[])">
            <summary> int to octet string.</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.PssSigner.MaskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> mask generator function, as described in Pkcs1v2.</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.ECDsaSigner.GenerateSignature(System.Byte[])">
             Generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Trackerbird.Cryptography.ECDsaSigner.VerifySignature(System.Byte[],Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message (for standard DSA the message should be
            a SHA-1 hash of the real message to be verified).
        </member>
        <member name="M:Trackerbird.Cryptography.ECNRSigner.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with.  Generally, the order of the curve should be at
             least as long as the hash of the message of interest, and with
             ECNR it *must* be at least as long.
            
             @param digest  the digest to be signed.
             @exception DataLengthException if the digest is longer than the key allows
        </member>
        <member name="M:Trackerbird.Cryptography.ECNRSigner.VerifySignature(System.Byte[],Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
             return true if the value r and s represent a signature for the
             message passed in. Generally, the order of the curve should be at
             least as long as the hash of the message of interest, and with
             ECNR, it *must* be at least as long.  But just in case the signer
             applied mod(n) to the longer digest, this implementation will
             apply mod(n) during verification.
            
             @param digest  the digest to be verified.
             @param r       the r value of the signature.
             @param s       the s value of the signature.
             @exception DataLengthException if the digest is longer than the key allows
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3410DigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3410DigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3410DigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3410DigestSigner.VerifySignature(System.Byte[])">
            <returns>true if the internal state represents the signature described in the passed in array.</returns>
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3410DigestSigner.Reset">
            <summary>Reset the internal state</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3410Signer.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional Gost3410 the message should be a Gost3411
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3410Signer.VerifySignature(System.Byte[],Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
            return true if the value r and s represent a Gost3410 signature for
            the passed in message for standard Gost3410 the message should be a
            Gost3411 hash of the real message to be verified.
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3411Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3411Digest.#ctor(System.Byte[])">
            Constructor to allow use of a particular sbox with GOST28147
            @see GOST28147Engine#getSBox(String)
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3411Digest.#ctor(Trackerbird.Cryptography.Gost3411Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="F:Trackerbird.Cryptography.Gost3411Digest.C2">
            reset the chaining variables to the IV values.
        </member>
        <member name="M:Trackerbird.Cryptography.ECGost3410Signer.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional GOST3410 the message should be a GOST3411
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:Trackerbird.Cryptography.ECGost3410Signer.VerifySignature(System.Byte[],Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
            return true if the value r and s represent a GOST3410 signature for
            the passed in message (for standard GOST3410 the message should be
            a GOST3411 hash of the real message to be verified).
        </member>
        <member name="M:Trackerbird.Cryptography.ISignerWithRecovery.HasFullMessage">
             Returns true if the signer has recovered the full message as
             part of signature verification.
            
             @return true if full message recovered.
        </member>
        <member name="M:Trackerbird.Cryptography.ISignerWithRecovery.GetRecoveredMessage">
             Returns a reference to what message was recovered (if any).
            
             @return full/partial message, null if nothing.
        </member>
        <member name="M:Trackerbird.Cryptography.ISignerWithRecovery.UpdateWithRecoveredMessage(System.Byte[])">
             Perform an update with the recovered message before adding any other data. This must
             be the first update method called, and calling it will result in the signer assuming
             that further calls to update will include message content past what is recoverable.
            
             @param signature the signature that we are in the process of verifying.
             @throws IllegalStateException
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.GetRecoveredMessage">
            <summary>
            Return a reference to the recoveredMessage message.
            </summary>
            <returns>The full/partial recoveredMessage message.</returns>
            <seealso cref="M:Trackerbird.Cryptography.ISignerWithRecovery.GetRecoveredMessage"/>
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.#ctor(Trackerbird.Cryptography.IAsymmetricBlockCipher,Trackerbird.Cryptography.IDigest,System.Boolean)">
            <summary>
            Generate a signer for the with either implicit or explicit trailers
            for ISO9796-2.
            </summary>
            <param name="cipher">base cipher to use for signature creation/verification</param>
            <param name="digest">digest to use.</param>
            <param name="isImplicit">whether or not the trailer is implicit or gives the hash.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.#ctor(Trackerbird.Cryptography.IAsymmetricBlockCipher,Trackerbird.Cryptography.IDigest)">
             <summary> Constructor for a signer with an explicit digest trailer.
            
             </summary>
             <param name="cipher">cipher to use.
             </param>
             <param name="digest">digest to sign with.
             </param>
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.IsSameAs(System.Byte[],System.Byte[])">
            <summary> compare two byte arrays - constant time.</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.GenerateSignature">
            <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.VerifySignature(System.Byte[])">
            <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
        </member>
        <member name="M:Trackerbird.Cryptography.Iso9796d2Signer.HasFullMessage">
            <summary>
            Return true if the full message was recoveredMessage.
            </summary>
            <returns> true on full message recovery, false otherwise.</returns>
            <seealso cref="M:Trackerbird.Cryptography.ISignerWithRecovery.HasFullMessage"/>
        </member>
        <member name="M:Trackerbird.Cryptography.BigIntegers.AsUnsignedByteArray(Trackerbird.Cryptography.BigInteger)">
             Return the passed in value as an unsigned byte array.
            
             @param value value to be converted.
             @return a byte array without a leading zero byte if present in the signed encoding.
        </member>
        <member name="M:Trackerbird.Cryptography.BigIntegers.CreateRandomInRange(Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.SecureRandom)">
            Return a random BigInteger not less than 'min' and not greater than 'max'
            
            @param min the least value that may be generated
            @param max the greatest value that may be generated
            @param random the source of randomness
            @return a random BigInteger value in the range [min,max]
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1Sequence.GetInstance(System.Object)">
             return an Asn1Sequence from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1Sequence.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             Return an ASN1 sequence from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on
             reading but we were expecting it to be implicitly tagged in the
             normal course of events it indicates that we lost the surrounding
             sequence - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sequences you really <b>should</b>
             be using this method.
            
             @param obj the tagged object.
             @param explicitly true if the object is meant to be explicitly tagged,
                      false otherwise.
             @exception ArgumentException if the tagged object cannot
                      be converted.
        </member>
        <member name="P:Trackerbird.Cryptography.Asn1Sequence.Item(System.Int32)">
             return the object at the sequence position indicated by index.
            
             @param index the sequence number (starting at zero) of the object
             @return the object at the sequence position indicated by index.
        </member>
        <member name="M:Trackerbird.Cryptography.DerSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:Trackerbird.Cryptography.DerSequence.#ctor(Trackerbird.Cryptography.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:Trackerbird.Cryptography.DerSequence.#ctor(Trackerbird.Cryptography.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="M:Trackerbird.Cryptography.SecurityUtilityException.#ctor">
            base constructor.
        </member>
        <member name="M:Trackerbird.Cryptography.SecurityUtilityException.#ctor(System.String)">
             create a SecurityUtilityException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD320Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD320Digest.#ctor(Trackerbird.Cryptography.RipeMD320Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:Trackerbird.Cryptography.RipeMD320Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.TigerDigest.#ctor">
            Standard constructor
        </member>
        <member name="M:Trackerbird.Cryptography.TigerDigest.#ctor(Trackerbird.Cryptography.TigerDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:Trackerbird.Cryptography.TigerDigest.Reset">
            reset the chaining variables
        </member>
        <member name="M:Trackerbird.Cryptography.WhirlpoolDigest.#ctor(Trackerbird.Cryptography.WhirlpoolDigest)">
            Copy constructor. This will copy the state of the provided message
            digest.
        </member>
        <member name="M:Trackerbird.Cryptography.WhirlpoolDigest.Reset">
            Reset the chaining variables
        </member>
        <member name="M:Trackerbird.Cryptography.DerTaggedObject.#ctor(System.Int32,Trackerbird.Cryptography.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Trackerbird.Cryptography.DerTaggedObject.#ctor(System.Boolean,System.Int32,Trackerbird.Cryptography.Asn1Encodable)">
            @param explicitly true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Trackerbird.Cryptography.DerTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1OctetString.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return an Octet string from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                          be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1OctetString.GetInstance(System.Object)">
             return an Octet string from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1OctetString.#ctor(System.Byte[])">
            @param string the octets making up the octet string.
        </member>
        <member name="M:Trackerbird.Cryptography.Arrays.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Are two arrays equal.
            </summary>
            <param name="a">Left side.</param>
            <param name="b">Right side.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Trackerbird.Cryptography.Arrays.ConstantTimeAreEqual(System.Byte[],System.Byte[])">
            <summary>
            A constant time equals comparison - does not terminate early if
            test will fail.
            </summary>
            <param name="a">first array</param>
            <param name="b">second array</param>
            <returns>true if arrays equal, false otherwise.</returns>
        </member>
        <member name="F:Trackerbird.Cryptography.Pkcs1Encoding.StrictLengthEnabledProperty">
            some providers fail to include the leading zero in PKCS1 encoded blocks. If you need to
            work with one of these set the system property Org.BouncyCastle.Pkcs1.Strict to false.
        </member>
        <member name="M:Trackerbird.Cryptography.Pkcs1Encoding.#ctor(Trackerbird.Cryptography.IAsymmetricBlockCipher)">
            Basic constructor.
            @param cipher
        </member>
        <member name="M:Trackerbird.Cryptography.Pkcs1Encoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not in Pkcs1 format.
        </member>
        <member name="P:Trackerbird.Cryptography.Pkcs1Encoding.StrictLengthEnabled">
            The same effect can be achieved by setting the static property directly
            <p>
            The static property is checked during construction of the encoding object, it is set to
            true by default.
            </p>
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1Set.GetInstance(System.Object)">
             return an ASN1Set from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1Set.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             Return an ASN1 set from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on
             reading but we were expecting it to be implicitly tagged in the
             normal course of events it indicates that we lost the surrounding
             set - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sets you really <b>should</b>
             be using this method.
            
             @param obj the tagged object.
             @param explicitly true if the object is meant to be explicitly tagged
                      false otherwise.
             @exception ArgumentException if the tagged object cannot
                      be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1Set.LessThanOrEqual(System.Byte[],System.Byte[])">
            return true if a &lt;= b (arrays are assumed padded with zeros).
        </member>
        <member name="P:Trackerbird.Cryptography.Asn1Set.Item(System.Int32)">
             return the object at the set position indicated by index.
            
             @param index the set number (starting at zero) of the object
             @return the object at the set position indicated by index.
        </member>
        <member name="M:Trackerbird.Cryptography.InvalidCipherTextException.#ctor">
            base constructor.
        </member>
        <member name="M:Trackerbird.Cryptography.InvalidCipherTextException.#ctor(System.String)">
             create a InvalidCipherTextException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="M:Trackerbird.Cryptography.DateTimeUtilities.DateTimeToUnixMs(System.DateTime)">
            <summary>
            Return the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC) for a given DateTime value.
            </summary>
            <param name="dateTime">A UTC DateTime value not before epoch.</param>
            <returns>Number of whole milliseconds after epoch.</returns>
            <exception cref="T:System.ArgumentException">'dateTime' is before epoch.</exception>
        </member>
        <member name="M:Trackerbird.Cryptography.DateTimeUtilities.UnixMsToDateTime(System.Int64)">
            <summary>
            Create a DateTime value from the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
            <param name="unixMs">Number of milliseconds since the epoch.</param>
            <returns>A UTC DateTime value</returns>
        </member>
        <member name="M:Trackerbird.Cryptography.DateTimeUtilities.CurrentUnixMs">
            <summary>
            Return the current number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
        </member>
        <member name="M:Trackerbird.Cryptography.DerOctetString.#ctor(System.Byte[])">
            <param name="str">The octets making up the octet string.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.BerOctetString.ToBytes(System.Collections.IEnumerable)">
            convert a vector of octet strings into a single byte string
        </member>
        <member name="M:Trackerbird.Cryptography.BerOctetString.#ctor(System.Byte[])">
            <param name="str">The octets making up the octet string.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.BerOctetString.GetEnumerator">
            return the DER octets that make up this string.
        </member>
        <member name="M:Trackerbird.Cryptography.DerSet.#ctor">
            create an empty set
        </member>
        <member name="M:Trackerbird.Cryptography.DerSet.#ctor(Trackerbird.Cryptography.Asn1Encodable)">
            @param obj - a single object that makes up the set.
        </member>
        <member name="M:Trackerbird.Cryptography.DerSet.#ctor(Trackerbird.Cryptography.Asn1EncodableVector)">
            @param v - a vector of objects making up the set.
        </member>
        <member name="M:Trackerbird.Cryptography.ECPoint.SetPreCompInfo(Trackerbird.Cryptography.PreCompInfo)">
            Sets the <code>PreCompInfo</code>. Used by <code>ECMultiplier</code>s
            to save the precomputation for this <code>ECPoint</code> to store the
            precomputation result for use by subsequent multiplication.
            @param preCompInfo The values precomputed by the
            <code>ECMultiplier</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.ECPoint.AssertECMultiplier">
            Sets the appropriate <code>ECMultiplier</code>, unless already set. 
        </member>
        <member name="M:Trackerbird.Cryptography.ECPointBase.GetEncoded">
            return the field element encoded with point compression. (S 4.3.6)
        </member>
        <member name="M:Trackerbird.Cryptography.ECPointBase.Multiply(Trackerbird.Cryptography.BigInteger)">
            Multiplies this <code>ECPoint</code> by the given number.
            @param k The multiplicator.
            @return <code>k * this</code>.
        </member>
        <member name="T:Trackerbird.Cryptography.FpPoint">
            Elliptic curve points over Fp
        </member>
        <member name="M:Trackerbird.Cryptography.FpPoint.#ctor(Trackerbird.Cryptography.ECCurve,Trackerbird.Cryptography.ECFieldElement,Trackerbird.Cryptography.ECFieldElement)">
             Create a point which encodes with point compression.
            
             @param curve the curve to use
             @param x affine x co-ordinate
             @param y affine y co-ordinate
        </member>
        <member name="M:Trackerbird.Cryptography.FpPoint.#ctor(Trackerbird.Cryptography.ECCurve,Trackerbird.Cryptography.ECFieldElement,Trackerbird.Cryptography.ECFieldElement,System.Boolean)">
             Create a point that encodes with or without point compresion.
            
             @param curve the curve to use
             @param x affine x co-ordinate
             @param y affine y co-ordinate
             @param withCompression if true encode with point compression
        </member>
        <member name="M:Trackerbird.Cryptography.FpPoint.AssertECMultiplier">
            Sets the default <code>ECMultiplier</code>, unless already set. 
        </member>
        <member name="T:Trackerbird.Cryptography.F2mPoint">
            Elliptic curve points over F2m
        </member>
        <member name="M:Trackerbird.Cryptography.F2mPoint.#ctor(Trackerbird.Cryptography.ECCurve,Trackerbird.Cryptography.ECFieldElement,Trackerbird.Cryptography.ECFieldElement)">
            @param curve base curve
            @param x x point
            @param y y point
        </member>
        <member name="M:Trackerbird.Cryptography.F2mPoint.#ctor(Trackerbird.Cryptography.ECCurve,Trackerbird.Cryptography.ECFieldElement,Trackerbird.Cryptography.ECFieldElement,System.Boolean)">
            @param curve base curve
            @param x x point
            @param y y point
            @param withCompression true if encode with point compression.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mPoint.#ctor(Trackerbird.Cryptography.ECCurve)">
            Constructor for point at infinity
        </member>
        <member name="M:Trackerbird.Cryptography.F2mPoint.CheckPoints(Trackerbird.Cryptography.ECPoint,Trackerbird.Cryptography.ECPoint)">
            Check, if two <code>ECPoint</code>s can be added or subtracted.
            @param a The first <code>ECPoint</code> to check.
            @param b The second <code>ECPoint</code> to check.
            @throws IllegalArgumentException if <code>a</code> and <code>b</code>
            cannot be added.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mPoint.AddSimple(Trackerbird.Cryptography.F2mPoint)">
            Adds another <code>ECPoints.F2m</code> to <code>this</code> without
            checking if both points are on the same curve. Used by multiplication
            algorithms, because there all points are a multiple of the same point
            and hence the checks can be omitted.
            @param b The other <code>ECPoints.F2m</code> to add to
            <code>this</code>.
            @return <code>this + b</code>
        </member>
        <member name="M:Trackerbird.Cryptography.F2mPoint.SubtractSimple(Trackerbird.Cryptography.F2mPoint)">
            Subtracts another <code>ECPoints.F2m</code> from <code>this</code>
            without checking if both points are on the same curve. Used by
            multiplication algorithms, because there all points are a multiple
            of the same point and hence the checks can be omitted.
            @param b The other <code>ECPoints.F2m</code> to subtract from
            <code>this</code>.
            @return <code>this - b</code>
        </member>
        <member name="M:Trackerbird.Cryptography.F2mPoint.AssertECMultiplier">
            Sets the appropriate <code>ECMultiplier</code>, unless already set. 
        </member>
        <member name="M:Trackerbird.Cryptography.ECCurveBase.DecodePoint(System.Byte[])">
            Decode a point on this curve from its ASN.1 encoding. The different
            encodings are taken account of, including point compression for
            <code>F<sub>p</sub></code> (X9.62 s 4.2.1 pg 17).
            @return The decoded point.
        </member>
        <member name="T:Trackerbird.Cryptography.FpCurve">
            Elliptic curve over Fp
        </member>
        <member name="T:Trackerbird.Cryptography.F2mCurve">
            Elliptic curves over F2m. The Weierstrass equation is given by
            <code>y<sup>2</sup> + xy = x<sup>3</sup> + ax<sup>2</sup> + b</code>.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mCurve.m">
            The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mCurve.k1">
            TPB: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            PPB: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Trackerbird.Cryptography.F2mCurve.k2">
            TPB: Always set to <code>0</code><br/>
            PPB: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Trackerbird.Cryptography.F2mCurve.k3">
            TPB: Always set to <code>0</code><br/>
            PPB: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Trackerbird.Cryptography.F2mCurve.n">
            The order of the base point of the curve.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mCurve.h">
            The cofactor of the curve.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mCurve.infinity">
            The point at infinity on this curve.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mCurve.mu">
            The parameter <code>&#956;</code> of the elliptic curve if this is
            a Koblitz curve.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mCurve.si">
            The auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction for
            Koblitz curves.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mCurve.#ctor(System.Int32,System.Int32,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
            Constructor for Trinomial Polynomial Basis (TPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mCurve.#ctor(System.Int32,System.Int32,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
            Constructor for Trinomial Polynomial Basis (TPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param n The order of the main subgroup of the elliptic curve.
            @param h The cofactor of the elliptic curve, i.e.
            <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
            Constructor for Pentanomial Polynomial Basis (PPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
            Constructor for Pentanomial Polynomial Basis (PPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param n The order of the main subgroup of the elliptic curve.
            @param h The cofactor of the elliptic curve, i.e.
            <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mCurve.GetMu">
            Returns the parameter <code>&#956;</code> of the elliptic curve.
            @return <code>&#956;</code> of the elliptic curve.
            @throws ArgumentException if the given ECCurve is not a
            Koblitz curve.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mCurve.GetSi">
            @return the auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction for
            Koblitz curves.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mCurve.solveQuadradicEquation(Trackerbird.Cryptography.ECFieldElement)">
             Solves a quadratic equation <code>z<sup>2</sup> + z = beta</code>(X9.62
             D.1.6) The other solution is <code>z + 1</code>.
            
             @param beta
                        The value to solve the qradratic equation for.
             @return the solution for <code>z<sup>2</sup> + z = beta</code> or
                     <code>null</code> if no solution exists.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mCurve.IsTrinomial">
             Return true if curve uses a Trinomial basis.
            
             @return true if curve Trinomial, false otherwise.
        </member>
        <member name="P:Trackerbird.Cryptography.F2mCurve.IsKoblitz">
            Returns true if this is a Koblitz curve (ABC curve).
            @return true if this is a Koblitz curve (ABC curve), false otherwise
        </member>
        <member name="M:Trackerbird.Cryptography.FpFieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation
            returns the right value - if none exists it returns null.
        </member>
        <member name="P:Trackerbird.Cryptography.FpFieldElement.FieldName">
             return the field name for this field.
            
             @return the string "Fp".
        </member>
        <member name="T:Trackerbird.Cryptography.F2mFieldElement">
            Class representing the Elements of the finite field
            <code>F<sub>2<sup>m</sup></sub></code> in polynomial basis (PB)
            representation. Both trinomial (Tpb) and pentanomial (Ppb) polynomial
            basis representations are supported. Gaussian normal basis (GNB)
            representation is not supported.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mFieldElement.Gnb">
            Indicates gaussian normal basis representation (GNB). Number chosen
            according to X9.62. GNB is not implemented at present.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mFieldElement.Tpb">
            Indicates trinomial basis representation (Tpb). Number chosen
            according to X9.62.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mFieldElement.Ppb">
            Indicates pentanomial basis representation (Ppb). Number chosen
            according to X9.62.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mFieldElement.representation">
            Tpb or Ppb.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mFieldElement.m">
            The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mFieldElement.k1">
            Tpb: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            Ppb: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Trackerbird.Cryptography.F2mFieldElement.k2">
            Tpb: Always set to <code>0</code><br/>
            Ppb: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Trackerbird.Cryptography.F2mFieldElement.k3">
            Tpb: Always set to <code>0</code><br/>
            Ppb: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:Trackerbird.Cryptography.F2mFieldElement.x">
            The <code>IntArray</code> holding the bits.
        </member>
        <member name="F:Trackerbird.Cryptography.F2mFieldElement.t">
            The number of <code>int</code>s required to hold <code>m</code> bits.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mFieldElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Trackerbird.Cryptography.BigInteger)">
            Constructor for Ppb.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param x The BigInteger representing the value of the field element.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mFieldElement.#ctor(System.Int32,System.Int32,Trackerbird.Cryptography.BigInteger)">
            Constructor for Tpb.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param x The BigInteger representing the value of the field element.
        </member>
        <member name="M:Trackerbird.Cryptography.F2mFieldElement.CheckFieldElements(Trackerbird.Cryptography.ECFieldElement,Trackerbird.Cryptography.ECFieldElement)">
            Checks, if the ECFieldElements <code>a</code> and <code>b</code>
            are elements of the same field <code>F<sub>2<sup>m</sup></sub></code>
            (having the same representation).
            @param a field element.
            @param b field element to be compared.
            @throws ArgumentException if <code>a</code> and <code>b</code>
            are not elements of the same field
            <code>F<sub>2<sup>m</sup></sub></code> (having the same
            representation).
        </member>
        <member name="P:Trackerbird.Cryptography.F2mFieldElement.Representation">
            @return the representation of the field
            <code>F<sub>2<sup>m</sup></sub></code>, either of
            {@link F2mFieldElement.Tpb} (trinomial
            basis representation) or
            {@link F2mFieldElement.Ppb} (pentanomial
            basis representation).
        </member>
        <member name="P:Trackerbird.Cryptography.F2mFieldElement.M">
            @return the degree <code>m</code> of the reduction polynomial
            <code>f(z)</code>.
        </member>
        <member name="P:Trackerbird.Cryptography.F2mFieldElement.K1">
            @return Tpb: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            Ppb: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="P:Trackerbird.Cryptography.F2mFieldElement.K2">
            @return Tpb: Always returns <code>0</code><br/>
            Ppb: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="P:Trackerbird.Cryptography.F2mFieldElement.K3">
            @return Tpb: Always set to <code>0</code><br/>
            Ppb: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1InputStream.#ctor(System.IO.Stream,System.Int32)">
             Create an ASN1InputStream where no DER object will be longer than limit.
            
             @param input stream containing ASN.1 encoded data.
             @param limit maximum size of a DER encoded object.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1InputStream.#ctor(System.Byte[])">
             Create an ASN1InputStream based on the input byte array. The length of DER objects in
             the stream is automatically limited to the length of the input array.
            
             @param input array containing ASN.1 encoded data.
        </member>
        <member name="M:Trackerbird.Cryptography.Asn1InputStream.BuildObject(System.Int32,System.Int32,System.Int32)">
            build an object given its tag and the number of bytes to construct it from.
        </member>
        <member name="M:Trackerbird.Cryptography.ECKeyPairGenerator.GenerateKeyPair">
            Given the domain parameters this routine Generates an EC key
            pair in accordance with X9.62 section 5.2.1 pages 26, 27.
        </member>
        <member name="M:Trackerbird.Cryptography.IBlockCipher.Init(System.Boolean,Trackerbird.Cryptography.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:Trackerbird.Cryptography.IBlockCipher.GetBlockSize">
            <returns>The block size for this cipher, in bytes.</returns>
        </member>
        <member name="M:Trackerbird.Cryptography.IBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="outBuf">The output buffer.</param>
            <param name="outOff">The offset into <paramref>outBuf</paramref> to write the output block.</param>
            <exception cref="T:Trackerbird.Cryptography.DataLengthException">If input block is wrong size, or outBuf too small.</exception>
            <returns>The number of bytes processed and produced.</returns>
        </member>
        <member name="M:Trackerbird.Cryptography.IBlockCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:Trackerbird.Cryptography.IBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="P:Trackerbird.Cryptography.IBlockCipher.IsPartialBlockOkay">
            <summary>Indicates whether this cipher can handle partial blocks.</summary>
        </member>
        <member name="M:Trackerbird.Cryptography.Gost28147Engine.#ctor">
            standard constructor.
        </member>
        <member name="M:Trackerbird.Cryptography.Gost28147Engine.Init(System.Boolean,Trackerbird.Cryptography.ICipherParameters)">
             initialise an Gost28147 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is inappropriate.
        </member>
        <member name="M:Trackerbird.Cryptography.Gost28147Engine.GetSBox(System.String)">
            Return the S-Box associated with SBoxName
            @param sBoxName name of the S-Box
            @return byte array representing the S-Box
        </member>
        <member name="M:Trackerbird.Cryptography.Gost3410NamedParameters.GetByOid(Trackerbird.Cryptography.DerObjectIdentifier)">
             return the GOST3410ParamSetParameters object for the given OID, null if it
             isn't present.
            
             @param oid an object identifier representing a named parameters, if present.
        </member>
        <member name="P:Trackerbird.Cryptography.Gost3410NamedParameters.Names">
            returns an enumeration containing the name strings for parameters
            contained in this structure.
        </member>
        <member name="F:Trackerbird.Cryptography.SecObjectIdentifiers.EllipticCurve">
            EllipticCurve OBJECT IDENTIFIER ::= {
                  iso(1) identified-organization(3) certicom(132) curve(0)
            }
        </member>
        <member name="M:Trackerbird.Cryptography.TeleTrusTNamedCurves.GetByOid(Trackerbird.Cryptography.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Trackerbird.Cryptography.TeleTrusTNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Trackerbird.Cryptography.TeleTrusTNamedCurves.GetName(Trackerbird.Cryptography.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Trackerbird.Cryptography.TeleTrusTNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Trackerbird.Cryptography.X9ECParameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             ECParameters ::= Sequence {
                 version         Integer { ecpVer1(1) } (ecpVer1),
                 fieldID         FieldID {{FieldTypes}},
                 curve           X9Curve,
                 base            X9ECPoint,
                 order           Integer,
                 cofactor        Integer OPTIONAL
             }
            </pre>
        </member>
        <member name="M:Trackerbird.Cryptography.Hex.Encode(System.Byte[])">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:Trackerbird.Cryptography.Hex.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:Trackerbird.Cryptography.Hex.Encode(System.Byte[],System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Trackerbird.Cryptography.Hex.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Trackerbird.Cryptography.Hex.Decode(System.Byte[])">
             decode the Hex encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Trackerbird.Cryptography.Hex.Decode(System.String)">
             decode the Hex encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Trackerbird.Cryptography.Hex.Decode(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Trackerbird.Cryptography.BerSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:Trackerbird.Cryptography.BerSequence.#ctor(Trackerbird.Cryptography.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:Trackerbird.Cryptography.BerSequence.#ctor(Trackerbird.Cryptography.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="M:Trackerbird.Cryptography.BerTaggedObject.#ctor(System.Int32,Trackerbird.Cryptography.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Trackerbird.Cryptography.BerTaggedObject.#ctor(System.Boolean,System.Int32,Trackerbird.Cryptography.Asn1Encodable)">
            @param explicitly true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:Trackerbird.Cryptography.BerTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="M:Trackerbird.Cryptography.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a Hex output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Trackerbird.Cryptography.HexEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the Hex encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Trackerbird.Cryptography.HexEncoder.DecodeString(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Trackerbird.Cryptography.X9ECPoint.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             ECPoint ::= OCTET STRING
            </pre>
            <p>
            Octet string produced using ECPoint.GetEncoded().</p>
        </member>
        <member name="M:Trackerbird.Cryptography.X9Curve.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             Curve ::= Sequence {
                 a               FieldElement,
                 b               FieldElement,
                 seed            BIT STRING      OPTIONAL
             }
            </pre>
        </member>
        <member name="M:Trackerbird.Cryptography.X9FieldElement.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             FieldElement ::= OCTET STRING
            </pre>
            <p>
            <ol>
            <li> if <i>q</i> is an odd prime then the field element is
            processed as an Integer and converted to an octet string
            according to x 9.62 4.3.1.</li>
            <li> if <i>q</i> is 2<sup>m</sup> then the bit string
            contained in the field element is converted into an octet
            string with the same ordering padded at the front if necessary.
            </li>
            </ol>
            </p>
        </member>
        <member name="M:Trackerbird.Cryptography.DerBitString.GetPadBits(System.Int32)">
            return the correct number of pad bits for a bit string defined in
            a 32 bit constant
        </member>
        <member name="M:Trackerbird.Cryptography.DerBitString.GetBytes(System.Int32)">
            return the correct number of bytes for a bit string defined in
            a 32 bit constant
        </member>
        <member name="M:Trackerbird.Cryptography.DerBitString.GetInstance(System.Object)">
             return a Bit string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerBitString.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return a Bit string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerBitString.#ctor(System.Byte[],System.Int32)">
            @param data the octets making up the bit string.
            @param padBits the number of extra bits at the end of the string.
        </member>
        <member name="P:Trackerbird.Cryptography.DerBitString.IntValue">
            @return the value of the bit string as an int (truncating if necessary)
        </member>
        <member name="M:Trackerbird.Cryptography.X9FieldID.#ctor(Trackerbird.Cryptography.BigInteger)">
            Constructor for elliptic curves over prime fields
            <code>F<sub>2</sub></code>.
            @param primeP The prime <code>p</code> defining the prime field.
        </member>
        <member name="M:Trackerbird.Cryptography.X9FieldID.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            Constructor for elliptic curves over binary fields
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>..
        </member>
        <member name="M:Trackerbird.Cryptography.X9FieldID.ToAsn1Object">
            Produce a Der encoding of the following structure.
            <pre>
             FieldID ::= Sequence {
                 fieldType       FIELD-ID.&amp;id({IOSet}),
                 parameters      FIELD-ID.&amp;Type({IOSet}{&#64;fieldType})
             }
            </pre>
        </member>
        <member name="M:Trackerbird.Cryptography.NistNamedCurves.GetByOid(Trackerbird.Cryptography.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Trackerbird.Cryptography.NistNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Trackerbird.Cryptography.NistNamedCurves.GetName(Trackerbird.Cryptography.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Trackerbird.Cryptography.NistNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Trackerbird.Cryptography.SecNamedCurves.GetByOid(Trackerbird.Cryptography.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Trackerbird.Cryptography.SecNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Trackerbird.Cryptography.SecNamedCurves.GetName(Trackerbird.Cryptography.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Trackerbird.Cryptography.SecNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Trackerbird.Cryptography.X962NamedCurves.GetByOid(Trackerbird.Cryptography.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:Trackerbird.Cryptography.X962NamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:Trackerbird.Cryptography.X962NamedCurves.GetName(Trackerbird.Cryptography.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Trackerbird.Cryptography.X962NamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Trackerbird.Cryptography.ECGost3410NamedCurves.GetByOid(Trackerbird.Cryptography.DerObjectIdentifier)">
             return the ECDomainParameters object for the given OID, null if it
             isn't present.
            
             @param oid an object identifier representing a named parameters, if present.
        </member>
        <member name="M:Trackerbird.Cryptography.ECGost3410NamedCurves.GetName(Trackerbird.Cryptography.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:Trackerbird.Cryptography.ECGost3410NamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:Trackerbird.Cryptography.DerUnknownTag.#ctor(System.Int32,System.Byte[])">
            @param tag the tag value.
            @param data the contents octets.
        </member>
        <member name="M:Trackerbird.Cryptography.DerVisibleString.GetInstance(System.Object)">
             return a Visible string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerVisibleString.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return a Visible string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerVisibleString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:Trackerbird.Cryptography.DerVisibleString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="M:Trackerbird.Cryptography.DerUtf8String.GetInstance(System.Object)">
             return an UTF8 string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerUtf8String.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return an UTF8 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerUtf8String.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:Trackerbird.Cryptography.DerUtf8String.#ctor(System.String)">
            basic constructor
        </member>
        <member name="M:Trackerbird.Cryptography.DerUtcTime.GetInstance(System.Object)">
             return an UTC Time from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerUtcTime.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return an UTC Time from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerUtcTime.#ctor(System.String)">
            The correct format for this is YYMMDDHHMMSSZ (it used to be that seconds were
            never encoded. When you're creating one of these objects from scratch, that's
            what you want to use, otherwise we'll try to deal with whatever Gets read from
            the input stream... (this is why the input format is different from the GetTime()
            method output).
            <p>
            @param time the time string.</p>
        </member>
        <member name="M:Trackerbird.Cryptography.DerUtcTime.#ctor(System.DateTime)">
            base constructor from a DateTime object
        </member>
        <member name="M:Trackerbird.Cryptography.DerUtcTime.ToDateTime">
             return the time as a date based on whatever a 2 digit year will return. For
             standardised processing use ToAdjustedDateTime().
            
             @return the resulting date
             @exception ParseException if the date string cannot be parsed.
        </member>
        <member name="M:Trackerbird.Cryptography.DerUtcTime.ToAdjustedDateTime">
             return the time as an adjusted date
             in the range of 1950 - 2049.
            
             @return a date in the range of 1950 to 2049.
             @exception ParseException if the date string cannot be parsed.
        </member>
        <member name="P:Trackerbird.Cryptography.DerUtcTime.TimeString">
            return the time - always in the form of
             YYMMDDhhmmssGMT(+hh:mm|-hh:mm).
            <p>
            Normally in a certificate we would expect "Z" rather than "GMT",
            however adding the "GMT" means we can just use:
            <pre>
                dateF = new SimpleDateFormat("yyMMddHHmmssz");
            </pre>
            To read in the time and Get a date which is compatible with our local
            time zone.</p>
            <p>
            <b>Note:</b> In some cases, due to the local date processing, this
            may lead to unexpected results. If you want to stick the normal
            convention of 1950 to 2049 use the GetAdjustedTime() method.</p>
        </member>
        <member name="P:Trackerbird.Cryptography.DerUtcTime.AdjustedTimeString">
            <summary>
            Return a time string as an adjusted date with a 4 digit year.
            This goes in the range of 1950 - 2049.
            </summary>
        </member>
        <member name="M:Trackerbird.Cryptography.DerUniversalString.GetInstance(System.Object)">
             return a Universal string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerUniversalString.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return a Universal string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerUniversalString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:Trackerbird.Cryptography.DerT61String.GetInstance(System.Object)">
             return a T61 string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerT61String.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return an T61 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerT61String.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:Trackerbird.Cryptography.DerT61String.#ctor(System.String)">
            basic constructor - with string.
        </member>
        <member name="M:Trackerbird.Cryptography.DerPrintableString.GetInstance(System.Object)">
             return a printable string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerPrintableString.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return a Printable string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerPrintableString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:Trackerbird.Cryptography.DerPrintableString.#ctor(System.String)">
            basic constructor - this does not validate the string
        </member>
        <member name="M:Trackerbird.Cryptography.DerPrintableString.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in a PrintableString.
        </member>
        <member name="M:Trackerbird.Cryptography.DerPrintableString.IsPrintableString(System.String)">
             return true if the passed in String can be represented without
             loss as a PrintableString, false otherwise.
            
             @return true if in printable set, false otherwise.
        </member>
        <member name="M:Trackerbird.Cryptography.DerNumericString.GetInstance(System.Object)">
             return a Numeric string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerNumericString.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return an Numeric string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerNumericString.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:Trackerbird.Cryptography.DerNumericString.#ctor(System.String)">
            basic constructor -  without validation..
        </member>
        <member name="M:Trackerbird.Cryptography.DerNumericString.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in a NumericString.
        </member>
        <member name="M:Trackerbird.Cryptography.DerNumericString.IsNumericString(System.String)">
             Return true if the string can be represented as a NumericString ('0'..'9', ' ')
            
             @param str string to validate.
             @return true if numeric, fale otherwise.
        </member>
        <member name="M:Trackerbird.Cryptography.DerIA5String.GetInstance(System.Object)">
             return a IA5 string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerIA5String.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return an IA5 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerIA5String.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:Trackerbird.Cryptography.DerIA5String.#ctor(System.String)">
            basic constructor - without validation.
        </member>
        <member name="M:Trackerbird.Cryptography.DerIA5String.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in an IA5String.
        </member>
        <member name="M:Trackerbird.Cryptography.DerIA5String.IsIA5String(System.String)">
             return true if the passed in String can be represented without
             loss as an IA5String, false otherwise.
            
             @return true if in printable set, false otherwise.
        </member>
        <member name="M:Trackerbird.Cryptography.DerGeneralizedTime.GetInstance(System.Object)">
             return a generalized time from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerGeneralizedTime.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return a Generalized Time object from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerGeneralizedTime.#ctor(System.String)">
             The correct format for this is YYYYMMDDHHMMSS[.f]Z, or without the Z
             for local time, or Z+-HHMM on the end, for difference between local
             time and UTC time. The fractional second amount f must consist of at
             least one number with trailing zeroes removed.
            
             @param time the time string.
             @exception ArgumentException if string is an illegal format.
        </member>
        <member name="M:Trackerbird.Cryptography.DerGeneralizedTime.#ctor(System.DateTime)">
            base constructor from a local time object
        </member>
        <member name="M:Trackerbird.Cryptography.DerGeneralizedTime.GetTime">
            return the time - always in the form of
             YYYYMMDDhhmmssGMT(+hh:mm|-hh:mm).
            <p>
            Normally in a certificate we would expect "Z" rather than "GMT",
            however adding the "GMT" means we can just use:
            <pre>
                dateF = new SimpleDateFormat("yyyyMMddHHmmssz");
            </pre>
            To read in the time and Get a date which is compatible with our local
            time zone.</p>
        </member>
        <member name="P:Trackerbird.Cryptography.DerGeneralizedTime.TimeString">
            Return the time.
            @return The time string as it appeared in the encoded object.
        </member>
        <member name="M:Trackerbird.Cryptography.DerEnumerated.GetInstance(System.Object)">
             return an integer from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerEnumerated.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return an Enumerated from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerBoolean.GetInstance(System.Object)">
             return a bool from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerBoolean.GetInstance(System.Boolean)">
            return a DerBoolean from the passed in bool.
        </member>
        <member name="M:Trackerbird.Cryptography.DerBoolean.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return a Boolean from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerBmpString.GetInstance(System.Object)">
             return a BMP string from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerBmpString.GetInstance(Trackerbird.Cryptography.Asn1TaggedObject,System.Boolean)">
             return a BMP string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                          be converted.
        </member>
        <member name="M:Trackerbird.Cryptography.DerBmpString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:Trackerbird.Cryptography.DerBmpString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="M:Trackerbird.Cryptography.DerExternal.#ctor(Trackerbird.Cryptography.DerObjectIdentifier,Trackerbird.Cryptography.DerInteger,Trackerbird.Cryptography.Asn1Object,Trackerbird.Cryptography.DerTaggedObject)">
            Creates a new instance of DerExternal
            See X.690 for more informations about the meaning of these parameters
            @param directReference The direct reference or <code>null</code> if not set.
            @param indirectReference The indirect reference or <code>null</code> if not set.
            @param dataValueDescriptor The data value descriptor or <code>null</code> if not set.
            @param externalData The external data in its encoded form.
        </member>
        <member name="M:Trackerbird.Cryptography.DerExternal.#ctor(Trackerbird.Cryptography.DerObjectIdentifier,Trackerbird.Cryptography.DerInteger,Trackerbird.Cryptography.Asn1Object,System.Int32,Trackerbird.Cryptography.Asn1Object)">
            Creates a new instance of DerExternal.
            See X.690 for more informations about the meaning of these parameters
            @param directReference The direct reference or <code>null</code> if not set.
            @param indirectReference The indirect reference or <code>null</code> if not set.
            @param dataValueDescriptor The data value descriptor or <code>null</code> if not set.
            @param encoding The encoding to be used for the external data
            @param externalData The external data
        </member>
        <member name="P:Trackerbird.Cryptography.DerExternal.Encoding">
            The encoding of the content. Valid values are
            <ul>
            <li><code>0</code> single-ASN1-type</li>
            <li><code>1</code> OCTET STRING</li>
            <li><code>2</code> BIT STRING</li>
            </ul>
        </member>
        <member name="M:Trackerbird.Cryptography.Streams.PipeAllLimited(System.IO.Stream,System.Int64,System.IO.Stream)">
            <summary>
            Pipe all bytes from <c>inStr</c> to <c>outStr</c>, throwing <c>StreamFlowException</c> if greater
            than <c>limit</c> bytes in <c>inStr</c>.
            </summary>
            <param name="inStr">
            A <see cref="T:System.IO.Stream"/>
            </param>
            <param name="limit">
            A <see cref="T:System.Int64"/>
            </param>
            <param name="outStr">
            A <see cref="T:System.IO.Stream"/>
            </param>
            <returns>The number of bytes actually transferred, if not greater than <c>limit</c></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Trackerbird.Cryptography.DerApplicationSpecific.GetObject">
             Return the enclosed object assuming explicit tagging.
            
             @return  the resulting object
             @throws IOException if reconstruction fails.
        </member>
        <member name="M:Trackerbird.Cryptography.DerApplicationSpecific.GetObject(System.Int32)">
             Return the enclosed object assuming implicit tagging.
            
             @param derTagNo the type tag that should be applied to the object's contents.
             @return  the resulting object
             @throws IOException if reconstruction fails.
        </member>
        <member name="M:Trackerbird.Cryptography.BerSet.#ctor">
            create an empty sequence
        </member>
        <member name="M:Trackerbird.Cryptography.BerSet.#ctor(Trackerbird.Cryptography.Asn1Encodable)">
            create a set containing one object
        </member>
        <member name="M:Trackerbird.Cryptography.BerSet.#ctor(Trackerbird.Cryptography.Asn1EncodableVector)">
            create a set containing a vector of objects.
        </member>
        <member name="F:Trackerbird.Cryptography.Tnaf.Width">
            The window width of WTNAF. The standard value of 4 is slightly less
            than optimal for running time, but keeps space requirements for
            precomputation low. For typical curves, a value of 5 or 6 results in
            a better running time. When changing this value, the
            <code>&#945;<sub>u</sub></code>'s must be computed differently, see
            e.g. "Guide to Elliptic Curve Cryptography", Darrel Hankerson,
            Alfred Menezes, Scott Vanstone, Springer-Verlag New York Inc., 2004,
            p. 121-122
        </member>
        <member name="F:Trackerbird.Cryptography.Tnaf.Pow2Width">
            2<sup>4</sup>
        </member>
        <member name="F:Trackerbird.Cryptography.Tnaf.Alpha0">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=0</code> as an array
            of <code>ZTauElement</code>s.
        </member>
        <member name="F:Trackerbird.Cryptography.Tnaf.Alpha0Tnaf">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=0</code> as an array
            of TNAFs.
        </member>
        <member name="F:Trackerbird.Cryptography.Tnaf.Alpha1">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=1</code> as an array
            of <code>ZTauElement</code>s.
        </member>
        <member name="F:Trackerbird.Cryptography.Tnaf.Alpha1Tnaf">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=1</code> as an array
            of TNAFs.
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.Norm(System.SByte,Trackerbird.Cryptography.ZTauElement)">
            Computes the norm of an element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return The norm of <code>&#955;</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.Norm(System.SByte,Trackerbird.Cryptography.SimpleBigDecimal,Trackerbird.Cryptography.SimpleBigDecimal)">
            Computes the norm of an element <code>&#955;</code> of
            <code><b>R</b>[&#964;]</code>, where <code>&#955; = u + v&#964;</code>
            and <code>u</code> and <code>u</code> are real numbers (elements of
            <code><b>R</b></code>). 
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param u The real part of the element <code>&#955;</code> of
            <code><b>R</b>[&#964;]</code>.
            @param v The <code>&#964;</code>-adic part of the element
            <code>&#955;</code> of <code><b>R</b>[&#964;]</code>.
            @return The norm of <code>&#955;</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.Round(Trackerbird.Cryptography.SimpleBigDecimal,Trackerbird.Cryptography.SimpleBigDecimal,System.SByte)">
            Rounds an element <code>&#955;</code> of <code><b>R</b>[&#964;]</code>
            to an element of <code><b>Z</b>[&#964;]</code>, such that their difference
            has minimal norm. <code>&#955;</code> is given as
            <code>&#955; = &#955;<sub>0</sub> + &#955;<sub>1</sub>&#964;</code>.
            @param lambda0 The component <code>&#955;<sub>0</sub></code>.
            @param lambda1 The component <code>&#955;<sub>1</sub></code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve. Must
            equal 1 or -1.
            @return The rounded element of <code><b>Z</b>[&#964;]</code>.
            @throws ArgumentException if <code>lambda0</code> and
            <code>lambda1</code> do not have same scale.
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.ApproximateDivisionByN(Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger,System.SByte,System.Int32,System.Int32)">
            Approximate division by <code>n</code>. For an integer
            <code>k</code>, the value <code>&#955; = s k / n</code> is
            computed to <code>c</code> bits of accuracy.
            @param k The parameter <code>k</code>.
            @param s The curve parameter <code>s<sub>0</sub></code> or
            <code>s<sub>1</sub></code>.
            @param vm The Lucas Sequence element <code>V<sub>m</sub></code>.
            @param a The parameter <code>a</code> of the elliptic curve.
            @param m The bit length of the finite field
            <code><b>F</b><sub>m</sub></code>.
            @param c The number of bits of accuracy, i.e. the scale of the returned
            <code>SimpleBigDecimal</code>.
            @return The value <code>&#955; = s k / n</code> computed to
            <code>c</code> bits of accuracy.
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.TauAdicNaf(System.SByte,Trackerbird.Cryptography.ZTauElement)">
            Computes the <code>&#964;</code>-adic NAF (non-adjacent form) of an
            element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return The <code>&#964;</code>-adic NAF of <code>&#955;</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.Tau(Trackerbird.Cryptography.F2mPoint)">
            Applies the operation <code>&#964;()</code> to an
            <code>F2mPoint</code>. 
            @param p The F2mPoint to which <code>&#964;()</code> is applied.
            @return <code>&#964;(p)</code>
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.GetMu(Trackerbird.Cryptography.F2mCurve)">
            Returns the parameter <code>&#956;</code> of the elliptic curve.
            @param curve The elliptic curve from which to obtain <code>&#956;</code>.
            The curve must be a Koblitz curve, i.e. <code>a</code> Equals
            <code>0</code> or <code>1</code> and <code>b</code> Equals
            <code>1</code>. 
            @return <code>&#956;</code> of the elliptic curve.
            @throws ArgumentException if the given ECCurve is not a Koblitz
            curve.
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.GetLucas(System.SByte,System.Int32,System.Boolean)">
            Calculates the Lucas Sequence elements <code>U<sub>k-1</sub></code> and
            <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code> and
            <code>V<sub>k</sub></code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param k The index of the second element of the Lucas Sequence to be
            returned.
            @param doV If set to true, computes <code>V<sub>k-1</sub></code> and
            <code>V<sub>k</sub></code>, otherwise <code>U<sub>k-1</sub></code> and
            <code>U<sub>k</sub></code>.
            @return An array with 2 elements, containing <code>U<sub>k-1</sub></code>
            and <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code>
            and <code>V<sub>k</sub></code>.
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.GetTw(System.SByte,System.Int32)">
            Computes the auxiliary value <code>t<sub>w</sub></code>. If the width is
            4, then for <code>mu = 1</code>, <code>t<sub>w</sub> = 6</code> and for
            <code>mu = -1</code>, <code>t<sub>w</sub> = 10</code> 
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param w The window width of the WTNAF.
            @return the auxiliary value <code>t<sub>w</sub></code>
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.GetSi(Trackerbird.Cryptography.F2mCurve)">
            Computes the auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction. 
            @param curve The elliptic curve for which to compute
            <code>s<sub>0</sub></code> and <code>s<sub>1</sub></code>.
            @throws ArgumentException if <code>curve</code> is not a
            Koblitz curve (Anomalous Binary Curve, ABC).
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.PartModReduction(Trackerbird.Cryptography.BigInteger,System.Int32,System.SByte,Trackerbird.Cryptography.BigInteger[],System.SByte,System.SByte)">
            Partial modular reduction modulo
            <code>(&#964;<sup>m</sup> - 1)/(&#964; - 1)</code>.
            @param k The integer to be reduced.
            @param m The bitlength of the underlying finite field.
            @param a The parameter <code>a</code> of the elliptic curve.
            @param s The auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code>.
            @param mu The parameter &#956; of the elliptic curve.
            @param c The precision (number of bits of accuracy) of the partial
            modular reduction.
            @return <code>&#961; := k partmod (&#964;<sup>m</sup> - 1)/(&#964; - 1)</code>
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.MultiplyRTnaf(Trackerbird.Cryptography.F2mPoint,Trackerbird.Cryptography.BigInteger)">
            Multiplies a {@link org.bouncycastle.math.ec.F2mPoint F2mPoint}
            by a <code>BigInteger</code> using the reduced <code>&#964;</code>-adic
            NAF (RTNAF) method.
            @param p The F2mPoint to Multiply.
            @param k The <code>BigInteger</code> by which to Multiply <code>p</code>.
            @return <code>k * p</code>
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.MultiplyTnaf(Trackerbird.Cryptography.F2mPoint,Trackerbird.Cryptography.ZTauElement)">
            Multiplies a {@link org.bouncycastle.math.ec.F2mPoint F2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the <code>&#964;</code>-adic NAF (TNAF) method.
            @param p The F2mPoint to Multiply.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return <code>&#955; * p</code>
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.MultiplyFromTnaf(Trackerbird.Cryptography.F2mPoint,System.SByte[])">
            Multiplies a {@link org.bouncycastle.math.ec.F2mPoint F2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the <code>&#964;</code>-adic NAF (TNAF) method, given the TNAF
            of <code>&#955;</code>.
            @param p The F2mPoint to Multiply.
            @param u The the TNAF of <code>&#955;</code>..
            @return <code>&#955; * p</code>
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.TauAdicWNaf(System.SByte,Trackerbird.Cryptography.ZTauElement,System.SByte,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.ZTauElement[])">
            Computes the <code>[&#964;]</code>-adic window NAF of an element
            <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter &#956; of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code> of which to compute the
            <code>[&#964;]</code>-adic NAF.
            @param width The window width of the resulting WNAF.
            @param pow2w 2<sup>width</sup>.
            @param tw The auxiliary value <code>t<sub>w</sub></code>.
            @param alpha The <code>&#945;<sub>u</sub></code>'s for the window width.
            @return The <code>[&#964;]</code>-adic window NAF of
            <code>&#955;</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.Tnaf.GetPreComp(Trackerbird.Cryptography.F2mPoint,System.SByte)">
            Does the precomputation for WTNAF multiplication.
            @param p The <code>ECPoint</code> for which to do the precomputation.
            @param a The parameter <code>a</code> of the elliptic curve.
            @return The precomputation array for <code>p</code>. 
        </member>
        <member name="F:Trackerbird.Cryptography.ZTauElement.u">
            The &quot;real&quot; part of <code>&#955;</code>.
        </member>
        <member name="F:Trackerbird.Cryptography.ZTauElement.v">
            The &quot;<code>&#964;</code>-adic&quot; part of <code>&#955;</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.ZTauElement.#ctor(Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.BigInteger)">
            Constructor for an element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @param u The &quot;real&quot; part of <code>&#955;</code>.
            @param v The &quot;<code>&#964;</code>-adic&quot; part of
            <code>&#955;</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.SimpleBigDecimal.GetInstance(Trackerbird.Cryptography.BigInteger,System.Int32)">
            Returns a <code>SimpleBigDecimal</code> representing the same numerical
            value as <code>value</code>.
            @param value The value of the <code>SimpleBigDecimal</code> to be
            created. 
            @param scale The scale of the <code>SimpleBigDecimal</code> to be
            created. 
            @return The such created <code>SimpleBigDecimal</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.SimpleBigDecimal.#ctor(Trackerbird.Cryptography.BigInteger,System.Int32)">
            Constructor for <code>SimpleBigDecimal</code>. The value of the
            constructed <code>SimpleBigDecimal</code> Equals <code>bigInt / 
            2<sup>scale</sup></code>.
            @param bigInt The <code>bigInt</code> value parameter.
            @param scale The scale of the constructed <code>SimpleBigDecimal</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.ECMultiplier.Multiply(Trackerbird.Cryptography.ECPoint,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.PreCompInfo)">
            Multiplies the <code>ECPoint p</code> by <code>k</code>, i.e.
            <code>p</code> is added <code>k</code> times to itself.
            @param p The <code>ECPoint</code> to be multiplied.
            @param k The factor by which <code>p</code> i multiplied.
            @return <code>p</code> multiplied by <code>k</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.WNafMultiplier.WindowNaf(System.SByte,Trackerbird.Cryptography.BigInteger)">
            Computes the Window NAF (non-adjacent Form) of an integer.
            @param width The width <code>w</code> of the Window NAF. The width is
            defined as the minimal number <code>w</code>, such that for any
            <code>w</code> consecutive digits in the resulting representation, at
            most one is non-zero.
            @param k The integer of which the Window NAF is computed.
            @return The Window NAF of the given width, such that the following holds:
            <code>k = &#8722;<sub>i=0</sub><sup>l-1</sup> k<sub>i</sub>2<sup>i</sup>
            </code>, where the <code>k<sub>i</sub></code> denote the elements of the
            returned <code>sbyte[]</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.WNafMultiplier.Multiply(Trackerbird.Cryptography.ECPoint,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.PreCompInfo)">
            Multiplies <code>this</code> by an integer <code>k</code> using the
            Window NAF method.
            @param k The integer by which <code>this</code> is multiplied.
            @return A new <code>ECPoint</code> which equals <code>this</code>
            multiplied by <code>k</code>.
        </member>
        <member name="F:Trackerbird.Cryptography.WNafPreCompInfo.preComp">
            Array holding the precomputed <code>ECPoint</code>s used for the Window
            NAF multiplication in <code>
            {@link org.bouncycastle.math.ec.multiplier.WNafMultiplier.multiply()
            WNafMultiplier.multiply()}</code>.
        </member>
        <member name="F:Trackerbird.Cryptography.WNafPreCompInfo.twiceP">
            Holds an <code>ECPoint</code> representing twice(this). Used for the
            Window NAF multiplication in <code>
            {@link org.bouncycastle.math.ec.multiplier.WNafMultiplier.multiply()
            WNafMultiplier.multiply()}</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.WTauNafMultiplier.Multiply(Trackerbird.Cryptography.ECPoint,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.PreCompInfo)">
            Multiplies a {@link org.bouncycastle.math.ec.F2mPoint F2mPoint}
            by <code>k</code> using the reduced <code>&#964;</code>-adic NAF (RTNAF)
            method.
            @param p The F2mPoint to multiply.
            @param k The integer by which to multiply <code>k</code>.
            @return <code>p</code> multiplied by <code>k</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.WTauNafMultiplier.MultiplyWTnaf(Trackerbird.Cryptography.F2mPoint,Trackerbird.Cryptography.ZTauElement,Trackerbird.Cryptography.PreCompInfo,System.SByte,System.SByte)">
            Multiplies a {@link org.bouncycastle.math.ec.F2mPoint F2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code> using
            the <code>&#964;</code>-adic NAF (TNAF) method.
            @param p The F2mPoint to multiply.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code> of which to compute the
            <code>[&#964;]</code>-adic NAF.
            @return <code>p</code> multiplied by <code>&#955;</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.WTauNafMultiplier.MultiplyFromWTnaf(Trackerbird.Cryptography.F2mPoint,System.SByte[],Trackerbird.Cryptography.PreCompInfo)">
            Multiplies a {@link org.bouncycastle.math.ec.F2mPoint F2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the window <code>&#964;</code>-adic NAF (TNAF) method, given the
            WTNAF of <code>&#955;</code>.
            @param p The F2mPoint to multiply.
            @param u The the WTNAF of <code>&#955;</code>..
            @return <code>&#955; * p</code>
        </member>
        <member name="F:Trackerbird.Cryptography.WTauNafPreCompInfo.preComp">
            Array holding the precomputed <code>F2mPoint</code>s used for the
            WTNAF multiplication in <code>
            {@link org.bouncycastle.math.ec.multiplier.WTauNafMultiplier.multiply()
            WTauNafMultiplier.multiply()}</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.WTauNafPreCompInfo.#ctor(Trackerbird.Cryptography.F2mPoint[])">
            Constructor for <code>WTauNafPreCompInfo</code>
            @param preComp Array holding the precomputed <code>F2mPoint</code>s
            used for the WTNAF multiplication in <code>
            {@link org.bouncycastle.math.ec.multiplier.WTauNafMultiplier.multiply()
            WTauNafMultiplier.multiply()}</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.WTauNafPreCompInfo.GetPreComp">
            @return the array holding the precomputed <code>F2mPoint</code>s
            used for the WTNAF multiplication in <code>
            {@link org.bouncycastle.math.ec.multiplier.WTauNafMultiplier.multiply()
            WTauNafMultiplier.multiply()}</code>.
        </member>
        <member name="M:Trackerbird.Cryptography.FpNafMultiplier.Multiply(Trackerbird.Cryptography.ECPoint,Trackerbird.Cryptography.BigInteger,Trackerbird.Cryptography.PreCompInfo)">
            D.3.2 pg 101
            @see org.bouncycastle.math.ec.multiplier.ECMultiplier#multiply(org.bouncycastle.math.ec.ECPoint, java.math.BigInteger)
        </member>
        <member name="F:Trackerbird.Tracker.ReachOutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Trackerbird.Tracker.ReachOutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Trackerbird.Tracker.ReachOutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Trackerbird.Tracker.UnmanagedTBConfig">
            <summary>
            Should only be used by Unmanaged Code
            </summary>
        </member>
        <member name="T:Trackerbird.Tracker.Config.ConfigurationObj">
            <summary>
            Serializable object to store configurtion data.
            </summary>
        </member>
        <member name="P:Trackerbird.Tracker.Machine.Is64BitProcess">
            <summary>
            Gets <b>true</b> if this process is running in a 64 bit
            environment, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:Trackerbird.Tracker.Machine.Is64BitWindows">
            <summary>
            Gets <b>true</b> if this is a 64 bit Windows.
            </summary>
        </member>
        <member name="P:Trackerbird.Tracker.Machine.IsWow64Process">
            <summary>
            Returns <b>true</b> if this is a 32-bit process 
            running on a 64-bit server.
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.Machine.PROCESSOR_CACHE_TYPE.UnifiedCache">
            <summary>
            The cache is unified.
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.Machine.PROCESSOR_CACHE_TYPE.InstructionCache">
            <summary>
            InstructionThe cache is for processor instructions.
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.Machine.PROCESSOR_CACHE_TYPE.DataCache">
            <summary>
            The cache is for data.
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.Machine.PROCESSOR_CACHE_TYPE.TraceCache">
            <summary>
            TraceThe cache is for traces.
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.Machine.RelationProcessorCore.RelationProcessorCore">
            <summary>
            The specified logical processors share a 
            single processor core.    
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.Machine.RelationProcessorCore.RelationNumaNode">
            <summary>
            The specified logical processors are part 
            of the same NUMA node.
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.Machine.RelationProcessorCore.RelationCache">
            <summary>
            The specified logical processors  share a cache. 
            Windows Server 2003:  This value is not supported 
            until Windows Server 2003 SP1 and Windows XP 
            Professional x64 Edition.
            </summary>
        </member>
        <member name="F:Trackerbird.Tracker.Machine.RelationProcessorCore.RelationProcessorPackage">
            <summary>
            The specified logical processors share a physical 
            package (a single package socketed or soldered 
            onto a motherboard may contain multiple processor 
            cores or threads, each of which is treated as a 
            separate processor by the operating system). 
            Windows Server 2003:  This value is not 
            supported until Windows Vista.
            </summary>
        </member>
    </members>
</doc>
