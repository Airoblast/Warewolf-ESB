// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Dev2.CodedUI.Tests.UIMaps.ToolboxUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class ToolboxUIMap
    {
        
        /// <summary>
        /// ClickDecision
        /// </summary>
        public UITestControl FindControl(string itemAutomationID)
        {
            // Much faster! \o/
            UITestControl dockManager = this.UIBusinessDesignStudioWindow.UIDockManagerCustom;
            dockManager.Find();
            WpfCustom uIToolboxCustom = new WpfCustom(dockManager);
            uIToolboxCustom.SearchProperties["ControlType"] = "TabPage";
            uIToolboxCustom.SearchProperties["Name"] = "Toolbox";

            //uIToolboxCustom.SearchProperties["Name"] = itemAutomationID;
            uIToolboxCustom.Find();
            UITestControlCollection childCollection = uIToolboxCustom.GetChildren();

            UITestControlCollection uiTestControlCollection = childCollection[0].GetChildren();

            UITestControlCollection uiTestControlCollection1 = uiTestControlCollection[6].GetChildren();

            UITestControlCollection testControlCollection = uiTestControlCollection1[1].GetChildren();

            foreach (UITestControl subItem in testControlCollection)
            {
                string friendlyName = subItem.FriendlyName;
                if (subItem.GetChildren().Count > 0)
                {
                    UITestControlCollection subChildCollection = subItem.GetChildren();
                    foreach (UITestControl subSubItem in subChildCollection)
                    {
                        string autoID = subSubItem.GetProperty("AutomationID").ToString();
                        if (autoID.Contains(itemAutomationID))
                        {
                            return subSubItem;
                        }
                    }
                }
            }
            return null;
        }
        
        #region Properties
        public UIBusinessDesignStudioWindow UIBusinessDesignStudioWindow
        {
            get
            {
                if ((this.mUIBusinessDesignStudioWindow == null))
                {
                    this.mUIBusinessDesignStudioWindow = new UIBusinessDesignStudioWindow();
                }
                return this.mUIBusinessDesignStudioWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBusinessDesignStudioWindow mUIBusinessDesignStudioWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIBusinessDesignStudioWindow : WpfWindow
    {
        
        public UIBusinessDesignStudioWindow()
        {
            #region Search Criteria

            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }

        public UITestControl UIDockManagerCustom
        {
            get
            {
                if ((this.mUIDockManagerCustom == null))
                {
                    this.mUIDockManagerCustom = new UITestControl(this);
                    this.mUIDockManagerCustom.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.XamDockManager";
                    this.mUIDockManagerCustom.SearchProperties["AutomationId"] = "UI_DocManager_AutoID";
                    this.mUIDockManagerCustom.WindowTitles.Add("Warewolf");
                    this.mUIDockManagerCustom.Find();
                }
                return this.mUIDockManagerCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        private UITestControl mUIDockManagerCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.ToolboxUserControl";
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public UIPART_ToolsTree UIPART_ToolsTree
        {
            get
            {
                if ((this.mUIPART_ToolsTree == null))
                {
                    this.mUIPART_ToolsTree = new UIPART_ToolsTree(this);
                }
                return this.mUIPART_ToolsTree;
            }
        }
        #endregion
        
        #region Fields
        private UIPART_ToolsTree mUIPART_ToolsTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIPART_ToolsTree : WpfTree
    {
        
        public UIPART_ToolsTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "PART_Tools";
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public UIControlFlowTreeItem UIControlFlowTreeItem
        {
            get
            {
                if ((this.mUIControlFlowTreeItem == null))
                {
                    this.mUIControlFlowTreeItem = new UIControlFlowTreeItem(this);
                }
                return this.mUIControlFlowTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIControlFlowTreeItem mUIControlFlowTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIControlFlowTreeItem : WpfTreeItem
    {
        
        public UIControlFlowTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Control Flow";
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public UIUnlimitedApplicationTreeItem UIUnlimitedApplicationTreeItem
        {
            get
            {
                if ((this.mUIUnlimitedApplicationTreeItem == null))
                {
                    this.mUIUnlimitedApplicationTreeItem = new UIUnlimitedApplicationTreeItem(this);
                }
                return this.mUIUnlimitedApplicationTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUnlimitedApplicationTreeItem mUIUnlimitedApplicationTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIUnlimitedApplicationTreeItem : WpfTreeItem
    {
        
        public UIUnlimitedApplicationTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
            string theID = this.AutomationId;
        }
        
        #region Properties
        public UIDecisionText UIDecisionText
        {
            get
            {
                if ((this.mUIDecisionText == null))
                {
                    this.mUIDecisionText = new UIDecisionText(this);
                }
                return this.mUIDecisionText;
            }
        }
        #endregion
        
        #region Fields
        private UIDecisionText mUIDecisionText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIDecisionText : WpfText
    {
        
        public UIDecisionText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            //this.SearchProperties[WpfText.PropertyNames.Name] = "Decision";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add(TestBase.GetStudioWindowName());
            #endregion
        }
        
        #region Properties
        public WpfText UIDecisionText1(string itemName)
        {
            //get
            {
                //if ((this.mUIDecisionText1 == null))
                {
                    this.mUIDecisionText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIDecisionText1.SearchProperties[WpfText.PropertyNames.Name] = itemName;
                    this.mUIDecisionText1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDecisionText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIDecisionText1.WindowTitles.Add(TestBase.GetStudioWindowName());
                    #endregion
                }
                return this.mUIDecisionText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIDecisionText1;
        #endregion
    }
}
