<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CalculateFunctionInputText" xml:space="preserve">
    <value>The Calculate Service works like the function box in Microsoft Excel (fn). Type the equation using good maths practices and put a variable from the Data List into the Result field. You can use the full Excel library of functions eg. AVG([[Employee().Age]])</value>
  </data>
  <data name="CalculateFunctionResultText" xml:space="preserve">
    <value>The variable you would like to contain the result once the calculation has completed.</value>
  </data>
  <data name="CommentInputText" xml:space="preserve">
    <value>The comment entered here will not effect the workflow. This text will be visible in the debug output if this comment is included as a step in the workflow.</value>
  </data>
  <data name="CountRecordsetFromRecordsetHelpText" xml:space="preserve">
    <value>Simply enter the name of the recordset that you want to count in. eg
[[MyRecordset()]]</value>
  </data>
  <data name="CountRecordsResultHelpText" xml:space="preserve">
    <value>Only variables in [[Scalar]] or [[Recordset(*).Field]] format. If you use a recordset and do not specify an index/row number, a new record will be added.</value>
  </data>
  <data name="DateTimeAddTimeHelpText" xml:space="preserve">
    <value>Put a positive or negative number here to add or subtract from the input date time.
Leave this field blank if you do not want to change the date time.</value>
  </data>
  <data name="DateTimeInputFormatHelpText" xml:space="preserve">
    <value>Describe the format of the date time you are entering. e.g. 23-July 1978 would be described as dd-MM yyyy.
Leaving this field blank will assume the system date time format.</value>
  </data>
  <data name="DateTimeInputHelpText" xml:space="preserve">
    <value>Any variable and/or data goes in here.
To format a date time, or to add/subtract from a date time, put it in here.
Leaving this field blank will give you the system date time.</value>
  </data>
  <data name="DateTimeOutputFormatHelpText" xml:space="preserve">
    <value>Describe the format you would like the date time to be returned in.
Leaving this field blank will assume the same as the Input Format.</value>
  </data>
  <data name="DateTimeResultHelpText" xml:space="preserve">
    <value>Only variables go in here.
Returns the formatted  and/or added/subtracted date time.
You can use [[Scalar]] as well as [[Recordset().Fields]].
Using recordset () will add a new record and (*) will assign every record.</value>
  </data>
  <data name="FindRecordsFieldsToSearchHelpText" xml:space="preserve">
    <value>To find the indexes/rows that match certain criteria, put the comma separated list of fields to search in here. e.g. [[Customer().Name]], [[Customer().Prename]], [[Customer().Surname]]</value>
  </data>
  <data name="FindRecordsSearchTypeHelpText" xml:space="preserve">
    <value>Select the type of information you want to match on.</value>
  </data>
  <data name="ForEachRangeHelpText" xml:space="preserve">
    <value>This will replace the * in the activity with every number in the range provided and execute it once for each of those numbers. eg. Range of 1-5, will execute [[Customers(*).ID]] as
[[Customers(1).ID]]
[[Customers(2).ID]]
[[Customers(3).ID]]
[[Customers(4).ID]]
[[Customers(5).ID]]</value>
  </data>
  <data name="ForEachCsvHelpText" xml:space="preserve">
    <value>This will replace the * in the activity with every number in the comma seperated list provided and execute it once for each of those numbers. eg. CSV of 1,3,4,5,9 will execute [[Customers(*).ID]] as
[[Customers(1).ID]]
[[Customers(3).ID]]
[[Customers(4).ID]]
[[Customers(5).ID]]
[[Customers(9).ID]]</value>
  </data>
  <data name="ForEachNumberHelpText" xml:space="preserve">
    <value>This will execute the activity a given number of times.</value>
  </data>
  <data name="ForEachRecordHelpText" xml:space="preserve">
    <value>This will replace the * in the activity with every index number in the Recordset provided. If the Recordset provided has 3 records, then there will be 3 executions eg [[Customers(*).ID]] as
[[Customers(1).ID]]
[[Customers(2).ID]]
[[Customers(3).ID]]</value>
  </data>
  <data name="ForEachTypeHelpText" xml:space="preserve">
    <value>Types of loop.</value>
  </data>
  <data name="FindRecordsMatchHelpText" xml:space="preserve">
    <value>Select the match data to find.</value>
  </data>
  <data name="FindRecordsResultHelpText" xml:space="preserve">
    <value>Only variables go in here.
Returns the indexes of the successful matches.
You can use [[Scalar]] as well as [[Recordset().Fields]].
Using recordset () will add a new record and (*) will assign every record.
If there are multiple results and a scalar is used, then each result will be separated with a comma.</value>
  </data>
  <data name="MultiAssignNewValueHelpText" xml:space="preserve">
    <value>Any variable and/or data goes in here.
To assign a value to a variable, put the value in here.
If you put an = as the first character, it will turn into a calculation e.g. =[[qty]]*[[price]]</value>
  </data>
  <data name="MultiAssignVariableHelpText" xml:space="preserve">
    <value>Only variables go in here.
To assign a value to a variable, put the variable here.
You can use [[Scalar]] as well as [[Recordset().Fields]].
Using recordset () will add a new record and (*) will assign every record.</value>
  </data>
  <data name="DataSplitDirectionHelpText" xml:space="preserve">
    <value>You can reverse the direction that the string is split by selecting Backward. By Default, the processing direction is Forward.</value>
  </data>
  <data name="DataSplitIncludeHelpText" xml:space="preserve">
    <value>If you want to include the item you  are splitting on in the result, make sure the checkbox is selected. The defaults for these are to not include unless its an index.</value>
  </data>
  <data name="DataSplitResultHelpText" xml:space="preserve">
    <value>At least one result must be present. You can use [[Scalar]] or [[Recordset().Fields]] notation.
If you use a recordset the split pattern will be repeated untill the end of the file, putting each row into a new record. If you dont want a piece of the data being split, leave that result blank.</value>
  </data>
  <data name="DataSplitSplitAtHelpText" xml:space="preserve">
    <value>Select the criteria for the split. This will be the pattern used to repeat against the String input untill no more splits can occur or, you use END.
Char will split on the characters you specify, like comma or | &lt;/.
Index will split on the numeric index from the previouse split.
New Line will split on carriage return.
Space will split on blank space. (You can use this to trim data)
Tab splits on a tab character.
End splits at the end of the string.</value>
  </data>
  <data name="DataSplitStringToSplitHelpText" xml:space="preserve">
    <value>Required field. Use any variable or data or combination of the two that you want to split. For file processing consider splitting first into headers, body and footers, then resplitting each of those independantly.</value>
  </data>
  <data name="BaseConvertResultHelpText" xml:space="preserve">
    <value>The variable where the result will be output to.</value>
  </data>
  <data name="BaseConvertInputHelpText" xml:space="preserve">
    <value>This data must be in the format specified in the 'Convert From' category. This data will be converted to the format specified in the 'Convert To' column.</value>
  </data>
  <data name="QuickVariableAppendHelpText" xml:space="preserve">
    <value>Append will add the variables onto the list of variables already in the input grid. The values of the last row will be repeated for all of these additional values.</value>
  </data>
  <data name="QuickVariablePrefixWithHelpText" xml:space="preserve">
    <value>To append something onto the front of the variables in your list, type it in here.
For recordsets, type  recordsetname(). Dont forget the "." after the "()"
You do not need to put the "[[" in.</value>
  </data>
  <data name="QuickVariableSplitAndAtHelpText" xml:space="preserve">
    <value>Select the criteria to split the variables in the list. This will be the pattern used to repeat against the Variable List box.
Char will split on the characters you specify, like comma or | &lt;/.
Index will split on the numeric index from the previouse split.
New Line will split on carriage return.
Space will split on blank space.
Tab splits on a tab character.</value>
  </data>
  <data name="QuickVariableSplitListOnHelpText" xml:space="preserve">
    <value>Simply enter the name of the recordset that you want to count in. eg
[[MyRecordset()]]</value>
  </data>
  <data name="QuickVariableSuffixWithHelpText" xml:space="preserve">
    <value>To append something onto the end of the variables in your list, type it in here.
You do not need to put the "]]" in.</value>
  </data>
  <data name="QuickVariableVariableListHelpText" xml:space="preserve">
    <value>Type or paste all the variables you want to use in here. You can paste in any format. If you are adding variables into a grid with a drop down or other input, the values from the last row will be repeated, so set them before adding these variables.</value>
  </data>
  <data name="QuickVariableReplaceHelpText" xml:space="preserve">
    <value>Replace will replace the current list of variables with this list. The values of the first row will be repeated for all of these new values.</value>
  </data>
  <data name="PreviewInputHelpText" xml:space="preserve">
    <value>Preview (recordset field)
This is a variable from an input field. Use comma-separated values for each index eg [[Trip(*).Distance]] = 45, 32, 12, 5
 
Preview (scalar field - including indexed recordsets and ())
This is a variable from an input field. Put some test info in and click the Preview button to test your result.</value>
  </data>
  <data name="WebRequestHeaderHelpText" xml:space="preserve">
    <value>To supply additional header information in your get request, put the header info in here.</value>
  </data>
  <data name="WebRequestResultHelpText" xml:space="preserve">
    <value>Only a single variable goes in here.
Returnes the response text of the web get request.</value>
  </data>
  <data name="WebRequestURIHelpText" xml:space="preserve">
    <value>Any data or variable can go in here.
To traverse an retrieve the raw response from a webpage, enter it in here.</value>
  </data>
  <data name="DateTimeAddTimeTypeHelpText" xml:space="preserve">
    <value>Select the unit of time to add or subtract. This is ignored if the unit is blank or 0.</value>
  </data>
</root>