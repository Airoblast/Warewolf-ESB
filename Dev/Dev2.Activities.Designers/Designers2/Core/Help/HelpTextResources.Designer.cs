//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dev2.Activities.Designers2.Core.Help {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class HelpTextResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HelpTextResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Dev2.Activities.Designers2.Core.Help.HelpTextResources", typeof(HelpTextResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and data goes in here.
        ///To convert Text, Hex, Binary and Base64, put the data to be converted in here..
        /// </summary>
        public static string BaseConversionHelpBaseInput {
            get {
                return ResourceManager.GetString("BaseConversionHelpBaseInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of data you are converting from.
        ///e.g. If the data is Binary and you would like Text, then select Binary here..
        /// </summary>
        public static string BaseConversionHelpFromType {
            get {
                return ResourceManager.GetString("BaseConversionHelpFromType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns the converted data into a separate variable.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string BaseConversionHelpResult {
            get {
                return ResourceManager.GetString("BaseConversionHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of data you are converting to.
        ///e.g. If the data is Binary and you would like Text, then select Text here..
        /// </summary>
        public static string BaseConversionHelpToType {
            get {
                return ResourceManager.GetString("BaseConversionHelpToType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string BaseConversionToolTipBaseInput {
            get {
                return ResourceManager.GetString("BaseConversionToolTipBaseInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string BaseConversionToolTipResult {
            get {
                return ResourceManager.GetString("BaseConversionToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This data must be in the format specified in the &apos;Convert From&apos; category. This data will be converted to the format specified in the &apos;Convert To&apos; column..
        /// </summary>
        public static string BaseConvertInputHelpText {
            get {
                return ResourceManager.GetString("BaseConvertInputHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable where the result will be output to..
        /// </summary>
        public static string BaseConvertResultHelpText {
            get {
                return ResourceManager.GetString("BaseConvertResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Calculate Service works like the function box in Microsoft Excel (fn). Type the equation using good maths practices and put a variable from the Data List into the Result field. You can use the full Excel library of functions eg. AVG([[Employee().Age]]).
        /// </summary>
        public static string CalculateFunctionInputText {
            get {
                return ResourceManager.GetString("CalculateFunctionInputText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable you would like to contain the result once the calculation has completed..
        /// </summary>
        public static string CalculateFunctionResultText {
            get {
                return ResourceManager.GetString("CalculateFunctionResultText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///To perform a calculation, put the calculation in here in BODMAS format.
        ///There are many supporting functions like average() and sum() that can be used with recordsets e.g. Sum([[staff(*).salaries]]) will sum all the salaries fields of the staff recordset..
        /// </summary>
        public static string CalculateHelpFx {
            get {
                return ResourceManager.GetString("CalculateHelpFx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns the formatted number.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string CalculateHelpResult {
            get {
                return ResourceManager.GetString("CalculateHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CalculateToolTipFx {
            get {
                return ResourceManager.GetString("CalculateToolTipFx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CalculateToolTipResult {
            get {
                return ResourceManager.GetString("CalculateToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of conversion you would like to make..
        /// </summary>
        public static string CaseConversionHelpConvertToCaseType {
            get {
                return ResourceManager.GetString("CaseConversionHelpConvertToCaseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns the converted data.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string CaseConversionHelpResult {
            get {
                return ResourceManager.GetString("CaseConversionHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///To convert the case of some text, put the variable containing the text here..
        /// </summary>
        public static string CaseConversionHelpTextInput {
            get {
                return ResourceManager.GetString("CaseConversionHelpTextInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CaseConversionToolTipResult {
            get {
                return ResourceManager.GetString("CaseConversionToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CaseConversionToolTipTextInput {
            get {
                return ResourceManager.GetString("CaseConversionToolTipTextInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The comment entered here will not effect the workflow. This text will be visible in the debug output if this comment is included as a step in the workflow..
        /// </summary>
        public static string CommentInputText {
            get {
                return ResourceManager.GetString("CommentInputText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///Put the full path of the destination you are copying to here.
        ///You can use File System, URI, FTP or FTPS format..
        /// </summary>
        public static string CopyHelpDestination {
            get {
                return ResourceManager.GetString("CopyHelpDestination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///To copy a file or folder, put the full path and file or folder name here.
        ///You can use File System, URI, FTP or FTPS format..
        /// </summary>
        public static string CopyHelpFileFolder {
            get {
                return ResourceManager.GetString("CopyHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used..
        /// </summary>
        public static string CopyHelpPassword {
            get {
                return ResourceManager.GetString("CopyHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns Success or will be blank depending on the success of the Copy action.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string CopyHelpResult {
            get {
                return ResourceManager.GetString("CopyHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used..
        /// </summary>
        public static string CopyHelpUsername {
            get {
                return ResourceManager.GetString("CopyHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file or folder already exists, you can force a new one to overwrite the old one..
        /// </summary>
        public static string CopyToolHelpForceOverwrite {
            get {
                return ResourceManager.GetString("CopyToolHelpForceOverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CopyToolTipDestination {
            get {
                return ResourceManager.GetString("CopyToolTipDestination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CopyToolTipFileFolder {
            get {
                return ResourceManager.GetString("CopyToolTipFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If it exists already, force an overwrite.
        /// </summary>
        public static string CopyToolTipForceOverwrite {
            get {
                return ResourceManager.GetString("CopyToolTipForceOverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CopyToolTipPassword {
            get {
                return ResourceManager.GetString("CopyToolTipPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CopyToolTipResult {
            get {
                return ResourceManager.GetString("CopyToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CopyToolTipUsername {
            get {
                return ResourceManager.GetString("CopyToolTipUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Simply enter the name of the recordset that you want to count in. eg
        ///[[MyRecordset()]].
        /// </summary>
        public static string CountRecordsetFromRecordsetHelpText {
            get {
                return ResourceManager.GetString("CountRecordsetFromRecordsetHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To Count the number of records/indexes in a recordset, put the recordset name in here. E.g. [[Customer()]].
        /// </summary>
        public static string CountRecordsHelpRecordset {
            get {
                return ResourceManager.GetString("CountRecordsHelpRecordset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here. Returns a number specifying how many records/indexes are in the recordset.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string CountRecordsHelpResult {
            get {
                return ResourceManager.GetString("CountRecordsHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables in [[Scalar]] or [[Recordset(*).Field]] format. If you use a recordset and do not specify an index/row number, a new record will be added..
        /// </summary>
        public static string CountRecordsResultHelpText {
            get {
                return ResourceManager.GetString("CountRecordsResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Recordset()]].
        /// </summary>
        public static string CountRecordsToolTipRecordset {
            get {
                return ResourceManager.GetString("CountRecordsToolTipRecordset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CountRecordsToolTipResult {
            get {
                return ResourceManager.GetString("CountRecordsToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///To create a file or folder, put the full path and file or folder name here.
        ///You can use File System, URI, FTP or FTPS format..
        /// </summary>
        public static string CreateHelpFileFolder {
            get {
                return ResourceManager.GetString("CreateHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file or folder already exists, you can force a new one to overwrite the old one..
        /// </summary>
        public static string CreateHelpForceOverWrite {
            get {
                return ResourceManager.GetString("CreateHelpForceOverWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used..
        /// </summary>
        public static string CreateHelpPassword {
            get {
                return ResourceManager.GetString("CreateHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns Success or will be blank depending on the success of the Create action.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string CreateHelpResult {
            get {
                return ResourceManager.GetString("CreateHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used..
        /// </summary>
        public static string CreateHelpUsername {
            get {
                return ResourceManager.GetString("CreateHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CreateToolTipFileFolder {
            get {
                return ResourceManager.GetString("CreateToolTipFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If it exists already, force an overwrite.
        /// </summary>
        public static string CreateToolTipForceOverWrite {
            get {
                return ResourceManager.GetString("CreateToolTipForceOverWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CreateToolTipPassword {
            get {
                return ResourceManager.GetString("CreateToolTipPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CreateToolTipResult {
            get {
                return ResourceManager.GetString("CreateToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string CreateToolTipUsername {
            get {
                return ResourceManager.GetString("CreateToolTipUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For Index you can specify if your data is aligned to the right or left.
        ///E.g. Text is normally left and numbers normally right..
        /// </summary>
        public static string DataMergeHelpAlignType {
            get {
                return ResourceManager.GetString("DataMergeHelpAlignType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///To join two or more pieces of data together list them in the order you would like them joined. If you use recordset (*) notation, the list will be repeated for every record..
        /// </summary>
        public static string DataMergeHelpInput {
            get {
                return ResourceManager.GetString("DataMergeHelpInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If Index is being used and there is extra space between the data supplied and the number of index characters, you can specify what makes up the padding e.g. 0 for numbers or blank space for text..
        /// </summary>
        public static string DataMergeHelpPadding {
            get {
                return ResourceManager.GetString("DataMergeHelpPadding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns the merged string.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string DataMergeHelpResult {
            get {
                return ResourceManager.GetString("DataMergeHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For Index use the number of characters that this merge will use. It will either trim if too little, or pad if too much.
        ///For Char put any characters or combination of characters you would like.
        ///Not applicable to New Line or Tab.
        /// </summary>
        public static string DataMergeHelpUsing {
            get {
                return ResourceManager.GetString("DataMergeHelpUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of merge you would like between each piece of merged data, if any..
        /// </summary>
        public static string DataMergeHelpWithType {
            get {
                return ResourceManager.GetString("DataMergeHelpWithType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string DataMergeToolTipInput {
            get {
                return ResourceManager.GetString("DataMergeToolTipInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string DataMergeToolTipPadding {
            get {
                return ResourceManager.GetString("DataMergeToolTipPadding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string DataMergeToolTipResult {
            get {
                return ResourceManager.GetString("DataMergeToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string DataMergeToolTipUsing {
            get {
                return ResourceManager.GetString("DataMergeToolTipUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can reverse the direction that the string is split by selecting Backward. By Default, the processing direction is Forward..
        /// </summary>
        public static string DataSplitDirectionHelpText {
            get {
                return ResourceManager.GetString("DataSplitDirectionHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If there is an occurrence or an item being split on, that should not be split on, it will be preceded with this character. e.g., a comma separated file might have a comma in a name, so don’t split on it if it is preceded by / or some other characters..
        /// </summary>
        public static string DataSplitHelpEscape {
            get {
                return ResourceManager.GetString("DataSplitHelpEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you would like the data or item you are splitting on to be included in the result data, select this checkbox..
        /// </summary>
        public static string DataSplitHelpInclude {
            get {
                return ResourceManager.GetString("DataSplitHelpInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns the split data in the pattern as described by the results.
        ///The variable pattern will be repeated until the end of the input data.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string DataSplitHelpResult {
            get {
                return ResourceManager.GetString("DataSplitHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///To split a value into one or more variables, put the value in here.
        ///You can process entire file content or just trim the white space from a variable..
        /// </summary>
        public static string DataSplitHelpString {
            get {
                return ResourceManager.GetString("DataSplitHelpString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For Index use the number of characters that this split will use. 
        ///For Char put any characters or combination of characters you would like.
        ///Not applicable to New Line, Tab or End.
        /// </summary>
        public static string DataSplitHelpUsing {
            get {
                return ResourceManager.GetString("DataSplitHelpUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select where you would like to split the data..
        /// </summary>
        public static string DataSplitHelpWithType {
            get {
                return ResourceManager.GetString("DataSplitHelpWithType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you want to include the item you  are splitting on in the result, make sure the checkbox is selected. The defaults for these are to not include unless its an index..
        /// </summary>
        public static string DataSplitIncludeHelpText {
            get {
                return ResourceManager.GetString("DataSplitIncludeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one result must be present. You can use [[Scalar]] or [[Recordset().Fields]] notation.
        ///If you use a recordset the split pattern will be repeated untill the end of the file, putting each row into a new record. If you dont want a piece of the data being split, leave that result blank..
        /// </summary>
        public static string DataSplitResultHelpText {
            get {
                return ResourceManager.GetString("DataSplitResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the criteria for the split. This will be the pattern used to repeat against the String input untill no more splits can occur or, you use END.
        ///Char will split on the characters you specify, like comma or | &lt;/.
        ///Index will split on the numeric index from the previouse split.
        ///New Line will split on carriage return.
        ///Space will split on blank space. (You can use this to trim data)
        ///Tab splits on a tab character.
        ///End splits at the end of the string..
        /// </summary>
        public static string DataSplitSplitAtHelpText {
            get {
                return ResourceManager.GetString("DataSplitSplitAtHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required field. Use any variable or data or combination of the two that you want to split. For file processing consider splitting first into headers, body and footers, then resplitting each of those independantly..
        /// </summary>
        public static string DataSplitStringToSplitHelpText {
            get {
                return ResourceManager.GetString("DataSplitStringToSplitHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string DataSplitToolTipEscape {
            get {
                return ResourceManager.GetString("DataSplitToolTipEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Include the information you are splitting on?.
        /// </summary>
        public static string DataSplitToolTipInclude {
            get {
                return ResourceManager.GetString("DataSplitToolTipInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string DataSplitToolTipResult {
            get {
                return ResourceManager.GetString("DataSplitToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string DataSplitToolTipString {
            get {
                return ResourceManager.GetString("DataSplitToolTipString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string DataSplitToolTipUsing {
            get {
                return ResourceManager.GetString("DataSplitToolTipUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put a positive or negative number here to add or subtract from the input date time.
        ///Leave this field blank if you do not want to change the date time..
        /// </summary>
        public static string DateTimeAddTimeHelpText {
            get {
                return ResourceManager.GetString("DateTimeAddTimeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the unit of time to add or subtract. This is ignored if the unit is blank or 0..
        /// </summary>
        public static string DateTimeAddTimeTypeHelpText {
            get {
                return ResourceManager.GetString("DateTimeAddTimeTypeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Describe the format of the date time you are entering. e.g. 23-July 1978 would be described as dd-MM yyyy.
        ///Leaving this field blank will assume the system date time format..
        /// </summary>
        public static string DateTimeInputFormatHelpText {
            get {
                return ResourceManager.GetString("DateTimeInputFormatHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///To format a date time, or to add/subtract from a date time, put it in here.
        ///Leaving this field blank will give you the system date time..
        /// </summary>
        public static string DateTimeInputHelpText {
            get {
                return ResourceManager.GetString("DateTimeInputHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Describe the format you would like the date time to be returned in.
        ///Leaving this field blank will assume the same as the Input Format..
        /// </summary>
        public static string DateTimeOutputFormatHelpText {
            get {
                return ResourceManager.GetString("DateTimeOutputFormatHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns the formatted  and/or added/subtracted date time.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string DateTimeResultHelpText {
            get {
                return ResourceManager.GetString("DateTimeResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To Delete a record in a recordset, put the recordset name in here with the index you would like to remove. e.g. [[Customers(7)]] will remove the record at index 7. [[Customers(*)]] will delete all the data in the recordset. This is recommended when working with large amounts of data that is no longer needed..
        /// </summary>
        public static string DeleteRecordsHelpRecords {
            get {
                return ResourceManager.GetString("DeleteRecordsHelpRecords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns the Success or Failure of the delete action. e.g. Deleting index 8 where it does not exist will result in Failure.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string DeleteRecordsHelpResult {
            get {
                return ResourceManager.GetString("DeleteRecordsHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string DeleteRecordsToolTipRecords {
            get {
                return ResourceManager.GetString("DeleteRecordsToolTipRecords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string DeleteRecordsToolTipResult {
            get {
                return ResourceManager.GetString("DeleteRecordsToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///Put  the index of the string you are looking for in here..
        /// </summary>
        public static string FindIndexHelpCharacters {
            get {
                return ResourceManager.GetString("FindIndexHelpCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the direction to search in..
        /// </summary>
        public static string FindIndexHelpDirectiontype {
            get {
                return ResourceManager.GetString("FindIndexHelpDirectiontype", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select which index(es) you would like found..
        /// </summary>
        public static string FindIndexHelpIndexType {
            get {
                return ResourceManager.GetString("FindIndexHelpIndexType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///To find the character index(es) of a string inside another string, put the string to be searched here..
        /// </summary>
        public static string FindIndexHelpInField {
            get {
                return ResourceManager.GetString("FindIndexHelpInField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns the index(es) of the found string.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record. If you are finding All Occurrences and using a scalar, the results will be comma separated..
        /// </summary>
        public static string FindIndexHelpResult {
            get {
                return ResourceManager.GetString("FindIndexHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string FindIndexToolTipCharacters {
            get {
                return ResourceManager.GetString("FindIndexToolTipCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string FindIndexToolTipInField {
            get {
                return ResourceManager.GetString("FindIndexToolTipInField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string FindIndexToolTipResult {
            get {
                return ResourceManager.GetString("FindIndexToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To find the indexes/rows that match certain criteria, put the comma separated list of fields to search in here. e.g. [[Customer().Name]], [[Customer().Prename]], [[Customer().Surname]].
        /// </summary>
        public static string FindRecordsFieldsToSearchHelpText {
            get {
                return ResourceManager.GetString("FindRecordsFieldsToSearchHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the match data to find..
        /// </summary>
        public static string FindRecordsMatchHelpText {
            get {
                return ResourceManager.GetString("FindRecordsMatchHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns the indexes of the successful matches.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record.
        ///If there are multiple results and a scalar is used, then each result will be separated with a comma..
        /// </summary>
        public static string FindRecordsResultHelpText {
            get {
                return ResourceManager.GetString("FindRecordsResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of information you want to match on..
        /// </summary>
        public static string FindRecordsSearchTypeHelpText {
            get {
                return ResourceManager.GetString("FindRecordsSearchTypeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will replace the * in the activity with every number in the comma seperated list provided and execute it once for each of those numbers. eg. CSV of 1,3,4,5,9 will execute [[Customers(*).ID]] as
        ///[[Customers(1).ID]]
        ///[[Customers(3).ID]]
        ///[[Customers(4).ID]]
        ///[[Customers(5).ID]]
        ///[[Customers(9).ID]].
        /// </summary>
        public static string ForEachCsvHelpText {
            get {
                return ResourceManager.GetString("ForEachCsvHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will execute the activity a given number of times..
        /// </summary>
        public static string ForEachNumberHelpText {
            get {
                return ResourceManager.GetString("ForEachNumberHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will replace the * in the activity with every number in the range provided and execute it once for each of those numbers. eg. Range of 1-5, will execute [[Customers(*).ID]] as
        ///[[Customers(1).ID]]
        ///[[Customers(2).ID]]
        ///[[Customers(3).ID]]
        ///[[Customers(4).ID]]
        ///[[Customers(5).ID]].
        /// </summary>
        public static string ForEachRangeHelpText {
            get {
                return ResourceManager.GetString("ForEachRangeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will replace the * in the activity with every index number in the Recordset provided. If the Recordset provided has 3 records, then there will be 3 executions eg [[Customers(*).ID]] as
        ///[[Customers(1).ID]]
        ///[[Customers(2).ID]]
        ///[[Customers(3).ID]].
        /// </summary>
        public static string ForEachRecordHelpText {
            get {
                return ResourceManager.GetString("ForEachRecordHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types of loop..
        /// </summary>
        public static string ForEachTypeHelpText {
            get {
                return ResourceManager.GetString("ForEachTypeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///To assign a value to a variable, put the value in here.
        ///If you put an = as the first character, it will turn into a calculation e.g. =[[qty]]*[[price]].
        /// </summary>
        public static string MultiAssignNewValueHelpText {
            get {
                return ResourceManager.GetString("MultiAssignNewValueHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///To assign a value to a variable, put the variable here.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string MultiAssignVariableHelpText {
            get {
                return ResourceManager.GetString("MultiAssignVariableHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To end the workflow if an error has occurred at this point, make sure the checkbox is selected. 
        ///If you have also called a web service / Warewolf workflow, that will finish executing first.
        ///If the workflow is nested, the calling workflow will resume..
        /// </summary>
        public static string OnErrorHelpIsEnded {
            get {
                return ResourceManager.GetString("OnErrorHelpIsEnded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an error occurs the error message will be placed into this variable as well the result variable.
        ///If left empty the result will still be placed in the result variable..
        /// </summary>
        public static string OnErrorHelpVariable {
            get {
                return ResourceManager.GetString("OnErrorHelpVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an error occurs you can execute a web service / Warewolf workflow to log the error that occurred.
        ///E.g. http://ServerName:77/Services/LogErrors?Severity=1&amp;Error=[[ErrorMsg]].
        /// </summary>
        public static string OnErrorHelpWorkflow {
            get {
                return ResourceManager.GetString("OnErrorHelpWorkflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ends the executing workflow at this point.
        /// </summary>
        public static string OnErrorToolTipIsEnded {
            get {
                return ResourceManager.GetString("OnErrorToolTipIsEnded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string OnErrorToolTipVariable {
            get {
                return ResourceManager.GetString("OnErrorToolTipVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string OnErrorToolTipWorkflow {
            get {
                return ResourceManager.GetString("OnErrorToolTipWorkflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preview (recordset field)
        ///This is a variable from an input field. Use comma-separated values for each index eg [[Trip(*).Distance]] = 45, 32, 12, 5
        /// 
        ///Preview (scalar field - including indexed recordsets and ())
        ///This is a variable from an input field. Put some test info in and click the Preview button to test your result..
        /// </summary>
        public static string PreviewInputHelpText {
            get {
                return ResourceManager.GetString("PreviewInputHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append will add the variables onto the list of variables already in the input grid. The values of the last row will be repeated for all of these additional values..
        /// </summary>
        public static string QuickVariableAppendHelpText {
            get {
                return ResourceManager.GetString("QuickVariableAppendHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To append something onto the front of the variables in your list, type it in here.
        ///For recordsets, type  recordsetname(). Dont forget the &quot;.&quot; after the &quot;()&quot;
        ///You do not need to put the &quot;[[&quot; in..
        /// </summary>
        public static string QuickVariablePrefixWithHelpText {
            get {
                return ResourceManager.GetString("QuickVariablePrefixWithHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace will replace the current list of variables with this list. The values of the first row will be repeated for all of these new values..
        /// </summary>
        public static string QuickVariableReplaceHelpText {
            get {
                return ResourceManager.GetString("QuickVariableReplaceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the criteria to split the variables in the list. This will be the pattern used to repeat against the Variable List box.
        ///Char will split on the characters you specify, like comma or | &lt;/.
        ///Index will split on the numeric index from the previouse split.
        ///New Line will split on carriage return.
        ///Space will split on blank space.
        ///Tab splits on a tab character..
        /// </summary>
        public static string QuickVariableSplitAndAtHelpText {
            get {
                return ResourceManager.GetString("QuickVariableSplitAndAtHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Simply enter the name of the recordset that you want to count in. eg
        ///[[MyRecordset()]].
        /// </summary>
        public static string QuickVariableSplitListOnHelpText {
            get {
                return ResourceManager.GetString("QuickVariableSplitListOnHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To append something onto the end of the variables in your list, type it in here.
        ///You do not need to put the &quot;]]&quot; in..
        /// </summary>
        public static string QuickVariableSuffixWithHelpText {
            get {
                return ResourceManager.GetString("QuickVariableSuffixWithHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type or paste all the variables you want to use in here. You can paste in any format. If you are adding variables into a grid with a drop down or other input, the values from the last row will be repeated, so set them before adding these variables..
        /// </summary>
        public static string QuickVariableVariableListHelpText {
            get {
                return ResourceManager.GetString("QuickVariableVariableListHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put the information you are looking for in here..
        /// </summary>
        public static string ReplaceHelpFind {
            get {
                return ResourceManager.GetString("ReplaceHelpFind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///To search and replace a string, put the variable containing the string to search in here..
        /// </summary>
        public static string ReplaceHelpInField {
            get {
                return ResourceManager.GetString("ReplaceHelpInField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put the replacement information in here..
        /// </summary>
        public static string ReplaceHelpReplaceWith {
            get {
                return ResourceManager.GetString("ReplaceHelpReplaceWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns the count of the number of replacements.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string ReplaceHelpResult {
            get {
                return ResourceManager.GetString("ReplaceHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string ReplaceToolTipFind {
            get {
                return ResourceManager.GetString("ReplaceToolTipFind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string ReplaceToolTipInField {
            get {
                return ResourceManager.GetString("ReplaceToolTipInField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string ReplaceToolTipReplaceWith {
            get {
                return ResourceManager.GetString("ReplaceToolTipReplaceWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string ReplaceToolTipResult {
            get {
                return ResourceManager.GetString("ReplaceToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert the input data for this service. It will be mapped to the input field listed in the To Service column. If the input is a Recordset field then you can use (*) to pass all the recordset fields into the workflow service. e.g. [[my(*).recs]] -&gt; input().records
        ///You can also put multiple fields into one field with other text much like the assign tool.
        ///By default similar matches from the variable list are used where possible..
        /// </summary>
        public static string ServiceHelpInput {
            get {
                return ResourceManager.GetString("ServiceHelpInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Insert the variable that you want the output of the workflow to be mapped into. By default similar matches from the variable list are used where possible.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string ServiceHelpOutput {
            get {
                return ResourceManager.GetString("ServiceHelpOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string ServiceToolTipInput {
            get {
                return ResourceManager.GetString("ServiceToolTipInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string ServiceToolTipOutput {
            get {
                return ResourceManager.GetString("ServiceToolTipOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To Sort a recordset enter the field in the recordset you would like to sort on.
        ///To sort on more than one field, perform the sort action for each field you would like to sort on, ending with the priority sort..
        /// </summary>
        public static string SortRecordsHelpSortField {
            get {
                return ResourceManager.GetString("SortRecordsHelpSortField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the order of the sorting.
        ///Forward will go 1-9 then a-Z.
        ///Backward will go Z-a then 9-1..
        /// </summary>
        public static string SortRecordsHelpSortOrderType {
            get {
                return ResourceManager.GetString("SortRecordsHelpSortOrderType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Recordset().Field]].
        /// </summary>
        public static string SortRecordsToolTipSortField {
            get {
                return ResourceManager.GetString("SortRecordsToolTipSortField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of rows you would like to insert at a time.
        ///The default is 0 which will do everything in 1 batch.
        ///If you specify 50, then 50 rows will be bulk inserted at a time..
        /// </summary>
        public static string SqlBulkInsertHelpBatchSize {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpBatchSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check constraints while data is being inserted. By default, constraints are not checked..
        /// </summary>
        public static string SqlBulkInsertHelpCheckConstraints {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpCheckConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a preconfigured database source or &quot;New Database Source...&quot; to add a new one..
        /// </summary>
        public static string SqlBulkInsertHelpDatabase {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specified, cause the server to fire the insert triggers for the rows being inserted into the database..
        /// </summary>
        public static string SqlBulkInsertHelpFireTriggers {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpFireTriggers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To bulk insert data into a table, put the data to insert in here.
        ///Using recordset (*) notation will put the entire recordset in and is the normal usage scenario for large data inserts to SQL.
        ///A single Recordset will yield the best performance. Do not mix, scalars and/or different recordsets for optimum performance.
        ///To quickly change the input data, press the Quick Variable Input button and ammend the mappings as necessary..
        /// </summary>
        public static string SqlBulkInsertHelpInputColumn {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpInputColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preserve source identity values. When not specified, identity values are assigned by the destination..
        /// </summary>
        public static string SqlBulkInsertHelpKeepIdentity {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpKeepIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Obtain a bulk update lock for the duration of the bulk copy operation. When not specified, row locks are used..
        /// </summary>
        public static string SqlBulkInsertHelpKeepTableLock {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpKeepTableLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.
        ///Returns Success or the record numbers with errors.
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].
        ///Using recordset () will add a new record and (*) will assign every record..
        /// </summary>
        public static string SqlBulkInsertHelpResult {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a table to perform the bulk insert into.
        ///If the table schema has changed or recently added to the source, click the refresh button..
        /// </summary>
        public static string SqlBulkInsertHelpTableName {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpTableName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of seconds you would like the operation to complete in.
        ///All batches in total must complete within this time period.
        ///The default is 0 which will be no time constraint.
        ///If you specify 30, then 30 seconds will be allowed for the entire operation to complete before timing out.
        ///Note, the timeout is purely for the actual SQL connection and not the preparation of the data to be inserted..
        /// </summary>
        public static string SqlBulkInsertHelpTimeout {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specified, each batch of the bulk-copy operation will occur within a transaction..
        /// </summary>
        public static string SqlBulkInsertHelpUseInternalTransaction {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpUseInternalTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]      
        ///[[Recordset().Field]].
        /// </summary>
        public static string SqlBulkInsertToolTipBatchSize {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipBatchSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check constraints while data is being inserted..
        /// </summary>
        public static string SqlBulkInsertToolTipCheckConstraints {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipCheckConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a preconfigured database source or &quot;New Database Source...&quot; to add a new one..
        /// </summary>
        public static string SqlBulkInsertToolTipDatabase {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specified, cause the server to fire the insert triggers for the rows being inserted into the database..
        /// </summary>
        public static string SqlBulkInsertToolTipFireTriggers {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipFireTriggers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data   
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string SqlBulkInsertToolTipInputColumn {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipInputColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preserve source identity values..
        /// </summary>
        public static string SqlBulkInsertToolTipKeepIdentity {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipKeepIdentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Obtain a bulk update lock for the duration of the bulk copy operation..
        /// </summary>
        public static string SqlBulkInsertToolTipKeepTableLock {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipKeepTableLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string SqlBulkInsertToolTipResult {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a table to perform the bulk insert into..
        /// </summary>
        public static string SqlBulkInsertToolTipTableName {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipTableName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number
        ///[[Scalar]]   
        ///[[Recordset(n).Field]]      
        ///[[Recordset().Field]].
        /// </summary>
        public static string SqlBulkInsertToolTipTimeout {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specified, each batch of the bulk-copy operation will occur within a transaction..
        /// </summary>
        public static string SqlBulkInsertToolTipUseInternalTransaction {
            get {
                return ResourceManager.GetString("SqlBulkInsertToolTipUseInternalTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To bulk insert data into a table, put the data to insert in here..
        /// </summary>
        public static string String {
            get {
                return ResourceManager.GetString("String", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using recordset (*) notation will put the entire recordset in and is the normal usage scenario for large data inserts to SQL..
        /// </summary>
        public static string String1 {
            get {
                return ResourceManager.GetString("String1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NOTE: A single Recordset will yield the best performance. Do not mix, scalars and/or different recordsets for optimum performance..
        /// </summary>
        public static string String2 {
            get {
                return ResourceManager.GetString("String2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To identify unique information in a recordset, put the comma separated fields that need to be unique in here..
        /// </summary>
        public static string UniqueRecordsHelpInField {
            get {
                return ResourceManager.GetString("UniqueRecordsHelpInField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns the unique combinations into the variables specified. If there are multiple fields being returned, there should be multiple Results fields specified. Use a comma to separate the variables..
        /// </summary>
        public static string UniqueRecordsHelpResult {
            get {
                return ResourceManager.GetString("UniqueRecordsHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Which fields from the recordset would you like returned when a Unique combination is found? Use a comma separated list of the fields.
        ///Where multiple rows are the same, the first one will be deemed Unique..
        /// </summary>
        public static string UniqueRecordsHelpReturnField {
            get {
                return ResourceManager.GetString("UniqueRecordsHelpReturnField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Recordset().Field]].
        /// </summary>
        public static string UniqueRecordsToolTipInField {
            get {
                return ResourceManager.GetString("UniqueRecordsToolTipInField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Scalar]]  
        ///[[Recordset(n).Field]]   
        ///[[Recordset(*).Field]]   
        ///[[Recordset().Field]].
        /// </summary>
        public static string UniqueRecordsToolTipResult {
            get {
                return ResourceManager.GetString("UniqueRecordsToolTipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [[Recordset().Field]].
        /// </summary>
        public static string UniqueRecordsToolTipReturnField {
            get {
                return ResourceManager.GetString("UniqueRecordsToolTipReturnField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To supply additional header information in your get request, put the header info in here..
        /// </summary>
        public static string WebRequestHeaderHelpText {
            get {
                return ResourceManager.GetString("WebRequestHeaderHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a single variable goes in here.
        ///Returnes the response text of the web get request..
        /// </summary>
        public static string WebRequestResultHelpText {
            get {
                return ResourceManager.GetString("WebRequestResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any data or variable can go in here.
        ///To traverse an retrieve the raw response from a webpage, enter it in here..
        /// </summary>
        public static string WebRequestURIHelpText {
            get {
                return ResourceManager.GetString("WebRequestURIHelpText", resourceCulture);
            }
        }
    }
}
