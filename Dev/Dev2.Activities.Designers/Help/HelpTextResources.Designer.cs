//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dev2.Activities.Help {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class HelpTextResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HelpTextResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Dev2.Activities.Help.HelpTextResources", typeof(HelpTextResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This data must be in the format specified in the &apos;Convert From&apos; category. This data will be converted to the format specified in the &apos;Convert To&apos; column..
        /// </summary>
        public static string BaseConvertInputHelpText {
            get {
                return ResourceManager.GetString("BaseConvertInputHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable where the result will be output to..
        /// </summary>
        public static string BaseConvertResultHelpText {
            get {
                return ResourceManager.GetString("BaseConvertResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Calculate Service works like the function box in Microsoft Excel (fn). Type the equation using good maths practices and put a variable from the Data List into the Result field. You can use the full Excel library of functions eg. AVG([[Employee().Age]]).
        /// </summary>
        public static string CalculateFunctionInputText {
            get {
                return ResourceManager.GetString("CalculateFunctionInputText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable you would like to contain the result once the calculation has completed..
        /// </summary>
        public static string CalculateFunctionResultText {
            get {
                return ResourceManager.GetString("CalculateFunctionResultText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The comment entered here will not effect the workflow. This text will be visible in the debug output if this comment is included as a step in the workflow..
        /// </summary>
        public static string CommentInputText {
            get {
                return ResourceManager.GetString("CommentInputText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Simply enter the name of the recordset that you want to count in. eg
        ///[[MyRecordset()]].
        /// </summary>
        public static string CountRecordsetFromRecordsetHelpText {
            get {
                return ResourceManager.GetString("CountRecordsetFromRecordsetHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables in [[Scalar]] or [[Recordset(*).Field]] format. If you use a recordset and do not specify an index/row number, a new record will be added..
        /// </summary>
        public static string CountRecordsResultHelpText {
            get {
                return ResourceManager.GetString("CountRecordsResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can reverse the direction that the string is split by selecting Backward. By Default, the processing direction is Forward..
        /// </summary>
        public static string DataSplitDirectionHelpText {
            get {
                return ResourceManager.GetString("DataSplitDirectionHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you want to include the item you  are splitting on in the result, make sure the checkbox is selected. The defaults for these are to not include unless its an index..
        /// </summary>
        public static string DataSplitIncludeHelpText {
            get {
                return ResourceManager.GetString("DataSplitIncludeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one result must be present. You can use [[Scalar]] or [[Recordset().Fields]] notation.
        ///If you use a recordset the split pattern will be repeated untill the end of the file, putting each row into a new record. If you dont want a piece of the data being split, leave that result blank..
        /// </summary>
        public static string DataSplitResultHelpText {
            get {
                return ResourceManager.GetString("DataSplitResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the criteria for the split. This will be the pattern used to repeat against the String input untill no more splits can occur or, you use END.
        ///Char will split on the characters you specify, like comma or | &lt;/.
        ///Index will split on the numeric index from the previouse split.
        ///New Line will split on carriage return.
        ///Space will split on blank space. (You can use this to trim data)
        ///Tab splits on a tab character.
        ///End splits at the end of the string..
        /// </summary>
        public static string DataSplitSplitAtHelpText {
            get {
                return ResourceManager.GetString("DataSplitSplitAtHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required field. Use any variable or data or combination of the two that you want to split. For file processing consider splitting first into headers, body and footers, then resplitting each of those independantly..
        /// </summary>
        public static string DataSplitStringToSplitHelpText {
            get {
                return ResourceManager.GetString("DataSplitStringToSplitHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A positive or negative number that will add or subtract a portion of time from the Input. The drop down will dictate the unit of time. Level the field blank if you are not adding or subtracting time..
        /// </summary>
        public static string DateTimeAddTimeHelpText {
            get {
                return ResourceManager.GetString("DateTimeAddTimeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Describe the dates format here using the short hand from the intellisense. eg. a date 23-July-1978 would be described dd-MM-yyyy. If you leave this field blank, it will use the system date time format - very handy when generating the date from the system..
        /// </summary>
        public static string DateTimeInputFormatHelpText {
            get {
                return ResourceManager.GetString("DateTimeInputFormatHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put the date you want to reformat or add/subtract from in here. You can use both variables and data eg [[Day]] July 1978, as the input if you want to hard code that part of the date. If you leave the Input blank, then the server time will be used by default. Using a * for recordset (eg. [[Recordset(*).Field]]) will process every record without needing to use a for each. Make sure you put a recordset field in the Result..
        /// </summary>
        public static string DateTimeInputHelpText {
            get {
                return ResourceManager.GetString("DateTimeInputHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Describe the dates output format here using the short hand from the intellisense. eg. a date 23-July-1978 would be described dd-MM-yyyy. If you leave this field blank, it will use the same format as the Input Format..
        /// </summary>
        public static string DateTimeOutputFormatHelpText {
            get {
                return ResourceManager.GetString("DateTimeOutputFormatHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required Field.
        ///Only variables in [[Scalar]] or [[Recordset(*).Field]] format. If you use a recordset and do not specify an index/row number, a new record will be added..
        /// </summary>
        public static string DateTimeResultHelpText {
            get {
                return ResourceManager.GetString("DateTimeResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This must the a recordset field. eg: &quot;[[Recordset().Field]]&quot;.
        /// </summary>
        public static string FindRecordsFieldsToSearchHelpText {
            get {
                return ResourceManager.GetString("FindRecordsFieldsToSearchHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data to compare to..
        /// </summary>
        public static string FindRecordsMatchHelpText {
            get {
                return ResourceManager.GetString("FindRecordsMatchHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the variable to output the comma seperated list of indices to. eg: &quot;[[RowWithResult]]&quot;.
        /// </summary>
        public static string FindRecordsResultHelpText {
            get {
                return ResourceManager.GetString("FindRecordsResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of the search..
        /// </summary>
        public static string FindRecordsSearchTypeHelpText {
            get {
                return ResourceManager.GetString("FindRecordsSearchTypeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will replace the * in the activity with every number in the comma seperated list provided and execute it once for each of those numbers. eg. CSV of 1,3,4,5,9 will execute [[Customers(*).ID]] as
        ///[[Customers(1).ID]]
        ///[[Customers(3).ID]]
        ///[[Customers(4).ID]]
        ///[[Customers(5).ID]]
        ///[[Customers(9).ID]].
        /// </summary>
        public static string ForEachCsvHelpText {
            get {
                return ResourceManager.GetString("ForEachCsvHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will execute the activity a given number of times..
        /// </summary>
        public static string ForEachNumberHelpText {
            get {
                return ResourceManager.GetString("ForEachNumberHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will replace the * in the activity with every number in the range provided and execute it once for each of those numbers. eg. Range of 1-5, will execute [[Customers(*).ID]] as
        ///[[Customers(1).ID]]
        ///[[Customers(2).ID]]
        ///[[Customers(3).ID]]
        ///[[Customers(4).ID]]
        ///[[Customers(5).ID]].
        /// </summary>
        public static string ForEachRangeHelpText {
            get {
                return ResourceManager.GetString("ForEachRangeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will replace the * in the activity with every index number in the Recordset provided. If the Recordset provided has 3 records, then there will be 3 executions eg [[Customers(*).ID]] as
        ///[[Customers(1).ID]]
        ///[[Customers(2).ID]]
        ///[[Customers(3).ID]].
        /// </summary>
        public static string ForEachRecordHelpText {
            get {
                return ResourceManager.GetString("ForEachRecordHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types of loop..
        /// </summary>
        public static string ForEachTypeHelpText {
            get {
                return ResourceManager.GetString("ForEachTypeHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other variables and data can go in here.
        ///If you want to assign a value to a variable, then put the value in here.
        ///If you put an = as the first character, it will turn into a calculation eg. =[[qty]]*[[price]] or =sum([[rec(*).volume]]).
        /// </summary>
        public static string MultiAssignNewVariableHelpText {
            get {
                return ResourceManager.GetString("MultiAssignNewVariableHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables can go in here.
        ///If you want to assign a value to a variable, then put the variable here.
        ///You can use [[scalars]] as well as [[Recordset().Fields]].
        ///If you use [[Recordset(*).Fields]] then every record in that field will have the value you give it in the New Value field..
        /// </summary>
        public static string MultiAssignVariableHelpText {
            get {
                return ResourceManager.GetString("MultiAssignVariableHelpText", resourceCulture);
            }
        }
    }
}
