// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18063
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Composition
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WorkflowExecutionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WorkflowExecution.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WorkflowExecution", "In order to execute a workflow on the server\r\nAs a Warewolf user\r\nI want to be ab" +
                    "le to build workflows and execute them against the server", ProgrammingLanguage.CSharp, new string[] {
                        "WorkflowExecution"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "WorkflowExecution")))
            {
                Dev2.Activities.Specs.Composition.WorkflowExecutionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow executing against the server", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
  testRunner.Given("I have a workflow \"WorkflowWithAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 9
  testRunner.And("\"WorkflowWithAssign\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table1, "And ");
#line 13
   testRunner.When("\"WorkflowWithAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table2.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table2.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 15
   testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowWithAssign\' debug inputs as", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table3.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table3.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 19
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowWithAssign\' debug outputs as", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools executing against the server", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndCount\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table4.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table4.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 26
   testRunner.And("\"WorkflowWithAssignAndCount\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table4, "And ");
#line 30
   testRunner.And("\"WorkflowWithAssignAndCount\" contains Count Record \"CountRec\" on \"[[rec()]]\" into" +
                    " \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
   testRunner.When("\"WorkflowWithAssignAndCount\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table5.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table5.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 33
   testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowWithAssignAndCount\' debug inputs as", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table6.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table6.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 37
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowWithAssignAndCount\' debug outputs as", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table7.AddRow(new string[] {
                        "[[rec(1).a]] = yes"});
            table7.AddRow(new string[] {
                        "[[rec(2).a]] = no"});
#line 41
   testRunner.And("the \'CountRec\' in WorkFlow \'WorkflowWithAssignAndCount\' debug inputs as", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table8.AddRow(new string[] {
                        "[[count]] = 2"});
#line 45
   testRunner.And("the \'CountRec\' in Workflow \'WorkflowWithAssignAndCount\' debug outputs as", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow executing against the server with a database service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowExecutingAgainstTheServerWithADatabaseService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow executing against the server with a database service", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
  testRunner.Given("I have a workflow \"TestWFWithDBService\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table9.AddRow(new string[] {
                        "",
                        "",
                        "dbo_proc_SmallFetch(*).Value",
                        "[[dbo_proc_SmallFetch().Value]]"});
#line 51
  testRunner.And("\"TestWFWithDBService\" contains a \"database\" service \"Fetch\" with mappings", ((string)(null)), table9, "And ");
#line 54
  testRunner.And("\"TestWFWithDBService\" contains Count Record \"Count\" on \"[[dbo_proc_SmallFetch()]]" +
                    "\" into \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
   testRunner.When("\"TestWFWithDBService\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table10.AddRow(new string[] {
                        ""});
#line 57
   testRunner.And("the \'Fetch\' in WorkFlow \'TestWFWithDBService\' debug inputs as", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table11.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(9).Value]] = 5"});
#line 60
   testRunner.And("the \'Fetch\' in Workflow \'TestWFWithDBService\' debug outputs as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(1).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(2).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(3).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(4).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(5).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(6).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(7).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(8).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(9).Value]] = 5"});
#line 63
   testRunner.And("the \'Count\' in WorkFlow \'TestWFWithDBService\' debug inputs as", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table13.AddRow(new string[] {
                        "[[count]] = 9"});
#line 74
  testRunner.And("the \'Count\' in Workflow \'TestWFWithDBService\' debug outputs as", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with an assign and webservice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAnAssignAndWebservice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with an assign and webservice", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line 79
  testRunner.Given("I have a workflow \"TestWebServiceWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table14.AddRow(new string[] {
                        "[[ext]]",
                        "json"});
            table14.AddRow(new string[] {
                        "[[prefix]]",
                        "a"});
#line 80
  testRunner.And("\"TestWebServiceWF\" contains an Assign \"Inputs\" as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table15.AddRow(new string[] {
                        "extension",
                        "[[ext]]",
                        "Countries(*).CountryID",
                        "[[Countries().CountryID]]"});
            table15.AddRow(new string[] {
                        "prefix",
                        "[[prefix]]",
                        "Countries(*).Description",
                        "[[Countries().Description]]"});
#line 84
  testRunner.And("\"TestWebServiceWF\" contains a \"webservice\" service \"InternalCountriesServiceTest\"" +
                    " with mappings", ((string)(null)), table15, "And ");
#line 88
   testRunner.When("\"TestWebServiceWF\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table16.AddRow(new string[] {
                        "1",
                        "[[ext]] =",
                        "json"});
            table16.AddRow(new string[] {
                        "2",
                        "[[prefix]] =",
                        "a"});
#line 90
    testRunner.And("the \'Inputs\' in WorkFlow \'TestWebServiceWF\' debug inputs as", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table17.AddRow(new string[] {
                        "1",
                        "[[ext]] = json"});
            table17.AddRow(new string[] {
                        "2",
                        "[[prefix]] = a"});
#line 94
   testRunner.And("the \'Inputs\' in Workflow \'TestWebServiceWF\' debug outputs as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table18.AddRow(new string[] {
                        "[[ext]] = json"});
            table18.AddRow(new string[] {
                        "[[prefix]] = a"});
#line 98
   testRunner.And("the \'InternalCountriesServiceTest\' in WorkFlow \'TestWebServiceWF\' debug inputs as" +
                    "", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table19.AddRow(new string[] {
                        "[[Countries(10).CountryID]] = 10"});
            table19.AddRow(new string[] {
                        "[[Countries(10).Description]] = Azerbaijan"});
#line 102
   testRunner.And("the \'InternalCountriesServiceTest\' in Workflow \'TestWebServiceWF\' debug outputs a" +
                    "s", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with an assign and remote workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAnAssignAndRemoteWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with an assign and remote workflow", ((string[])(null)));
#line 108
this.ScenarioSetup(scenarioInfo);
#line 109
 testRunner.Given("I have a workflow \"TestAssignWithRemote\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table20.AddRow(new string[] {
                        "[[inputData]]",
                        "hello"});
#line 110
  testRunner.And("\"TestAssignWithRemote\" contains an Assign \"AssignData\" as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table21.AddRow(new string[] {
                        "input",
                        "[[inputData]]",
                        "output",
                        "[[output]]"});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "values(*).upper",
                        "[[values().up]]"});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "values(*).lower",
                        "[[values().low]]"});
#line 113
 testRunner.And("\"TestAssignWithRemote\" contains \"WorkflowUsedBySpecs\" from server \"Remote Connect" +
                    "ion Integration\" with mapping as", ((string)(null)), table21, "And ");
#line 118
   testRunner.When("\"TestAssignWithRemote\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table22.AddRow(new string[] {
                        "1",
                        "[[inputData]] =",
                        "hello"});
#line 120
    testRunner.And("the \'AssignData\' in WorkFlow \'TestAssignWithRemote\' debug inputs as", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table23.AddRow(new string[] {
                        "1",
                        "[[inputData]] = hello"});
#line 123
   testRunner.And("the \'AssignData\' in Workflow \'TestAssignWithRemote\' debug outputs as", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table24.AddRow(new string[] {
                        "[[inputData]] = hello"});
#line 126
    testRunner.And("the \'WorkflowUsedBySpecs\' in WorkFlow \'TestAssignWithRemote\' debug inputs as", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table25.AddRow(new string[] {
                        "1",
                        "[[in]] = hello"});
#line 129
   testRunner.And("the \'Setup Assign (1)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table26.AddRow(new string[] {
                        "1",
                        "[[in]] = HELLO"});
#line 132
   testRunner.And("the \'Convert Case (1)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table27.AddRow(new string[] {
                        "1",
                        "[[output]] = HELLO"});
            table27.AddRow(new string[] {
                        "2",
                        "[[values(1).upper]] = HELLO"});
            table27.AddRow(new string[] {
                        "3",
                        "[[values(1).lower]] = hello"});
#line 135
   testRunner.And("the \'Final Assign (3)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table28.AddRow(new string[] {
                        "[[output]] = HELLO"});
            table28.AddRow(new string[] {
                        "[[values(1).up]] = HELLO"});
            table28.AddRow(new string[] {
                        "[[values(1).low]] = hello"});
#line 140
   testRunner.And("the \'WorkflowUsedBySpecs\' in Workflow \'TestAssignWithRemote\' debug outputs as", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
            "rver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignBaseConvertAndCaseConvertToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
                    "rver", ((string[])(null)));
#line 147
this.ScenarioSetup(scenarioInfo);
#line 148
   testRunner.Given("I have a workflow \"WorkflowWithAssignBaseConvertandCaseconvert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "100"});
#line 149
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains an Assign \"Assign1\" as", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table30.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "UPPER"});
#line 154
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains case convert \"Case to Conv" +
                    "ert\" as", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table31.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Text",
                        "Base 64"});
#line 157
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains Base convert \"Base to Conv" +
                    "ert\" as", ((string)(null)), table31, "And ");
#line 160
   testRunner.When("\"WorkflowWithAssignBaseConvertandCaseconvert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 161
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table32.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
            table32.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "test"});
            table32.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "100"});
#line 162
   testRunner.And("the \'Assign1\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' debug inp" +
                    "uts as", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table33.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  50"});
            table33.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  test"});
            table33.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  100"});
#line 167
    testRunner.And("the \'Assign1\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' debug out" +
                    "puts as", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table34.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = test",
                        "UPPER"});
#line 172
   testRunner.And("the \'Case to Convert\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug inputs as", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table35.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = TEST"});
#line 175
   testRunner.And("the \'Case to Convert\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug outputs as", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table36.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50",
                        "Text",
                        "Base 64"});
#line 178
   testRunner.And("the \'Base to Convert\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug inputs as", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table37.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = NTA="});
#line 181
      testRunner.And("the \'Base to Convert\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug outputs as", ((string)(null)), table37, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 3 Assigns tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith3AssignsToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 3 Assigns tools executing against the server", ((string[])(null)));
#line 255
this.ScenarioSetup(scenarioInfo);
#line 256
   testRunner.Given("I have a workflow \"WorkflowWith3Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table38.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(1).a"});
#line 257
   testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool1\" as", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table39.AddRow(new string[] {
                        "[[test]]",
                        "rec(1).a"});
            table39.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 260
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool2\" as", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table40.AddRow(new string[] {
                        "[[new]]",
                        "[[[[test]]]]"});
#line 264
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool3\" as", ((string)(null)), table40, "And ");
#line 267
   testRunner.When("\"WorkflowWith3Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 268
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table41.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(1).a"});
#line 269
   testRunner.And("the \'Assigntool1\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table42.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(1).a"});
#line 272
   testRunner.And("the \'Assigntool1\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table43.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "rec(1).a"});
            table43.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = rec(1).a",
                        "Warewolf"});
#line 275
   testRunner.And("the \'Assigntool2\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table44.AddRow(new string[] {
                        "1",
                        "[[test]] = rec(1).a"});
            table44.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = Warewolf"});
#line 279
   testRunner.And("the \'Assigntool2\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table45.AddRow(new string[] {
                        "1",
                        "[[new]] =",
                        "[[[[test]]]] = Warewolf"});
#line 283
    testRunner.And("the \'Assigntool3\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table46.AddRow(new string[] {
                        "1",
                        "[[new]] = Warewolf"});
#line 286
   testRunner.And("the \'Assigntool3\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table46, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Date and Time Difference tools executing against the ser" +
            "ver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndDateAndTimeDifferenceToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Date and Time Difference tools executing against the ser" +
                    "ver", ((string[])(null)));
#line 291
this.ScenarioSetup(scenarioInfo);
#line 292
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndDateTimeDifferencetools1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table47.AddRow(new string[] {
                        "[[a]]",
                        "2014"});
            table47.AddRow(new string[] {
                        "[[b]]",
                        "10."});
#line 293
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetools1\" contains an Assign \"InputDates\" a" +
                    "s", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table48.AddRow(new string[] {
                        "2020/[[b]]/01",
                        "2030/01/01",
                        "yyyy/mm/dd",
                        "Years",
                        "[[result]]"});
#line 297
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetools1\" contains Date and Time Difference" +
                    " \"DateAndTime\" as", ((string)(null)), table48, "And ");
#line 300
   testRunner.When("\"WorkflowWithAssignAndDateTimeDifferencetools1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 301
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table49.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "2014"});
            table49.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10."});
#line 302
   testRunner.And("the \'InputDates\' in WorkFlow \'WorkflowWithAssignAndDateTimeDifferencetools1\' debu" +
                    "g inputs as", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table50.AddRow(new string[] {
                        "1",
                        "[[a]] = 2014"});
            table50.AddRow(new string[] {
                        "2",
                        "[[b]] = 10."});
#line 306
   testRunner.And("the \'InputDates\' in Workflow \'WorkflowWithAssignAndDateTimeDifferencetools1\' debu" +
                    "g outputs as", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table51.AddRow(new string[] {
                        "2020/[[b]]/01 = 2020/10./01",
                        "2030/01/01",
                        "yyyy/mm/dd",
                        "Years"});
#line 310
   testRunner.And("the \'DateAndTime\' in WorkFlow \'WorkflowWithAssignAndDateTimeDifferencetools1\' deb" +
                    "ug inputs as", ((string)(null)), table51, "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table52.AddRow(new string[] {
                        "[[result]] ="});
#line 313
   testRunner.And("the \'DateAndTime\' in Workflow \'WorkflowWithAssignAndDateTimeDifferencetools1\' deb" +
                    "ug outputs as", ((string)(null)), table52, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit executing against the server", ((string[])(null)));
#line 318
this.ScenarioSetup(scenarioInfo);
#line 319
      testRunner.Given("I have a workflow \"WorkflowWithAssignDataMergeAndDataSplittools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table53.AddRow(new string[] {
                        "[[a]]",
                        "Test"});
            table53.AddRow(new string[] {
                        "[[b]]",
                        "Warewolf"});
            table53.AddRow(new string[] {
                        "[[split().a]]",
                        "Workflow"});
#line 320
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains an Assign \"Assign To merg" +
                    "e\" as", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table54.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table54.AddRow(new string[] {
                        "[[b]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 325
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains Data Merge \"Data Merge\" i" +
                    "nto \"[[result]]\" as", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table55.AddRow(new string[] {
                        "[[result]][[split().a]]",
                        "[[rec().b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table55.AddRow(new string[] {
                        "",
                        "[[rec().b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 329
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains Data Split \"Data Split\" a" +
                    "s", ((string)(null)), table55, "And ");
#line 333
   testRunner.When("\"WorkflowWithAssignDataMergeAndDataSplittools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 334
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table56.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "Test"});
            table56.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "Warewolf"});
            table56.AddRow(new string[] {
                        "3",
                        "[[split().a]] =",
                        "Workflow"});
#line 335
   testRunner.And("the \'Assign To merge\' in WorkFlow \'WorkflowWithAssignDataMergeAndDataSplittools\' " +
                    "debug inputs as", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table57.AddRow(new string[] {
                        "1",
                        "[[a]]         =  Test"});
            table57.AddRow(new string[] {
                        "2",
                        "[[b]]         =  Warewolf"});
            table57.AddRow(new string[] {
                        "3",
                        "[[split(1).a]] =  Workflow"});
#line 340
  testRunner.And("the \'Assign To merge\' in Workflow \'WorkflowWithAssignDataMergeAndDataSplittools\' " +
                    "debug outputs as", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table58.AddRow(new string[] {
                        "1",
                        "[[a]] = Test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table58.AddRow(new string[] {
                        "2",
                        "[[b]] = Warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 345
   testRunner.And("the \'Data Merge\' in WorkFlow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " inputs as", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table59.AddRow(new string[] {
                        "[[result]] = TestWarewolf"});
#line 349
   testRunner.And("the \'Data Merge\' in Workflow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " outputs as", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table60.AddRow(new string[] {
                        "[[result]][[split(1).a]] = TestWarewolfWorkflow",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().b]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table60.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec().b]] =",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 352
   testRunner.And("the \'Data Split\' in WorkFlow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " inputs as", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table61.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = Test"});
            table61.AddRow(new string[] {
                        "",
                        "[[rec(2).b]] = Warewolf"});
            table61.AddRow(new string[] {
                        "",
                        "[[rec(3).b]] = Work"});
            table61.AddRow(new string[] {
                        "",
                        "[[rec(4).b]] = flow"});
            table61.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = Test"});
            table61.AddRow(new string[] {
                        "",
                        "[[rec(2).b]] = Warewolf"});
            table61.AddRow(new string[] {
                        "",
                        "[[rec(3).b]] = Work"});
            table61.AddRow(new string[] {
                        "",
                        "[[rec(4).b]] = flow"});
#line 356
   testRunner.And("the \'Data Split\' in Workflow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " outputs as", ((string)(null)), table61, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns and DataSplit executing against the server", ((string[])(null)));
#line 368
this.ScenarioSetup(scenarioInfo);
#line 369
      testRunner.Given("I have a workflow \"WorkflowWithAssignandDataSplittools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table62.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table62.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table62.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "test"});
#line 370
   testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains an Assign \"splitvalues1\" as", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table63.AddRow(new string[] {
                        "[[test]]",
                        "warewolf"});
#line 375
    testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains an Assign \"splitvalues2\" as", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table64.AddRow(new string[] {
                        "[[[[rs(1).a]]]]",
                        "[[rec(1).a]]",
                        "Index",
                        "[[[[a]]]]",
                        "Unselected",
                        ""});
#line 378
   testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains Data Split \"DataSpliting\" as", ((string)(null)), table64, "And ");
#line 381
   testRunner.When("\"WorkflowWithAssignandDataSplittools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 382
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table65.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table65.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table65.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]] =",
                        "test"});
#line 383
   testRunner.And("the \'splitvalues1\' in WorkFlow \'WorkflowWithAssignandDataSplittools\' debug inputs" +
                    " as", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table66.AddRow(new string[] {
                        "1",
                        "[[a]]         =  b"});
            table66.AddRow(new string[] {
                        "2",
                        "[[b]]         =  2"});
            table66.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]]   =  test"});
#line 388
  testRunner.And("the \'splitvalues1\' in Workflow \'WorkflowWithAssignandDataSplittools\' debug output" +
                    "s as", ((string)(null)), table66, "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table67.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "warewolf"});
#line 393
  testRunner.And("the \'splitvalues2\' in WorkFlow \'WorkflowWithAssignandDataSplittools\' debug inputs" +
                    " as", ((string)(null)), table67, "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table68.AddRow(new string[] {
                        "1",
                        "[[test]] =  warewolf"});
#line 396
  testRunner.And("the \'splitvalues2\' in Workflow \'WorkflowWithAssignandDataSplittools\' debug output" +
                    "s as", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table69.AddRow(new string[] {
                        "[[[[rs(1).a]]]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).a]] =",
                        "Index",
                        "[[[[a]]]] = 2",
                        "No",
                        ""});
#line 399
   testRunner.And("the \'DataSpliting\' in WorkFlow \'WorkflowWithAssignandDataSplittools\' debug inputs" +
                    " as", ((string)(null)), table69, "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table70.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = lf"});
#line 402
   testRunner.And("the \'DataSpliting\' in Workflow \'WorkflowWithAssignandDataSplittools\' debug output" +
                    "s as", ((string)(null)), table70, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Sequence(Assign, Datamerge, Data Split, Find Index and R" +
            "eplace) executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndSequenceAssignDatamergeDataSplitFindIndexAndReplaceExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Sequence(Assign, Datamerge, Data Split, Find Index and R" +
                    "eplace) executing against the server", ((string[])(null)));
#line 447
this.ScenarioSetup(scenarioInfo);
#line 448
      testRunner.Given("I have a workflow \"workflowithAssignandsequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table71.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table71.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
            table71.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
            table71.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
#line 449
       testRunner.And("\"workflowithAssignandsequence\" contains an Assign \"Assign for sequence\" as", ((string)(null)), table71, "And ");
#line 455
      testRunner.And("\"workflowithAssignandsequence\" contains a Sequence \"Test1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table72.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table72.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 456
   testRunner.And("\"Test1\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table73.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(1).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table73.AddRow(new string[] {
                        "",
                        "[[rec(2).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 460
   testRunner.And("\"Test1\" contains Data Split \"Data Split\" as", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table74.AddRow(new string[] {
                        "[[rec().a]]",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 464
   testRunner.And("\"Test1\" contains Find Index \"Index\" into \"[[indexResult]]\" as", ((string)(null)), table74, "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table75.AddRow(new string[] {
                        "[[rec(*)]]",
                        "e",
                        "REPLACED"});
#line 467
   testRunner.And("\"Test1\" contains Replace \"Replacing\" into \"[[replaceResult]]\" as", ((string)(null)), table75, "And ");
#line 470
   testRunner.When("\"workflowithAssignandsequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 471
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table76.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "test"});
            table76.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "nothing"});
            table76.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "warewolf"});
            table76.AddRow(new string[] {
                        "4",
                        "[[rec().b]] =",
                        "nothing"});
#line 472
   testRunner.And("the \'Assign for sequence\' in WorkFlow \'workflowithAssignandsequence\' debug inputs" +
                    " as", ((string)(null)), table76, "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table77.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test"});
            table77.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = nothing"});
            table77.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] = warewolf"});
            table77.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] = nothing"});
#line 478
    testRunner.And("the \'Assign for sequence\' in Workflow \'workflowithAssignandsequence\' debug output" +
                    "s as", ((string)(null)), table77, "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table78.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table78.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 484
   testRunner.And("the \'Data Merge\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table79.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 488
   testRunner.And("the \'Data Merge\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table80.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table80.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 491
   testRunner.And("the \'Data Split\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table80, "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table81.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = test"});
            table81.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = warewolf"});
#line 495
   testRunner.And("the \'Data Split\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table81, "And ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table82.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 499
      testRunner.And("the \'Index\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table82, "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table83.AddRow(new string[] {
                        "[[indexResult]] = 4"});
#line 502
   testRunner.And("the \'Index\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table84.AddRow(new string[] {
                        "[[rec(1).a]] = test",
                        "",
                        ""});
            table84.AddRow(new string[] {
                        "[[rec(1).b]] = test",
                        "",
                        ""});
            table84.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "",
                        ""});
            table84.AddRow(new string[] {
                        "[[rec(2).b]] = warewolf",
                        "e",
                        "REPLACED"});
#line 505
   testRunner.And("the \'Replacing\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table84, "And ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table85.AddRow(new string[] {
                        "[[rec(1).a]] = tREPLACEDst"});
            table85.AddRow(new string[] {
                        "[[rec(1).b]] = tREPLACEDst"});
            table85.AddRow(new string[] {
                        "[[rec(2).a]] = warREPLACEDwolf"});
            table85.AddRow(new string[] {
                        "[[rec(2).b]] = warREPLACEDwolf"});
            table85.AddRow(new string[] {
                        "[[replaceResult]] = 4"});
#line 511
   testRunner.And("the \'Replacing\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table85, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create and Delete folder tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateAndDeleteFolderToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create and Delete folder tools executing against the server", ((string[])(null)));
#line 519
this.ScenarioSetup(scenarioInfo);
#line 520
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateandDeleteRecord\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table86.AddRow(new string[] {
                        "[[rec().a]]",
                        "C:\\copied00.txt"});
#line 521
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Assign \"Assign to create\" a" +
                    "s", ((string)(null)), table86, "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table87.AddRow(new string[] {
                        "[[rec().a]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 524
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Create \"Create1\" as", ((string)(null)), table87, "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset",
                        "Result"});
            table88.AddRow(new string[] {
                        "[[rec().a]]",
                        "[[res2]]"});
#line 527
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Delete Folder \"DeleteFolder" +
                    "\" as", ((string)(null)), table88, "And ");
#line 530
   testRunner.When("\"WorkflowWithAssignCreateandDeleteRecord\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 531
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table89.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "C:\\copied00.txt"});
#line 532
   testRunner.And("the \'Assign to create\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecord\' debu" +
                    "g inputs as", ((string)(null)), table89, "And ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table90.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = C:\\copied00.txt"});
#line 535
   testRunner.And("the \'Assign to create\' in Workflow \'WorkflowWithAssignCreateandDeleteRecord\' debu" +
                    "g outputs as", ((string)(null)), table90, "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table91.AddRow(new string[] {
                        "[[rec(1).a]] = C:\\copied00.txt",
                        "True",
                        "\"\"",
                        "\"\""});
#line 538
  testRunner.And("the \'Create1\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecord\' debug inputs " +
                    "as", ((string)(null)), table91, "And ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table92.AddRow(new string[] {
                        "[[res1]] = Success"});
#line 541
    testRunner.And("the \'Create1\' in Workflow \'WorkflowWithAssignCreateandDeleteRecord\' debug outputs" +
                    " as", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table93.AddRow(new string[] {
                        "[[rec(1).a]] = C:\\copied00.txt",
                        "\"\"",
                        "\"\""});
#line 544
   testRunner.And("the \'DeleteFolder\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecord\' debug in" +
                    "puts as", ((string)(null)), table93, "And ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table94.AddRow(new string[] {
                        "[[res2]] = Success"});
#line 547
   testRunner.And("the \'DeleteFolder\' in Workflow \'WorkflowWithAssignCreateandDeleteRecord\' debug ou" +
                    "tputs as", ((string)(null)), table94, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create and Delete Record tools with incorrect input path exe" +
            "cuting against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateAndDeleteRecordToolsWithIncorrectInputPathExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create and Delete Record tools with incorrect input path exe" +
                    "cuting against the server", ((string[])(null)));
#line 552
this.ScenarioSetup(scenarioInfo);
#line 553
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table95.AddRow(new string[] {
                        "[[rec().a]]",
                        "create.txt"});
#line 554
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Assign \"Assign to cr" +
                    "eate\" as", ((string)(null)), table95, "And ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table96.AddRow(new string[] {
                        "[[rec().a]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 557
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Create \"Create1\" as", ((string)(null)), table96, "And ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "File Or Folder",
                        "Result"});
            table97.AddRow(new string[] {
                        "[[rec().a]]",
                        "[[res1]]"});
#line 560
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Delete \"Delete\" as", ((string)(null)), table97, "And ");
#line 563
   testRunner.When("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 564
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table98.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "create.txt"});
#line 565
   testRunner.And("the \'Assign to create\' in WorkFlow \'WorkflowWithAssignCreateDeleteRecordNoneExist" +
                    "1\' debug inputs as", ((string)(null)), table98, "And ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table99.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = create.txt"});
#line 568
   testRunner.And("the \'Assign to create\' in Workflow \'WorkflowWithAssignCreateDeleteRecordNoneExist" +
                    "1\' debug outputs as", ((string)(null)), table99, "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table100.AddRow(new string[] {
                        "[[rec(1).a]] = create.txt",
                        "True",
                        "Username =",
                        "Password ="});
#line 571
   testRunner.And("the \'Create1\' in WorkFlow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug " +
                    "inputs as", ((string)(null)), table100, "And ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table101.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 574
   testRunner.And("the \'Create1\' in Workflow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug " +
                    "outputs as", ((string)(null)), table101, "And ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table102.AddRow(new string[] {
                        "[[rec(1).a]] = create.txt",
                        "Username =",
                        "Password ="});
#line 577
   testRunner.And("the \'Delete\' in WorkFlow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug i" +
                    "nputs as", ((string)(null)), table102, "And ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table103.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 580
   testRunner.And("the \'Delete\' in Workflow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug o" +
                    "utputs as", ((string)(null)), table103, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools executing against the server", ((string[])(null)));
#line 584
this.ScenarioSetup(scenarioInfo);
#line 585
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table104.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table104.AddRow(new string[] {
                        "[[b]]",
                        "test"});
            table104.AddRow(new string[] {
                        "[[test]]",
                        "warewolf"});
#line 586
   testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"tool1\" as", ((string)(null)), table104, "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table105.AddRow(new string[] {
                        "[[[[a]]]]",
                        "[[[[[[a]]]]]]"});
#line 591
   testRunner.And("\"WorkflowWith2Assigntools\" contains an Assign \"tool2\" as", ((string)(null)), table105, "And ");
#line 594
   testRunner.When("\"WorkflowWith2Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 595
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table106.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table106.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
            table106.AddRow(new string[] {
                        "3",
                        "[[test]] =",
                        "warewolf"});
#line 596
   testRunner.And("the \'tool1\' in WorkFlow \'WorkflowWith2Assigntools\' debug inputs as", ((string)(null)), table106, "And ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table107.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table107.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
            table107.AddRow(new string[] {
                        "3",
                        "[[test]] = warewolf"});
#line 601
   testRunner.And("the \'tool1\' in Workflow \'WorkflowWith2Assigntools\' debug outputs as", ((string)(null)), table107, "And ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table108.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = test",
                        "[[[[[[a]]]]]] = warewolf"});
#line 606
   testRunner.And("the \'tool2\' in WorkFlow \'WorkflowWith2Assigntools\' debug inputs as", ((string)(null)), table108, "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table109.AddRow(new string[] {
                        "1",
                        "[[b]] =  warewolf"});
#line 609
   testRunner.And("the \'tool2\' in Workflow \'WorkflowWith2Assigntools\' debug outputs as", ((string)(null)), table109, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools by using recordsets in fields executing against the " +
            "server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsByUsingRecordsetsInFieldsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools by using recordsets in fields executing against the " +
                    "server", ((string[])(null)));
#line 615
this.ScenarioSetup(scenarioInfo);
#line 616
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntoolswithrecordsets\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table110.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(2).a"});
            table110.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
#line 617
   testRunner.And("\"WorkflowWith2Assigntoolswithrecordsets\" contains an Assign \"rec1\" as", ((string)(null)), table110, "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table111.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "warewolf"});
#line 621
   testRunner.And("\"WorkflowWith2Assigntoolswithrecordsets\" contains an Assign \"rec2\" as", ((string)(null)), table111, "And ");
#line 624
   testRunner.When("\"WorkflowWith2Assigntoolswithrecordsets\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 625
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table112.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(2).a"});
            table112.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "test"});
#line 626
   testRunner.And("the \'rec1\' in WorkFlow \'WorkflowWith2Assigntoolswithrecordsets\' debug inputs as", ((string)(null)), table112, "And ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table113.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(2).a"});
            table113.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = test"});
#line 630
   testRunner.And("the \'rec1\' in Workflow \'WorkflowWith2Assigntoolswithrecordsets\' debug outputs as", ((string)(null)), table113, "And ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table114.AddRow(new string[] {
                        "1",
                        "[[[[rec(1).a]]]] = rec(2).a",
                        "warewolf"});
#line 634
   testRunner.And("the \'rec2\' in WorkFlow \'WorkflowWith2Assigntoolswithrecordsets\' debug inputs as", ((string)(null)), table114, "And ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table115.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] =  warewolf"});
#line 637
   testRunner.And("the \'rec2\' in Workflow \'WorkflowWith2Assigntoolswithrecordsets\' debug outputs as", ((string)(null)), table115, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools by using Scalars as variables executing against the " +
            "server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsByUsingScalarsAsVariablesExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools by using Scalars as variables executing against the " +
                    "server", ((string[])(null)));
#line 641
this.ScenarioSetup(scenarioInfo);
#line 642
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntoolswithrscalars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table116.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table116.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 643
   testRunner.And("\"WorkflowWith2Assigntoolswithscalars\" contains an Assign \"scl1\" as", ((string)(null)), table116, "And ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table117.AddRow(new string[] {
                        "[[[[a]]]]",
                        "warewolf"});
#line 647
   testRunner.And("\"WorkflowWith2Assigntoolswithrscalars\" contains an Assign \"scl2\" as", ((string)(null)), table117, "And ");
#line 650
   testRunner.When("\"WorkflowWith2Assigntoolswithrscalars\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 651
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table118.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table118.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 652
   testRunner.And("the \'scl1\' in WorkFlow \'WorkflowWith2Assigntoolswithrscalars\' debug inputs as", ((string)(null)), table118, "And ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table119.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table119.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 656
   testRunner.And("the \'scl1\' in Workflow \'WorkflowWith2Assigntoolswithrscalars\' debug outputs as", ((string)(null)), table119, "And ");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table120.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = test",
                        "warewolf"});
#line 660
   testRunner.And("the \'scl2\' in WorkFlow \'WorkflowWith2Assigntoolswithrscalars\' debug inputs as", ((string)(null)), table120, "And ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table121.AddRow(new string[] {
                        "1",
                        "[[b]] =  warewolf"});
#line 663
   testRunner.And("the \'scl2\' in Workflow \'WorkflowWith2Assigntoolswithrscalars\' debug outputs as", ((string)(null)), table121, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Count Data Merge and 2 Delete  tools executing against the s" +
            "erver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCountDataMergeAnd2DeleteToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Count Data Merge and 2 Delete  tools executing against the s" +
                    "erver", ((string[])(null)));
#line 722
this.ScenarioSetup(scenarioInfo);
#line 723
   testRunner.Given("I have a workflow \"WorkflowWithAssignCountDataMerge&2Delete\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table122.AddRow(new string[] {
                        "[[rec().a]]",
                        "21"});
            table122.AddRow(new string[] {
                        "[[rec().a]]",
                        "22"});
            table122.AddRow(new string[] {
                        "[[rec().a]]",
                        ""});
#line 724
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains an Assign \"countrecordval1\" a" +
                    "s", ((string)(null)), table122, "And ");
#line 729
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Count Record \"Cnt1\" on \"[[rec" +
                    "()]]\" into \"[[result1]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table123.AddRow(new string[] {
                        "[[rec()]]",
                        "[[result2]]"});
#line 730
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Delete \"Delrec\" as", ((string)(null)), table123, "And ");
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table124.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "2",
                        "",
                        "Left"});
            table124.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "2",
                        "",
                        "Left"});
#line 733
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Data Merge \"DataMerge1\" into " +
                    "\"[[rec().a]]\" as", ((string)(null)), table124, "And ");
#line 737
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Count Record \"Cnt2\" on \"[[rec" +
                    "()]]\" into \"[[result3]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 738
   testRunner.When("\"WorkflowWithAssignCountDataMerge&2Delete\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 739
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table125.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "21"});
            table125.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "22"});
            table125.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "\"\""});
#line 740
   testRunner.And("the \'countrecordval1\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debu" +
                    "g inputs as", ((string)(null)), table125, "And ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table126.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 21"});
            table126.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 22"});
            table126.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] ="});
#line 745
   testRunner.And("the \'countrecordval1\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debu" +
                    "g outputs as", ((string)(null)), table126, "And ");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table127.AddRow(new string[] {
                        "[[rec(1).a]] = 21"});
            table127.AddRow(new string[] {
                        "[[rec(2).a]] = 22"});
            table127.AddRow(new string[] {
                        "[[rec(3).a]] ="});
#line 750
   testRunner.And("the \'Cnt1\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inputs as" +
                    "", ((string)(null)), table127, "And ");
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table128.AddRow(new string[] {
                        "[[result1]] = 3"});
#line 755
   testRunner.And("the \'Cnt1\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug outputs a" +
                    "s", ((string)(null)), table128, "And ");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table129.AddRow(new string[] {
                        "[[rec(3).a]] ="});
#line 758
   testRunner.And("the \'Delrec\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inputs " +
                    "as", ((string)(null)), table129, "And ");
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table130.AddRow(new string[] {
                        "[[result2]] = Success"});
#line 761
   testRunner.And("the \'Delrec\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug outputs" +
                    " as", ((string)(null)), table130, "And ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table131.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 21",
                        "Index",
                        "\"2\"",
                        "\"\"",
                        "Left"});
            table131.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 22",
                        "Index",
                        "\"2\"",
                        "\"\"",
                        "Left"});
#line 764
   testRunner.And("the \'DataMerge1\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inp" +
                    "uts as", ((string)(null)), table131, "And ");
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table132.AddRow(new string[] {
                        "[[rec(3).a]] = 2122"});
#line 768
   testRunner.And("the \'DataMerge1\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug out" +
                    "puts as", ((string)(null)), table132, "And ");
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table133.AddRow(new string[] {
                        "[[rec(1).a]] = 21"});
            table133.AddRow(new string[] {
                        "[[rec(2).a]] = 22"});
            table133.AddRow(new string[] {
                        "[[rec(3).a]] = 2122"});
#line 771
    testRunner.And("the \'Cnt2\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inputs as" +
                    "", ((string)(null)), table133, "And ");
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table134.AddRow(new string[] {
                        "[[result3]] = 3"});
#line 776
   testRunner.And("the \'Cnt2\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug outputs a" +
                    "s", ((string)(null)), table134, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools Assign and SQL Bulk Insert executing against the ser" +
            "ver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsAssignAndSQLBulkInsertExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools Assign and SQL Bulk Insert executing against the ser" +
                    "ver", ((string[])(null)));
#line 783
this.ScenarioSetup(scenarioInfo);
#line 784
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndSQLBulkInsert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table135.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 785
   testRunner.And("\"WorkflowWithAssignAndSQLBulkInsert\" contains an Assign \"InsertData\" as", ((string)(null)), table135, "And ");
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Mapping",
                        "IsNullable",
                        "DataTypeName",
                        "MaxLength",
                        "IsAutoIncrement"});
            table136.AddRow(new string[] {
                        "Id",
                        "",
                        "false",
                        "int",
                        "",
                        "true"});
            table136.AddRow(new string[] {
                        "Name",
                        "[[rec().a]]",
                        "false",
                        "varchar",
                        "50",
                        "false"});
            table136.AddRow(new string[] {
                        "Email",
                        "Warewolf@dev2.co.za",
                        "false",
                        "varchar",
                        "50",
                        "false"});
#line 788
   testRunner.And("\"WorkflowWithAssignAndSQLBulkInsert\" contains an SQL Bulk Insert \"BulkInsert\" usi" +
                    "ng database \"testingDBSrc\" and table \"dbo.MailingList\" and KeepIdentity set \"fal" +
                    "se\" and Result set \"[[result]]\" as", ((string)(null)), table136, "And ");
#line 793
   testRunner.When("\"WorkflowWithAssignAndSQLBulkInsert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 794
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table137.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 795
   testRunner.And("the \'InsertData\' in WorkFlow \'WorkflowWithAssignAndSQLBulkInsert\' debug inputs as" +
                    "", ((string)(null)), table137, "And ");
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table138.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf"});
#line 798
   testRunner.And("the \'InsertData\' in Workflow \'WorkflowWithAssignAndSQLBulkInsert\' debug outputs a" +
                    "s", ((string)(null)), table138, "And ");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table139.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf",
                        "Name",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table139.AddRow(new string[] {
                        "2",
                        "Warewolf@dev2.co.za",
                        "Email",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table139.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "0",
                        "0",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES"});
#line 801
   testRunner.And("the \'BulkInsert\' in WorkFlow \'WorkflowWithAssignAndSQLBulkInsert\' debug inputs as" +
                    "", ((string)(null)), table139, "And ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table140.AddRow(new string[] {
                        "[[result]] = Success"});
#line 806
   testRunner.And("the \'BulkInsert\' in Workflow \'WorkflowWithAssignAndSQLBulkInsert\' debug outputs a" +
                    "s", ((string)(null)), table140, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools Assign and SQL Bulk Insert with negative Recordset I" +
            "ndex executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsAssignAndSQLBulkInsertWithNegativeRecordsetIndexExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools Assign and SQL Bulk Insert with negative Recordset I" +
                    "ndex executing against the server", ((string[])(null)));
#line 810
this.ScenarioSetup(scenarioInfo);
#line 811
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndSQLBulk\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table141.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 812
   testRunner.And("\"WorkflowWithAssignAndSQLBulk\" contains an Assign \"InsertData\" as", ((string)(null)), table141, "And ");
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Mapping",
                        "IsNullable",
                        "DataTypeName",
                        "MaxLength",
                        "IsAutoIncrement"});
            table142.AddRow(new string[] {
                        "Id",
                        "",
                        "false",
                        "int",
                        "",
                        "true"});
            table142.AddRow(new string[] {
                        "Name",
                        "[[rec(-1).a]]",
                        "false",
                        "varchar",
                        "50",
                        "false"});
            table142.AddRow(new string[] {
                        "Email",
                        "Warewolf@dev2.co.za",
                        "false",
                        "varchar",
                        "50",
                        "false"});
#line 815
   testRunner.And("\"WorkflowWithAssignAndSQLBulk\" contains an SQL Bulk Insert \"BulkInsert\" using dat" +
                    "abase \"testingDBSrc\" and table \"dbo.MailingList\" and KeepIdentity set \"false\" an" +
                    "d Result set \"[[result]]\" as", ((string)(null)), table142, "And ");
#line 820
   testRunner.When("\"WorkflowWithAssignAndSQLBulk\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 821
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table143.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 822
   testRunner.And("the \'InsertData\' in WorkFlow \'WorkflowWithAssignAndSQLBulk\' debug inputs as", ((string)(null)), table143, "And ");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table144.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf"});
#line 825
   testRunner.And("the \'InsertData\' in Workflow \'WorkflowWithAssignAndSQLBulk\' debug outputs as", ((string)(null)), table144, "And ");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table145.AddRow(new string[] {
                        "1",
                        "[[rec(-1).a]] =",
                        "Name",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table145.AddRow(new string[] {
                        "2",
                        "Warewolf@dev2.co.za",
                        "Email",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 828
   testRunner.And("the \'BulkInsert\' in WorkFlow \'WorkflowWithAssignAndSQLBulk\' debug inputs as", ((string)(null)), table145, "And ");
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table146.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 832
   testRunner.And("the \'BulkInsert\' in Workflow \'WorkflowWithAssignAndSQLBulk\' debug outputs as", ((string)(null)), table146, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Base Convert(Evaluating scalar variable inside va" +
            "riable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndBaseConvertEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Base Convert(Evaluating scalar variable inside va" +
                    "riable)executing against the server", ((string[])(null)));
#line 836
this.ScenarioSetup(scenarioInfo);
#line 837
  testRunner.Given("I have a workflow \"WorkflowWithAssignandBase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table147.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table147.AddRow(new string[] {
                        "[[b]]",
                        "12"});
#line 838
  testRunner.And("\"WorkflowWithAssignandBase\" contains an Assign \"Base Var\" as", ((string)(null)), table147, "And ");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table148.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Text",
                        "Base 64"});
#line 842
    testRunner.And("\"WorkflowWithAssignandBase\" contains Base convert \"Base\" as", ((string)(null)), table148, "And ");
#line 845
   testRunner.When("\"WorkflowWithAssignandBase\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 846
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table149.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table149.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12"});
#line 847
   testRunner.And("the \'Base Var\' in WorkFlow \'WorkflowWithAssignandBase\' debug inputs as", ((string)(null)), table149, "And ");
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table150.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table150.AddRow(new string[] {
                        "2",
                        "[[b]] = 12"});
#line 851
   testRunner.And("the \'Base Var\' in Workflow \'WorkflowWithAssignandBase\' debug outputs as", ((string)(null)), table150, "And ");
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table151.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = 12",
                        "Text",
                        "Base 64"});
#line 855
    testRunner.And("the \'Base\' in WorkFlow \'WorkflowWithAssignandBase\' debug inputs as", ((string)(null)), table151, "And ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table152.AddRow(new string[] {
                        "1",
                        "[[b]] = MTI="});
#line 858
      testRunner.And("the \'Base\' in Workflow \'WorkflowWithAssignandBase\' debug outputs as", ((string)(null)), table152, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Base Convert(Evaluating Recordset variable inside" +
            " variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndBaseConvertEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Base Convert(Evaluating Recordset variable inside" +
                    " variable)executing against the server", ((string[])(null)));
#line 863
this.ScenarioSetup(scenarioInfo);
#line 864
  testRunner.Given("I have a workflow \"WorkflowWithAssignandBasec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table153.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table153.AddRow(new string[] {
                        "[[rec().a]]",
                        "12"});
#line 865
  testRunner.And("\"WorkflowWithAssignandBasec\" contains an Assign \"BaseVar\" as", ((string)(null)), table153, "And ");
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table154.AddRow(new string[] {
                        "[[[[rs().a]]]]",
                        "Text",
                        "Base 64"});
#line 869
    testRunner.And("\"WorkflowWithAssignandBasec\" contains Base convert \"Base\" as", ((string)(null)), table154, "And ");
#line 872
   testRunner.When("\"WorkflowWithAssignandBasec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 873
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table155.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table155.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "12"});
#line 874
   testRunner.And("the \'BaseVar\' in WorkFlow \'WorkflowWithAssignandBasec\' debug inputs as", ((string)(null)), table155, "And ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table156.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = rec(1).a"});
            table156.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 12"});
#line 878
   testRunner.And("the \'BaseVar\' in Workflow \'WorkflowWithAssignandBasec\' debug outputs as", ((string)(null)), table156, "And ");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table157.AddRow(new string[] {
                        "1",
                        "[[[[rs(1).a]]]] = 12",
                        "Text",
                        "Base 64"});
#line 882
    testRunner.And("the \'Base\' in WorkFlow \'WorkflowWithAssignandBasec\' debug inputs as", ((string)(null)), table157, "And ");
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table158.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = MTI="});
#line 885
      testRunner.And("the \'Base\' in Workflow \'WorkflowWithAssignandBasec\' debug outputs as", ((string)(null)), table158, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Case Convert(Evaluating scalar variable inside va" +
            "riable)executing against the server.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndCaseConvertEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Case Convert(Evaluating scalar variable inside va" +
                    "riable)executing against the server.", ((string[])(null)));
#line 890
this.ScenarioSetup(scenarioInfo);
#line 891
  testRunner.Given("I have a workflow \"WorkflowWithAssignandcCse\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table159.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table159.AddRow(new string[] {
                        "[[b]]",
                        "warewolf"});
#line 892
  testRunner.And("\"WorkflowWithAssignandcCse\" contains an Assign \"Case Var\" as", ((string)(null)), table159, "And ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table160.AddRow(new string[] {
                        "[[[[a]]]]",
                        "UPPER"});
#line 896
    testRunner.And("\"WorkflowWithAssignandcCse\" contains case convert \"CaseConvert\" as", ((string)(null)), table160, "And ");
#line 899
   testRunner.When("\"WorkflowWithAssignandcCse\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 900
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table161.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table161.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "warewolf"});
#line 901
   testRunner.And("the \'Case Var\' in WorkFlow \'WorkflowWithAssignandcCse\' debug inputs as", ((string)(null)), table161, "And ");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table162.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table162.AddRow(new string[] {
                        "2",
                        "[[b]] = warewolf"});
#line 905
   testRunner.And("the \'Case Var\' in Workflow \'WorkflowWithAssignandcCse\' debug outputs as", ((string)(null)), table162, "And ");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table163.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = warewolf",
                        "UPPER"});
#line 909
  testRunner.And("the \'CaseConvert\' in WorkFlow \'WorkflowWithAssignandcCse\' debug inputs as", ((string)(null)), table163, "And ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table164.AddRow(new string[] {
                        "1",
                        "[[b]] = WAREWOLF"});
#line 912
   testRunner.And("the \'CaseConvert\' in Workflow \'WorkflowWithAssignandcCse\' debug outputs as", ((string)(null)), table164, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Case Convert(Evaluating Recordset variable inside" +
            " variable)executing against the server.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndCaseConvertEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Case Convert(Evaluating Recordset variable inside" +
                    " variable)executing against the server.", ((string[])(null)));
#line 916
this.ScenarioSetup(scenarioInfo);
#line 917
  testRunner.Given("I have a workflow \"WorkflowWithAssignandcCase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table165.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table165.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
#line 918
  testRunner.And("\"WorkflowWithAssignandcCase\" contains an Assign \"Case Var\" as", ((string)(null)), table165, "And ");
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table166.AddRow(new string[] {
                        "[[[[rs(1).a]]]]",
                        "UPPER"});
#line 922
    testRunner.And("\"WorkflowWithAssignandcCase\" contains case convert \"CaseConvert\" as", ((string)(null)), table166, "And ");
#line 925
   testRunner.When("\"WorkflowWithAssignandcCase\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 926
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table167.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table167.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "warewolf"});
#line 927
   testRunner.And("the \'Case Var\' in WorkFlow \'WorkflowWithAssignandcCase\' debug inputs as", ((string)(null)), table167, "And ");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table168.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = rec(1).a"});
            table168.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = warewolf"});
#line 931
   testRunner.And("the \'Case Var\' in Workflow \'WorkflowWithAssignandcCase\' debug outputs as", ((string)(null)), table168, "And ");
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table169.AddRow(new string[] {
                        "1",
                        "[[[[rs(1).a]]]] = warewolf",
                        "UPPER"});
#line 935
  testRunner.And("the \'CaseConvert\' in WorkFlow \'WorkflowWithAssignandcCase\' debug inputs as", ((string)(null)), table169, "And ");
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table170.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = WAREWOLF"});
#line 938
   testRunner.And("the \'CaseConvert\' in Workflow \'WorkflowWithAssignandcCase\' debug outputs as", ((string)(null)), table170, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Data Merge (Evaluating variables inside variable)" +
            "executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDataMergeEvaluatingVariablesInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Data Merge (Evaluating variables inside variable)" +
                    "executing against the server", ((string[])(null)));
#line 943
this.ScenarioSetup(scenarioInfo);
#line 944
  testRunner.Given("I have a workflow \"WorkflowWithAssignandData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table171.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table171.AddRow(new string[] {
                        "[[b]]",
                        "warewolf"});
            table171.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table171.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
#line 945
  testRunner.And("\"WorkflowWithAssignandData\" contains an Assign \"Datam\" as", ((string)(null)), table171, "And ");
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table172.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table172.AddRow(new string[] {
                        "[[[[rs().a]]]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 951
     testRunner.And("\"WorkflowWithAssignandData\" contains Data Merge \"Datamerge\" into \"[[result]]\" as", ((string)(null)), table172, "And ");
#line 955
  testRunner.When("\"WorkflowWithAssignandData\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 956
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table173.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table173.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "warewolf"});
            table173.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table173.AddRow(new string[] {
                        "4",
                        "[[rec().a]] =",
                        "test"});
#line 957
  testRunner.And("the \'Datam\' in WorkFlow \'WorkflowWithAssignandData\' debug inputs as", ((string)(null)), table173, "And ");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table174.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table174.AddRow(new string[] {
                        "2",
                        "[[b]] = warewolf"});
            table174.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]] = rec(1).a"});
            table174.AddRow(new string[] {
                        "4",
                        "[[rec(1).a]] = test"});
#line 963
  testRunner.And("the \'Datam\' in Workflow \'WorkflowWithAssignandData\' debug outputs as", ((string)(null)), table174, "And ");
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table175.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table175.AddRow(new string[] {
                        "2",
                        "[[[[rs(1).a]]]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 969
  testRunner.And("the \'Datamerge\' in WorkFlow \'WorkflowWithAssignandData\' debug inputs as", ((string)(null)), table175, "And ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table176.AddRow(new string[] {
                        "1",
                        "[[result]] = warewolftest"});
#line 973
   testRunner.And("the \'Datamerge\' in Workflow \'WorkflowWithAssignandData\' debug outputs as", ((string)(null)), table176, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Find Index(Evaluating scalar variable inside vari" +
            "able)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFindIndexEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Find Index(Evaluating scalar variable inside vari" +
                    "able)executing against the server", ((string[])(null)));
#line 977
this.ScenarioSetup(scenarioInfo);
#line 978
  testRunner.Given("I have a workflow \"WorkflowWithAssignandFindIndex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table177.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table177.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 979
  testRunner.And("\"WorkflowWithAssignandFindIndex\" contains an Assign \"IndexVal\" as", ((string)(null)), table177, "And ");
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table178.AddRow(new string[] {
                        "[[[[a]]]]",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 983
     testRunner.And("\"WorkflowWithAssignandFindIndex\" contains Find Index \"Indexchar\" into \"[[indexRes" +
                    "ult]]\" as", ((string)(null)), table178, "And ");
#line 986
   testRunner.When("\"WorkflowWithAssignandFindIndex\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 987
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table179.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table179.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 988
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandFindIndex\' debug inputs as", ((string)(null)), table179, "And ");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table180.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table180.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 992
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandFindIndex\' debug outputs as", ((string)(null)), table180, "And ");
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table181.AddRow(new string[] {
                        "[[[[a]]]] = test",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 996
    testRunner.And("the \'Indexchar\' in WorkFlow \'WorkflowWithAssignandFindIndex\' debug inputs as", ((string)(null)), table181, "And ");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table182.AddRow(new string[] {
                        "[[indexResult]] = 3"});
#line 999
   testRunner.And("the \'Indexchar\' in Workflow \'WorkflowWithAssignandFindIndex\' debug outputs as", ((string)(null)), table182, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Find Index(Evaluating recordset variable inside v" +
            "ariable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFindIndexEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Find Index(Evaluating recordset variable inside v" +
                    "ariable)executing against the server", ((string[])(null)));
#line 1004
this.ScenarioSetup(scenarioInfo);
#line 1005
  testRunner.Given("I have a workflow \"WorkflowWithAssignandFindIndex1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table183.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table183.AddRow(new string[] {
                        "[[new().a]]",
                        "test"});
#line 1006
  testRunner.And("\"WorkflowWithAssignandFindIndex1\" contains an Assign \"Index Val\" as", ((string)(null)), table183, "And ");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table184.AddRow(new string[] {
                        "[[[[rec().a]]]]",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 1010
     testRunner.And("\"WorkflowWithAssignandFindIndex1\" contains Find Index \"Index char\" into \"[[indexR" +
                    "esult]]\" as", ((string)(null)), table184, "And ");
#line 1013
   testRunner.When("\"WorkflowWithAssignandFindIndex1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1014
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table185.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table185.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "test"});
#line 1015
   testRunner.And("the \'Index Val\' in WorkFlow \'WorkflowWithAssignandFindIndex1\' debug inputs as", ((string)(null)), table185, "And ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table186.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table186.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = test"});
#line 1019
   testRunner.And("the \'Index Val\' in Workflow \'WorkflowWithAssignandFindIndex1\' debug outputs as", ((string)(null)), table186, "And ");
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table187.AddRow(new string[] {
                        "[[[[rec(1).a]]]] = test",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 1023
    testRunner.And("the \'Index char\' in WorkFlow \'WorkflowWithAssignandFindIndex1\' debug inputs as", ((string)(null)), table187, "And ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table188.AddRow(new string[] {
                        "[[indexResult]] = 3"});
#line 1026
   testRunner.And("the \'Index char\' in Workflow \'WorkflowWithAssignandFindIndex1\' debug outputs as", ((string)(null)), table188, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating scalar variable inside variabl" +
            "e)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating scalar variable inside variabl" +
                    "e)executing against the server", ((string[])(null)));
#line 1030
this.ScenarioSetup(scenarioInfo);
#line 1031
  testRunner.Given("I have a workflow \"WorkflowWithAssignandReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table189.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table189.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 1032
  testRunner.And("\"WorkflowWithAssignandReplace\" contains an Assign \"IndexVal\" as", ((string)(null)), table189, "And ");
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table190.AddRow(new string[] {
                        "[[[[a]]]]",
                        "s",
                        "REPLACE"});
#line 1036
      testRunner.And("\"WorkflowWithAssignandReplace\" contains Replace \"Replac\" into \"[[replaceResult]]\"" +
                    " as", ((string)(null)), table190, "And ");
#line 1039
   testRunner.When("\"WorkflowWithAssignandReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1040
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table191.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table191.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 1041
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandReplace\' debug inputs as", ((string)(null)), table191, "And ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table192.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table192.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 1045
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandReplace\' debug outputs as", ((string)(null)), table192, "And ");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table193.AddRow(new string[] {
                        "[[[[a]]]] = test",
                        "s",
                        "REPLACE"});
#line 1049
   testRunner.And("the \'Replac\' in WorkFlow \'WorkflowWithAssignandReplace\' debug inputs as", ((string)(null)), table193, "And ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table194.AddRow(new string[] {
                        "[[b]] = teREPLACEt"});
            table194.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 1052
     testRunner.And("the \'Replac\' in Workflow \'WorkflowWithAssignandReplace\' debug outputs as", ((string)(null)), table194, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating Recordset variable inside vari" +
            "able)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating Recordset variable inside vari" +
                    "able)executing against the server", ((string[])(null)));
#line 1058
this.ScenarioSetup(scenarioInfo);
#line 1059
  testRunner.Given("I have a workflow \"WorkflowWithAssignandReplacebyrec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table195.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table195.AddRow(new string[] {
                        "[[new().a]]",
                        "test"});
#line 1060
  testRunner.And("\"WorkflowWithAssignandReplacebyrec\" contains an Assign \"Vals\" as", ((string)(null)), table195, "And ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table196.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "s",
                        "REPLACE"});
#line 1064
      testRunner.And("\"WorkflowWithAssignandReplacebyrec\" contains Replace \"Rep\" into \"[[replaceResult]" +
                    "]\" as", ((string)(null)), table196, "And ");
#line 1067
   testRunner.When("\"WorkflowWithAssignandReplacebyrec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1068
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table197.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table197.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "test"});
#line 1069
   testRunner.And("the \'Vals\' in WorkFlow \'WorkflowWithAssignandReplacebyrec\' debug inputs as", ((string)(null)), table197, "And ");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table198.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table198.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = test"});
#line 1073
   testRunner.And("the \'Vals\' in Workflow \'WorkflowWithAssignandReplacebyrec\' debug outputs as", ((string)(null)), table198, "And ");
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table199.AddRow(new string[] {
                        "[[[[rec(1).a]]]] = test",
                        "s",
                        "REPLACE"});
#line 1077
   testRunner.And("the \'Rep\' in WorkFlow \'WorkflowWithAssignandReplacebyrec\' debug inputs as", ((string)(null)), table199, "And ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table200.AddRow(new string[] {
                        "[[new(1).a]] = teREPLACEt"});
            table200.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 1080
     testRunner.And("the \'Rep\' in Workflow \'WorkflowWithAssignandReplacebyrec\' debug outputs as", ((string)(null)), table200, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating scalar variable inside " +
            "variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating scalar variable inside " +
                    "variable)executing against the server", ((string[])(null)));
#line 1087
this.ScenarioSetup(scenarioInfo);
#line 1088
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table201.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table201.AddRow(new string[] {
                        "[[b]]",
                        "12.3412"});
#line 1089
   testRunner.And("\"WorkflowWithAssignandFormat\" contains an Assign \"IndexVal\" as", ((string)(null)), table201, "And ");
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table202.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 1093
      testRunner.And("\"WorkflowWithAssignandFormat\" contains Format Number \"Fnumber\" as", ((string)(null)), table202, "And ");
#line 1096
   testRunner.When("\"WorkflowWithAssignandFormat\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1097
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table203.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table203.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12.3412"});
#line 1098
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandFormat\' debug inputs as", ((string)(null)), table203, "And ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table204.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table204.AddRow(new string[] {
                        "2",
                        "[[b]] = 12.3412"});
#line 1102
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandFormat\' debug outputs as", ((string)(null)), table204, "And ");
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table205.AddRow(new string[] {
                        "[[[[a]]]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 1106
   testRunner.And("the \'Fnumber\' in WorkFlow \'WorkflowWithAssignandFormat\' debug inputs as", ((string)(null)), table205, "And ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table206.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 1109
   testRunner.And("the \'Fnumber\' in Workflow \'WorkflowWithAssignandFormat\' debug outputs as", ((string)(null)), table206, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating Recordset variable insi" +
            "de variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating Recordset variable insi" +
                    "de variable)executing against the server", ((string[])(null)));
#line 1114
this.ScenarioSetup(scenarioInfo);
#line 1115
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatn\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table207.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table207.AddRow(new string[] {
                        "[[new().a]]",
                        "12.3412"});
#line 1116
   testRunner.And("\"WorkflowWithAssignandFormatn\" contains an Assign \"IndVal\" as", ((string)(null)), table207, "And ");
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table208.AddRow(new string[] {
                        "[[[[rec().a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 1120
      testRunner.And("\"WorkflowWithAssignandFormatn\" contains Format Number \"Fnumb\" as", ((string)(null)), table208, "And ");
#line 1123
   testRunner.When("\"WorkflowWithAssignandFormatn\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1124
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table209.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table209.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "12.3412"});
#line 1125
   testRunner.And("the \'IndVal\' in WorkFlow \'WorkflowWithAssignandFormatn\' debug inputs as", ((string)(null)), table209, "And ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table210.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table210.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = 12.3412"});
#line 1129
   testRunner.And("the \'IndVal\' in Workflow \'WorkflowWithAssignandFormatn\' debug outputs as", ((string)(null)), table210, "And ");
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table211.AddRow(new string[] {
                        "[[[[rec(1).a]]]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 1133
   testRunner.And("the \'Fnumb\' in WorkFlow \'WorkflowWithAssignandFormatn\' debug inputs as", ((string)(null)), table211, "And ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table212.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 1136
   testRunner.And("the \'Fnumb\' in Workflow \'WorkflowWithAssignandFormatn\' debug outputs as", ((string)(null)), table212, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Random(Evaluating recordset variable inside varia" +
            "ble)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndRandomEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Random(Evaluating recordset variable inside varia" +
                    "ble)executing against the server", ((string[])(null)));
#line 1142
this.ScenarioSetup(scenarioInfo);
#line 1143
  testRunner.Given("I have a workflow \"WorkflowWithAssignandRandom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table213.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table213.AddRow(new string[] {
                        "[[b]]",
                        "10"});
            table213.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table213.AddRow(new string[] {
                        "[[new().a]]",
                        "20"});
#line 1144
  testRunner.And("\"WorkflowWithAssignandRandom\" contains an Assign \"Valforrandno\" as", ((string)(null)), table213, "And ");
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table214.AddRow(new string[] {
                        "Numbers",
                        "[[[[a]]]]",
                        "[[[[rec().a]]]]",
                        "[[ranresult]]"});
#line 1150
    testRunner.And("\"WorkflowWithAssignandRandom\" contains Random \"Rand\" as", ((string)(null)), table214, "And ");
#line 1153
   testRunner.When("\"WorkflowWithAssignandRandom\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1154
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table215.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table215.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10"});
            table215.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table215.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "20"});
#line 1155
   testRunner.And("the \'Valforrandno\' in WorkFlow \'WorkflowWithAssignandRandom\' debug inputs as", ((string)(null)), table215, "And ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table216.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table216.AddRow(new string[] {
                        "2",
                        "[[b]] = 10"});
            table216.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table216.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] = 20"});
#line 1161
   testRunner.And("the \'Valforrandno\' in Workflow \'WorkflowWithAssignandRandom\' debug outputs as", ((string)(null)), table216, "And ");
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table217.AddRow(new string[] {
                        "Numbers",
                        "[[[[a]]]] = 10",
                        "[[[[rec(1).a]]]] = 20"});
#line 1167
   testRunner.And("the \'Rand\' in WorkFlow \'WorkflowWithAssignandRandom\' debug inputs as", ((string)(null)), table217, "And ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table218.AddRow(new string[] {
                        "[[ranresult]] = Int32"});
#line 1170
   testRunner.And("the \'Rand\' in Workflow \'WorkflowWithAssignandRandom\' debug outputs as", ((string)(null)), table218, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Date and Time(Evaluating recordset variable insid" +
            "e variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDateAndTimeEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Date and Time(Evaluating recordset variable insid" +
                    "e variable)executing against the server", ((string[])(null)));
#line 1175
this.ScenarioSetup(scenarioInfo);
#line 1176
  testRunner.Given("I have a workflow \"WorkflowWithAssignandDateTimetool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table219.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table219.AddRow(new string[] {
                        "[[b]]",
                        "01/02/2014"});
            table219.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table219.AddRow(new string[] {
                        "[[new().a]]",
                        "dd/mm/yyyy"});
#line 1177
  testRunner.And("\"WorkflowWithAssignandDateTimetool\" contains an Assign \"Dateandtime\" as", ((string)(null)), table219, "And ");
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table220.AddRow(new string[] {
                        "[[[[a]]]]",
                        "[[[[rec(1).a]]]]",
                        "1",
                        "dd/mm/yyyy",
                        "[[res]]"});
#line 1183
   testRunner.And("\"WorkflowWithAssignandDateTimetool\" contains Date and Time \"AddDate\" as", ((string)(null)), table220, "And ");
#line 1186
   testRunner.When("\"WorkflowWithAssignandDateTimetool\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1187
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table221.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table221.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "01/02/2014"});
            table221.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table221.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "dd/mm/yyyy"});
#line 1188
   testRunner.And("the \'Dateandtime\' in WorkFlow \'WorkflowWithAssignandDateTimetool\' debug inputs as" +
                    "", ((string)(null)), table221, "And ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table222.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table222.AddRow(new string[] {
                        "2",
                        "[[b]] = 01/02/2014"});
            table222.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table222.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] =  dd/mm/yyyy"});
#line 1194
    testRunner.And("the \'Dateandtime\' in Workflow \'WorkflowWithAssignandDateTimetool\' debug outputs a" +
                    "s", ((string)(null)), table222, "And ");
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table223.AddRow(new string[] {
                        "[[[[a]]]] = 01/02/2014",
                        "[[[[rec(1).a]]]] = dd/mm/yyyy",
                        "Years",
                        "1",
                        "dd/mm/yyyy"});
#line 1200
    testRunner.And("the \'AddDate\' in WorkFlow \'WorkflowWithAssignandDateTimetool\' debug inputs as", ((string)(null)), table223, "And ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table224.AddRow(new string[] {
                        "[[res]] = 01/02/2015"});
#line 1203
    testRunner.And("the \'AddDate\' in Workflow \'WorkflowWithAssignandDateTimetool\' debug outputs as", ((string)(null)), table224, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and DateTimeDiff(Evaluating recordset variable inside" +
            " variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDateTimeDiffEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and DateTimeDiff(Evaluating recordset variable inside" +
                    " variable)executing against the server", ((string[])(null)));
#line 1209
this.ScenarioSetup(scenarioInfo);
#line 1210
   testRunner.Given("I have a workflow \"WorkflowWithAssignandDateTimeDiff\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table225.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table225.AddRow(new string[] {
                        "[[b]]",
                        "01/02/2016"});
            table225.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table225.AddRow(new string[] {
                        "[[new().a]]",
                        "01/02/2014"});
#line 1211
   testRunner.And("\"WorkflowWithAssignandDateTimeDiff\" contains an Assign \"Dateandtime\" as", ((string)(null)), table225, "And ");
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table226.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "[[[[a]]]]",
                        "dd/mm/yyyy",
                        "Years",
                        "[[result]]"});
#line 1217
   testRunner.And("\"WorkflowWithAssignandDateTimeDiff\" contains Date and Time Difference \"DateTimedi" +
                    "f\" as", ((string)(null)), table226, "And ");
#line 1220
    testRunner.When("\"WorkflowWithAssignandDateTimeDiff\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1221
    testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table227.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table227.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "01/02/2016"});
            table227.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table227.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "01/02/2014"});
#line 1222
    testRunner.And("the \'Dateandtime\' in WorkFlow \'WorkflowWithAssignandDateTimeDiff\' debug inputs as" +
                    "", ((string)(null)), table227, "And ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table228.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table228.AddRow(new string[] {
                        "2",
                        "[[b]] = 01/02/2016"});
            table228.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table228.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] = 01/02/2014"});
#line 1228
    testRunner.And("the \'Dateandtime\' in Workflow \'WorkflowWithAssignandDateTimeDiff\' debug outputs a" +
                    "s", ((string)(null)), table228, "And ");
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table229.AddRow(new string[] {
                        "[[[[rec(1).a]]]] = 01/02/2014",
                        "[[[[a]]]] = 01/02/2016",
                        "dd/mm/yyyy",
                        "Years"});
#line 1234
    testRunner.And("the \'DateTimedif\' in WorkFlow \'WorkflowWithAssignandDateTimeDiff\' debug inputs as" +
                    "", ((string)(null)), table229, "And ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table230.AddRow(new string[] {
                        "[[result]] = 2"});
#line 1237
    testRunner.And("the \'DateTimedif\' in Workflow \'WorkflowWithAssignandDateTimeDiff\' debug outputs a" +
                    "s", ((string)(null)), table230, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating variable inside a varable)exec" +
            "uting against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingVariableInsideAVarableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating variable inside a varable)exec" +
                    "uting against the server", ((string[])(null)));
#line 1241
this.ScenarioSetup(scenarioInfo);
#line 1242
  testRunner.Given("I have a workflow \"WorkflowWithAssignReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table231.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table231.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 1243
  testRunner.And("\"WorkflowWithAssignReplace\" contains an Assign \"IndexVal\" as", ((string)(null)), table231, "And ");
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table232.AddRow(new string[] {
                        "[[[[a]]]]",
                        "s",
                        "REPLACE"});
#line 1247
      testRunner.And("\"WorkflowWithAssignReplace\" contains Replace \"Replac\" into \"[[replaceResult]]\" as" +
                    "", ((string)(null)), table232, "And ");
#line 1250
   testRunner.When("\"WorkflowWithAssignReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1251
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table233.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table233.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 1252
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignReplace\' debug inputs as", ((string)(null)), table233, "And ");
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table234.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table234.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 1256
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignReplace\' debug outputs as", ((string)(null)), table234, "And ");
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table235.AddRow(new string[] {
                        "[[[[a]]]] = test",
                        "s",
                        "REPLACE"});
#line 1260
   testRunner.And("the \'Replac\' in WorkFlow \'WorkflowWithAssignReplace\' debug inputs as", ((string)(null)), table235, "And ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table236.AddRow(new string[] {
                        "[[b]] = teREPLACEt"});
            table236.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 1263
     testRunner.And("the \'Replac\' in Workflow \'WorkflowWithAssignReplace\' debug outputs as", ((string)(null)), table236, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating variable inside variabl" +
            "e in format number tool)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingVariableInsideVariableInFormatNumberToolExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating variable inside variabl" +
                    "e in format number tool)executing against the server", ((string[])(null)));
#line 1268
this.ScenarioSetup(scenarioInfo);
#line 1269
      testRunner.Given("I have a workflow \"WorkflowAssignandFormat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table237.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table237.AddRow(new string[] {
                        "[[b]]",
                        "12.3412"});
#line 1270
   testRunner.And("\"WorkflowAssignandFormat\" contains an Assign \"IndexVal1\" as", ((string)(null)), table237, "And ");
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table238.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 1274
      testRunner.And("\"WorkflowAssignandFormat\" contains Format Number \"Fnumber1\" as", ((string)(null)), table238, "And ");
#line 1277
   testRunner.When("\"WorkflowAssignandFormat\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1278
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table239.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table239.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12.3412"});
#line 1279
   testRunner.And("the \'IndexVal1\' in WorkFlow \'WorkflowAssignandFormat\' debug inputs as", ((string)(null)), table239, "And ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table240.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table240.AddRow(new string[] {
                        "2",
                        "[[b]] = 12.3412"});
#line 1283
   testRunner.And("the \'IndexVal1\' in Workflow \'WorkflowAssignandFormat\' debug outputs as", ((string)(null)), table240, "And ");
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table241.AddRow(new string[] {
                        "[[[[a]]]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 1287
   testRunner.And("the \'Fnumber1\' in WorkFlow \'WorkflowAssignandFormat\' debug inputs as", ((string)(null)), table241, "And ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table242.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 1290
   testRunner.And("the \'Fnumber1\' in Workflow \'WorkflowAssignandFormat\' debug outputs as", ((string)(null)), table242, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign DataMerge and DataSplit(Evaluating recordset variable" +
            " as index variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignDataMergeAndDataSplitEvaluatingRecordsetVariableAsIndexVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign DataMerge and DataSplit(Evaluating recordset variable" +
                    " as index variable)executing against the server", ((string[])(null)));
#line 1294
this.ScenarioSetup(scenarioInfo);
#line 1295
  testRunner.Given("I have a workflow \"WorkflowWithAssignDatamergeandSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table243.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table243.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table243.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "warewolf"});
            table243.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
#line 1296
  testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains an Assign \"Data\" as", ((string)(null)), table243, "And ");
#line hidden
            TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table244.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table244.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 1302
      testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains Data Merge \"Merge\" into \"[[result]" +
                    "]\" as", ((string)(null)), table244, "And ");
#line hidden
            TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table245.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[d]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table245.AddRow(new string[] {
                        "",
                        "[[c]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1306
   testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table245, "And ");
#line 1310
   testRunner.When("\"WorkflowWithAssignDatamergeandSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1311
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table246.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table246.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table246.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "warewolf"});
            table246.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "test"});
#line 1312
   testRunner.And("the \'Data\' in WorkFlow \'WorkflowWithAssignDatamergeandSplit\' debug inputs as", ((string)(null)), table246, "And ");
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table247.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table247.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table247.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = warewolf"});
            table247.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] = test"});
#line 1318
   testRunner.And("the \'Data\' in Workflow \'WorkflowWithAssignDatamergeandSplit\' debug outputs as", ((string)(null)), table247, "And ");
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table248.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table248.AddRow(new string[] {
                        "2",
                        "[[a]] = 1",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 1324
      testRunner.And("the \'Merge\' in WorkFlow \'WorkflowWithAssignDatamergeandSplit\' debug inputs as", ((string)(null)), table248, "And ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table249.AddRow(new string[] {
                        "[[result]] = warewolf1"});
#line 1328
   testRunner.And("the \'Merge\' in Workflow \'WorkflowWithAssignDatamergeandSplit\' debug outputs as", ((string)(null)), table249, "And ");
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table250.AddRow(new string[] {
                        "[[rec(1).a]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[d]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table250.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[c]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1331
   testRunner.And("the \'DataSplit\' in WorkFlow \'WorkflowWithAssignDatamergeandSplit\' debug inputs as" +
                    "", ((string)(null)), table250, "And ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table251.AddRow(new string[] {
                        "1",
                        "[[d]] = ware"});
            table251.AddRow(new string[] {
                        "2",
                        "[[c]] = wolf"});
#line 1335
   testRunner.And("the \'DataSplit\' in Workflow \'WorkflowWithAssignDatamergeandSplit\' debug outputs a" +
                    "s", ((string)(null)), table251, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with 2 Assign tools evaluating recordset index variables.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWith2AssignToolsEvaluatingRecordsetIndexVariables_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with 2 Assign tools evaluating recordset index variables.", ((string[])(null)));
#line 1398
this.ScenarioSetup(scenarioInfo);
#line 1399
  testRunner.Given("I have a workflow \"WorkflowWithAssignandAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table252.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table252.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "2"});
            table252.AddRow(new string[] {
                        "[[index(1).a]]",
                        "2"});
#line 1400
  testRunner.And("\"WorkflowWithAssignandAssign\" contains an Assign \"Data1\" as", ((string)(null)), table252, "And ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table253.AddRow(new string[] {
                        "[[new([[a]]).a]]",
                        "test"});
            table253.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "warewolf"});
#line 1405
    testRunner.And("\"WorkflowWithAssignandAssign\" contains an Assign \"Data2\" as", ((string)(null)), table253, "And ");
#line 1409
   testRunner.When("\"WorkflowWithAssignandAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1410
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table254.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table254.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "2"});
            table254.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] =",
                        "2"});
#line 1411
   testRunner.And("the \'Data1\' in WorkFlow \'WorkflowWithAssignandAssign\' debug inputs as", ((string)(null)), table254, "And ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table255.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table255.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 2"});
            table255.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] = 2"});
#line 1416
   testRunner.And("the \'Data1\' in Workflow \'WorkflowWithAssignandAssign\' debug outputs as", ((string)(null)), table255, "And ");
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table256.AddRow(new string[] {
                        "1",
                        "[[new(1).a]] =",
                        "test"});
            table256.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "warewolf"});
#line 1421
    testRunner.And("the \'Data2\' in WorkFlow \'WorkflowWithAssignandAssign\' debug inputs as", ((string)(null)), table256, "And ");
#line hidden
            TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table257.AddRow(new string[] {
                        "1",
                        "[[new(1).a]] = test"});
            table257.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf"});
#line 1425
   testRunner.And("the \'Data2\' in Workflow \'WorkflowWithAssignandAssign\' debug outputs as", ((string)(null)), table257, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign recordset calculate field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignRecordsetCalculateField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign recordset calculate field", ((string[])(null)));
#line 1430
this.ScenarioSetup(scenarioInfo);
#line 1431
      testRunner.Given("I have a workflow \"WFWithAssignHasCalculate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table258.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table258.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table258.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[a]]"});
            table258.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "[[b]]"});
            table258.AddRow(new string[] {
                        "[[rec(1).c]]",
                        "=[[rec(1).a]]+[[rec(1).b]]"});
#line 1432
   testRunner.And("\"WFWithAssignHasCalculate\" contains an Assign \"values1\" as", ((string)(null)), table258, "And ");
#line 1439
   testRunner.When("\"WFWithAssignHasCalculate\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1440
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table259.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table259.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table259.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "[[a]] = 1"});
            table259.AddRow(new string[] {
                        "4",
                        "[[rec(1).b]] =",
                        "[[b]] = 2"});
            table259.AddRow(new string[] {
                        "5",
                        "[[rec(1).c]] =",
                        "=[[rec(1).a]]+[[rec(1).b]] ==1+2"});
#line 1441
   testRunner.And("the \'values1\' in WorkFlow \'WFWithAssignHasCalculate\' debug inputs as", ((string)(null)), table259, "And ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table260.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table260.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table260.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = 1"});
            table260.AddRow(new string[] {
                        "4",
                        "[[rec(1).b]] = 2"});
            table260.AddRow(new string[] {
                        "5",
                        "[[rec(1).c]] = 3"});
#line 1448
   testRunner.And("the \'values1\' in Workflow \'WFWithAssignHasCalculate\' debug outputs as", ((string)(null)), table260, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Calculate", ((string[])(null)));
#line 1456
this.ScenarioSetup(scenarioInfo);
#line 1457
      testRunner.Given("I have a workflow \"WFWithAssignCalculateindexrecordset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table261.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table261.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "2"});
            table261.AddRow(new string[] {
                        "[[index(1).a]]",
                        "1"});
            table261.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "6"});
#line 1458
   testRunner.And("\"WFWithAssignCalculateindexrecordset\" contains an Assign \"values1\" as", ((string)(null)), table261, "And ");
#line 1464
   testRunner.And("\"WFWithAssignCalculateindexrecordset\" contains Calculate \"Calculate1\" with formul" +
                    "a \"[[rec([[index(1).a]]).a]]+[[a]]\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1465
   testRunner.When("\"WFWithAssignCalculateindexrecordset\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1466
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table262.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table262.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "2"});
            table262.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] =",
                        "1"});
            table262.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "6"});
#line 1467
   testRunner.And("the \'values1\' in WorkFlow \'WFWithAssignCalculateindexrecordset\' debug inputs as", ((string)(null)), table262, "And ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table263.AddRow(new string[] {
                        "1",
                        "[[a]]         =  1"});
            table263.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]  =  2"});
            table263.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] = 1"});
            table263.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]]   = 6"});
#line 1473
  testRunner.And("the \'values1\' in Workflow \'WFWithAssignCalculateindexrecordset\' debug outputs as", ((string)(null)), table263, "And ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table264.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]+[[a]] = 2+1"});
#line 1479
   testRunner.And("the \'Calculate1\' in WorkFlow \'WFWithAssignCalculateindexrecordset\' debug inputs a" +
                    "s", ((string)(null)), table264, "And ");
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table265.AddRow(new string[] {
                        "[[result]] = 3"});
#line 1482
      testRunner.And("the \'Calculate1\' in Workflow \'WFWithAssignCalculateindexrecordset\' debug outputs " +
                    "as", ((string)(null)), table265, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Calculate multiple recursion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCalculateMultipleRecursion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Calculate multiple recursion", ((string[])(null)));
#line 1486
this.ScenarioSetup(scenarioInfo);
#line 1487
      testRunner.Given("I have a workflow \"WFAssignCalculateRecursion\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table266.AddRow(new string[] {
                        "[[b]]",
                        "rec(1).b"});
            table266.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "b"});
            table266.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "1"});
#line 1488
   testRunner.And("\"WFAssignCalculateRecursion\" contains an Assign \"values1\" as", ((string)(null)), table266, "And ");
#line 1493
   testRunner.And("\"WFAssignCalculateRecursion\" contains Calculate \"Calculate1\" with formula \"[[[[[[" +
                    "rec(1).a]]]]]]+1\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1494
   testRunner.When("\"WFAssignCalculateRecursion\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1495
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table267.AddRow(new string[] {
                        "1",
                        "[[b]] =",
                        "rec(1).b"});
            table267.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "b"});
            table267.AddRow(new string[] {
                        "3",
                        "[[rec(1).b]] =",
                        "1"});
#line 1496
   testRunner.And("the \'values1\' in WorkFlow \'WFAssignCalculateRecursion\' debug inputs as", ((string)(null)), table267, "And ");
#line hidden
            TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table268.AddRow(new string[] {
                        "1",
                        "[[b]]         =  rec(1).b"});
            table268.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]  =  b"});
            table268.AddRow(new string[] {
                        "3",
                        "[[rec(1).b]]   = 1"});
#line 1501
  testRunner.And("the \'values1\' in Workflow \'WFAssignCalculateRecursion\' debug outputs as", ((string)(null)), table268, "And ");
#line hidden
            TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table269.AddRow(new string[] {
                        "[[[[[[rec(1).a]]]]]]+1 = 1+1"});
#line 1506
   testRunner.And("the \'Calculate1\' in WorkFlow \'WFAssignCalculateRecursion\' debug inputs as", ((string)(null)), table269, "And ");
#line hidden
            TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table270.AddRow(new string[] {
                        "[[result]] = 2"});
#line 1509
      testRunner.And("the \'Calculate1\' in Workflow \'WFAssignCalculateRecursion\' debug outputs as", ((string)(null)), table270, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Calculate", ((string[])(null)));
#line 1515
this.ScenarioSetup(scenarioInfo);
#line 1516
      testRunner.Given("I have a workflow \"WFAssign&Calculate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table271.AddRow(new string[] {
                        "[[Honda().a1]]",
                        "1"});
            table271.AddRow(new string[] {
                        "[[Honda().a2]]",
                        "2"});
            table271.AddRow(new string[] {
                        "[[Honda().a3]]",
                        "3"});
            table271.AddRow(new string[] {
                        "[[Benz().a1]]",
                        "10"});
            table271.AddRow(new string[] {
                        "[[Benz().a2]]",
                        "20"});
            table271.AddRow(new string[] {
                        "[[Benz().a3]]",
                        "30"});
#line 1517
   testRunner.And("\"WFAssign&Calculate\" contains an Assign \"values1\" as", ((string)(null)), table271, "And ");
#line 1525
   testRunner.And("\"WFAssign&Calculate\" contains Calculate \"Calculate1\" with formula \"sum([[Benz(*)]" +
                    "])+sum([[Honda(*)]])\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1526
   testRunner.When("\"WFAssign&Calculate\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1527
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table272.AddRow(new string[] {
                        "1",
                        "[[Honda().a1]] =",
                        "1"});
            table272.AddRow(new string[] {
                        "2",
                        "[[Honda().a2]] =",
                        "2"});
            table272.AddRow(new string[] {
                        "3",
                        "[[Honda().a3]] =",
                        "3"});
            table272.AddRow(new string[] {
                        "4",
                        "[[Benz().a1]]  =",
                        "10"});
            table272.AddRow(new string[] {
                        "5",
                        "[[Benz().a2]]  =",
                        "20"});
            table272.AddRow(new string[] {
                        "6",
                        "[[Benz().a3]]  =",
                        "30"});
#line 1528
   testRunner.And("the \'values1\' in WorkFlow \'WFAssign&Calculate\' debug inputs as", ((string)(null)), table272, "And ");
#line hidden
            TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table273.AddRow(new string[] {
                        "1",
                        "[[Honda(1).a1]] =  1"});
            table273.AddRow(new string[] {
                        "2",
                        "[[Honda(1).a2]] =  2"});
            table273.AddRow(new string[] {
                        "3",
                        "[[Honda(1).a3]] =  3"});
            table273.AddRow(new string[] {
                        "4",
                        "[[Benz(1).a1]]  =  10"});
            table273.AddRow(new string[] {
                        "5",
                        "[[Benz(1).a2]]  =  20"});
            table273.AddRow(new string[] {
                        "6",
                        "[[Benz(1).a3]]  =  30"});
#line 1536
  testRunner.And("the \'values1\' in Workflow \'WFAssign&Calculate\' debug outputs as", ((string)(null)), table273, "And ");
#line hidden
            TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table274.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(10,20,30)+sum(1,2,3)"});
#line 1544
   testRunner.And("the \'Calculate1\' in WorkFlow \'WFAssign&Calculate\' debug inputs as", ((string)(null)), table274, "And ");
#line hidden
            TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table275.AddRow(new string[] {
                        "[[result]] = 66"});
#line 1547
      testRunner.And("the \'Calculate1\' in Workflow \'WFAssign&Calculate\' debug outputs as", ((string)(null)), table275, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and ForEach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndForEach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and ForEach", ((string[])(null)));
#line 1552
this.ScenarioSetup(scenarioInfo);
#line 1553
     testRunner.Given("I have a workflow \"WFWithForEach\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table276.AddRow(new string[] {
                        "[[Warewolf]]",
                        "bob"});
#line 1554
  testRunner.And("\"WFWithForEach\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table276, "And ");
#line 1557
     testRunner.And("\"WFWithForEach\" contains a Foreach \"ForEachTest\" as \"NumOfExecution\" executions \"" +
                    "3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table277.AddRow(new string[] {
                        "a",
                        "[[Warewolf]]",
                        "",
                        ""});
#line 1558
  testRunner.And("\"ForEachTest\" contains workflow \"11714Nested\" with mapping as", ((string)(null)), table277, "And ");
#line 1561
  testRunner.When("\"WFWithForEach\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1562
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table278.AddRow(new string[] {
                        "No. of Executes",
                        "3"});
#line 1563
  testRunner.And("the \'ForEachTest\' in WorkFlow \'WFWithForEach\' debug inputs as", ((string)(null)), table278, "And ");
#line 1566
  testRunner.And("the \'ForEachTest\' in WorkFlow \'WFWithForEach\' has  \"3\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table279.AddRow(new string[] {
                        "[[a]]",
                        "warewolf"});
#line 1567
  testRunner.And("each \"11714Nested\" contains debug outputs for \"Assign (1)\" as", ((string)(null)), table279, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach which contains assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachWhichContainsAssign()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach which contains assign", ((string[])(null)));
#line 1572
this.ScenarioSetup(scenarioInfo);
#line 1573
      testRunner.Given("I have a workflow \"WFWithForEachContainingAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table280.AddRow(new string[] {
                        "[[Warewolf]]",
                        "bob"});
#line 1574
   testRunner.And("\"WFWithForEachContainingAssign\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table280, "And ");
#line 1577
   testRunner.And("\"WFWithForEachContainingAssign\" contains a Foreach \"ForEachTest\" as \"NumOfExecuti" +
                    "on\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table281.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 1578
   testRunner.And("\"ForEachTest\" contains an Assign \"MyAssign\" as", ((string)(null)), table281, "And ");
#line 1581
      testRunner.When("\"WFWithForEachContainingAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1582
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table282.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1583
   testRunner.And("the \'ForEachTest\' in WorkFlow \'WFWithForEachContainingAssign\' debug inputs as", ((string)(null)), table282, "And ");
#line 1586
      testRunner.And("the \'ForEachTest\' in WorkFlow \'WFWithForEachContainingAssign\' has  \"2\" nested chi" +
                    "ldren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table283.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
#line 1587
   testRunner.And("the \'MyAssign\' in step 1 for \'ForEachTest\' debug inputs as", ((string)(null)), table283, "And ");
#line hidden
            TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table284.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
#line 1590
   testRunner.And("the \'MyAssign\' in step 1 for \'ForEachTest\' debug outputs as", ((string)(null)), table284, "And ");
#line hidden
            TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table285.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
#line 1593
   testRunner.And("the \'MyAssign\' in step 2 for \'ForEachTest\' debug inputs as", ((string)(null)), table285, "And ");
#line hidden
            TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table286.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = Test"});
#line 1596
   testRunner.And("the \'MyAssign\' in step 2 for \'ForEachTest\' debug outputs as", ((string)(null)), table286, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach which contains Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachWhichContainsSequence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach which contains Sequence", ((string[])(null)));
#line 1602
this.ScenarioSetup(scenarioInfo);
#line 1603
      testRunner.Given("I have a workflow \"WorkflowWithForEachContainingSequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table287.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
            table287.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "456"});
#line 1604
   testRunner.And("\"WorkflowWithForEachContainingSequence\" contains an Assign \"RecVal\" as", ((string)(null)), table287, "And ");
#line 1608
   testRunner.And("\"WorkflowWithForEachContainingSequence\" contains a Foreach \"ForEachTest1\" as \"Num" +
                    "OfExecution\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1609
   testRunner.And("\"ForEachTest1\" contains a Sequence \"Seq1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table288.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
            table288.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "None",
                        "",
                        "",
                        "Left"});
#line 1610
   testRunner.And("\"Seq1\" in \'ForEachTest1\' contains Data Merge \"Data Merge\" into \"[[rec(1).c]]\" as", ((string)(null)), table288, "And ");
#line hidden
            TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table289.AddRow(new string[] {
                        "[[rec(1).d]]",
                        "Date & Time"});
#line 1614
    testRunner.And("\"Seq1\" in \'ForEachTest1\' contains Gather System Info \"System info\" as", ((string)(null)), table289, "And ");
#line 1617
   testRunner.When("\"WorkflowWithForEachContainingSequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1618
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table290.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
            table290.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] =",
                        "456"});
#line 1619
   testRunner.And("the \'RecVal\' in WorkFlow \'WorkflowWithForEachContainingSequence\' debug inputs as", ((string)(null)), table290, "And ");
#line hidden
            TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table291.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
            table291.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]]  =  456"});
#line 1623
   testRunner.And("the \'RecVal\' in Workflow \'WorkflowWithForEachContainingSequence\' debug outputs as" +
                    "", ((string)(null)), table291, "And ");
#line hidden
            TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table292.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1627
    testRunner.And("the \'ForEachTest1\' in WorkFlow \'WorkflowWithForEachContainingSequence\' debug inpu" +
                    "ts as", ((string)(null)), table292, "And ");
#line 1630
      testRunner.And("the \'ForEachTest1\' in WorkFlow \'WorkflowWithForEachContainingSequence\' has  \"2\" n" +
                    "ested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table293.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table293.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1631
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table293, "And ");
#line hidden
            TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table294.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 1635
    testRunner.And("the \'Data Merge\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug outputs as", ((string)(null)), table294, "And ");
#line hidden
            TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table295.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 1638
   testRunner.And("the \'System info\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table295, "And ");
#line hidden
            TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table296.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 1641
   testRunner.And("the \'System info\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug outputs as", ((string)(null)), table296, "And ");
#line hidden
            TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table297.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table297.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1644
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug inputs as", ((string)(null)), table297, "And ");
#line hidden
            TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table298.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 1648
    testRunner.And("the \'Data Merge\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug outputs as", ((string)(null)), table298, "And ");
#line hidden
            TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table299.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 1651
   testRunner.And("the \'System info\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug inputs as", ((string)(null)), table299, "And ");
#line hidden
            TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table300.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 1654
   testRunner.And("the \'System info\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug outputs as", ((string)(null)), table300, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing ForEach in Rec with star which contains Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingForEachInRecWithStarWhichContainsSequence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing ForEach in Rec with star which contains Sequence", ((string[])(null)));
#line 1659
this.ScenarioSetup(scenarioInfo);
#line 1660
      testRunner.Given("I have a workflow \"WorkFWithForEachwithRecContainingSequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table301.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
            table301.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "456"});
            table301.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Test"});
            table301.AddRow(new string[] {
                        "[[rec(2).b]]",
                        "Warewolf"});
#line 1661
   testRunner.And("\"WorkFWithForEachwithRecContainingSequence\" contains an Assign \"RecVal\" as", ((string)(null)), table301, "And ");
#line 1667
   testRunner.And("\"WorkFWithForEachwithRecContainingSequence\" contains a Foreach \"ForEachTest1\" as " +
                    "\"InRecordset\" executions \"[[rec(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1668
   testRunner.And("\"ForEachTest1\" contains a Sequence \"Seq1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table302.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
            table302.AddRow(new string[] {
                        "[[rec(*).b]]",
                        "None",
                        "",
                        "",
                        "Left"});
#line 1669
   testRunner.And("\"Seq1\" in \'ForEachTest1\' contains Data Merge \"Data Merge\" into \"[[rec(*).c]]\" as", ((string)(null)), table302, "And ");
#line hidden
            TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table303.AddRow(new string[] {
                        "[[rec(*).d]]",
                        "Date & Time"});
#line 1673
   testRunner.And("\"Seq1\" in \'ForEachTest1\' contains Gather System Info \"System info\" as", ((string)(null)), table303, "And ");
#line 1676
   testRunner.When("\"WorkFWithForEachwithRecContainingSequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1677
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table304.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
            table304.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] =",
                        "456"});
            table304.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =",
                        "Test"});
            table304.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =",
                        "Warewolf"});
#line 1678
   testRunner.And("the \'RecVal\' in WorkFlow \'WorkFWithForEachwithRecContainingSequence\' debug inputs" +
                    " as", ((string)(null)), table304, "And ");
#line hidden
            TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table305.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
            table305.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]]  =  456"});
            table305.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =  Test"});
            table305.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =  Warewolf"});
#line 1684
   testRunner.And("the \'RecVal\' in Workflow \'WorkFWithForEachwithRecContainingSequence\' debug output" +
                    "s as", ((string)(null)), table305, "And ");
#line hidden
            TechTalk.SpecFlow.Table table306 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table306.AddRow(new string[] {
                        "* in Recordset",
                        ""});
            table306.AddRow(new string[] {
                        "",
                        "[[rec(1).a]] = 123"});
            table306.AddRow(new string[] {
                        "",
                        "[[rec(1).b]] = 456"});
            table306.AddRow(new string[] {
                        "",
                        "[[rec(1).c]] ="});
            table306.AddRow(new string[] {
                        "",
                        "[[rec(1).d]] ="});
            table306.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = Test"});
            table306.AddRow(new string[] {
                        "",
                        "[[rec(2).b]] = Warewolf"});
            table306.AddRow(new string[] {
                        "",
                        "[[rec(2).c]] ="});
            table306.AddRow(new string[] {
                        "",
                        "[[rec(2).d]]  ="});
#line 1690
   testRunner.And("the \'ForEachTest1\' in WorkFlow \'WorkFWithForEachwithRecContainingSequence\' debug " +
                    "inputs as", ((string)(null)), table306, "And ");
#line 1701
      testRunner.And("the \'ForEachTest1\' in WorkFlow \'WorkFWithForEachwithRecContainingSequence\' has  \"" +
                    "2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table307 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table307.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table307.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1702
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table307, "And ");
#line hidden
            TechTalk.SpecFlow.Table table308 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table308.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 1706
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug outputs as", ((string)(null)), table308, "And ");
#line hidden
            TechTalk.SpecFlow.Table table309 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table309.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 1709
       testRunner.And("the \'System info\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table309, "And ");
#line hidden
            TechTalk.SpecFlow.Table table310 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table310.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 1712
    testRunner.And("the \'System info\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug outputs as", ((string)(null)), table310, "And ");
#line hidden
            TechTalk.SpecFlow.Table table311 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table311.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = Test",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table311.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = Warewolf",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1715
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug inputs as", ((string)(null)), table311, "And ");
#line hidden
            TechTalk.SpecFlow.Table table312 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table312.AddRow(new string[] {
                        "[[rec(2).c]] = TestWarewolf"});
#line 1719
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug outputs as", ((string)(null)), table312, "And ");
#line hidden
            TechTalk.SpecFlow.Table table313 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table313.AddRow(new string[] {
                        "1",
                        "[[rec(2).d]] =",
                        "Date & Time"});
#line 1722
      testRunner.And("the \'System info\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug inputs as", ((string)(null)), table313, "And ");
#line hidden
            TechTalk.SpecFlow.Table table314 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table314.AddRow(new string[] {
                        "1",
                        "[[rec(2).d]] = String"});
#line 1725
    testRunner.And("the \'System info\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug outputs as", ((string)(null)), table314, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing 2 ForEach\'s inside a ForEach which contains Assign only")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void Executing2ForEachSInsideAForEachWhichContainsAssignOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing 2 ForEach\'s inside a ForEach which contains Assign only", ((string[])(null)));
#line 1730
this.ScenarioSetup(scenarioInfo);
#line 1731
      testRunner.Given("I have a workflow \"WFContainsForEachInsideforEach\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1732
   testRunner.And("\"WFContainsForEachInsideforEach\" contains a Foreach \"ForEachTest1\" as \"NumOfExecu" +
                    "tion\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1733
   testRunner.And("\"ForEachTest1\" contains a Foreach \"ForEachTest2\" as \"NumOfExecution\" executions \"" +
                    "2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1734
   testRunner.And("\"ForEachTest2\" contains a Foreach \"ForEachTest3\" as \"NumOfExecution\" executions \"" +
                    "2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table315 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table315.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
#line 1735
   testRunner.And("\"ForEachTest3\" contains an Assign \"Testingoutput\" as", ((string)(null)), table315, "And ");
#line 1738
   testRunner.When("\"WFContainsForEachInsideforEach\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1739
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table316 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table316.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1740
   testRunner.And("the \'ForEachTest1\' in WorkFlow \'WFContainsForEachInsideforEach\' debug inputs as", ((string)(null)), table316, "And ");
#line 1743
   testRunner.And("the \'ForEachTest1\' in WorkFlow \'WFContainsForEachInsideforEach\' has  \"2\" nested c" +
                    "hildren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table317 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table317.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1744
      testRunner.And("the \'ForEachTest2\' in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table317, "And ");
#line 1747
      testRunner.And("the \'ForEachTest2\' in WorkFlow \'ForEachTest1\' has  \"2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table318 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table318.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1748
   testRunner.And("the \'ForEachTest3\' in step 1 for \'ForEachTest2\' debug inputs as", ((string)(null)), table318, "And ");
#line 1751
   testRunner.And("the \'ForEachTest3\' in WorkFlow \'ForEachTest2\' has  \"2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table319 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table319.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
#line 1752
   testRunner.And("the \'Testingoutput\' in step 1 for \'ForEachTest3\' debug inputs as", ((string)(null)), table319, "And ");
#line hidden
            TechTalk.SpecFlow.Table table320 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table320.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
#line 1755
   testRunner.And("the \'Testingoutput\' in step 1 for \'ForEachTest3\' debug outputs as", ((string)(null)), table320, "And ");
#line hidden
            TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table321.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "123"});
#line 1758
   testRunner.And("the \'Testingoutput\' in step 2 for \'ForEachTest3\' debug inputs as", ((string)(null)), table321, "And ");
#line hidden
            TechTalk.SpecFlow.Table table322 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table322.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123"});
#line 1761
   testRunner.And("the \'Testingoutput\' in step 2 for \'ForEachTest3\' debug outputs as", ((string)(null)), table322, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing 2 ForEach\'s inside a ForEach which contains Assign only Large Execution" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void Executing2ForEachSInsideAForEachWhichContainsAssignOnlyLargeExecution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing 2 ForEach\'s inside a ForEach which contains Assign only Large Execution" +
                    "", ((string[])(null)));
#line 1765
  this.ScenarioSetup(scenarioInfo);
#line 1766
      testRunner.Given("I have a workflow \"WFForEachInsideforEachLargeTenFifty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1767
   testRunner.And("\"WFForEachInsideforEachLargeTenFifty\" contains a Foreach \"ForEachTest1\" as \"NumOf" +
                    "Execution\" executions \"10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1768
   testRunner.And("\"ForEachTest1\" contains a Foreach \"ForEachTest2\" as \"NumOfExecution\" executions \"" +
                    "50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table323 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table323.AddRow(new string[] {
                        "[[rec().a]]",
                        "123asda"});
            table323.AddRow(new string[] {
                        "[[rec().b]]",
                        "aaaaa"});
            table323.AddRow(new string[] {
                        "[[rec().c]]",
                        "rrrrrrr"});
            table323.AddRow(new string[] {
                        "[[rec().d]]",
                        "123asda"});
            table323.AddRow(new string[] {
                        "[[rec().e]]",
                        "sdfsdrf45456"});
            table323.AddRow(new string[] {
                        "[[rec().f]]",
                        "cvbcb1123"});
            table323.AddRow(new string[] {
                        "[[rec().g]]",
                        "aasdww2323"});
            table323.AddRow(new string[] {
                        "[[rec().h]]",
                        "oooooo9999"});
            table323.AddRow(new string[] {
                        "[[rec().i]]",
                        "sdfsdf3434"});
            table323.AddRow(new string[] {
                        "[[rec().j]]",
                        "asda123123"});
            table323.AddRow(new string[] {
                        "[[rec().k]]",
                        "sssdff444"});
            table323.AddRow(new string[] {
                        "[[rec().l]]",
                        "asdvvvbbg3333"});
            table323.AddRow(new string[] {
                        "[[rec().m]]",
                        "aasdasd"});
            table323.AddRow(new string[] {
                        "[[rec().n]]",
                        "aasdd222"});
            table323.AddRow(new string[] {
                        "[[rec().o]]",
                        "22323asda"});
#line 1769
   testRunner.And("\"ForEachTest2\" contains an Assign \"Testingoutput\" as", ((string)(null)), table323, "And ");
#line 1786
   testRunner.And("I get the server memory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1787
   testRunner.When("\"WFForEachInsideforEachLargeTenFifty\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1788
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1789
   testRunner.And("the server CPU usage is less than 10%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1790
   testRunner.And("the server memory difference is less than 100 mb", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table324.AddRow(new string[] {
                        "No. of Executes",
                        "10"});
#line 1791
   testRunner.And("the \'ForEachTest1\' in WorkFlow \'WFForEachInsideforEachLargeTenFifty\' debug inputs" +
                    " as", ((string)(null)), table324, "And ");
#line 1794
   testRunner.And("the \'ForEachTest1\' in WorkFlow \'WFForEachInsideforEachLargeTenFifty\' has  \"10\" ne" +
                    "sted children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table325.AddRow(new string[] {
                        "No. of Executes",
                        "50"});
#line 1795
      testRunner.And("the \'ForEachTest2\' in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table325, "And ");
#line 1798
      testRunner.And("the \'ForEachTest2\' in WorkFlow \'ForEachTest1\' has  \"50\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table326.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "123asda"});
            table326.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "aaaaa"});
            table326.AddRow(new string[] {
                        "3",
                        "[[rec().c]] =",
                        "rrrrrrr"});
            table326.AddRow(new string[] {
                        "4",
                        "[[rec().d]] =",
                        "123asda"});
            table326.AddRow(new string[] {
                        "5",
                        "[[rec().e]] =",
                        "sdfsdrf45456"});
            table326.AddRow(new string[] {
                        "6",
                        "[[rec().f]] =",
                        "cvbcb1123"});
            table326.AddRow(new string[] {
                        "7",
                        "[[rec().g]] =",
                        "aasdww2323"});
            table326.AddRow(new string[] {
                        "8",
                        "[[rec().h]] =",
                        "oooooo9999"});
            table326.AddRow(new string[] {
                        "9",
                        "[[rec().i]] =",
                        "sdfsdf3434"});
            table326.AddRow(new string[] {
                        "10",
                        "[[rec().j]] =",
                        "asda123123"});
            table326.AddRow(new string[] {
                        "11",
                        "[[rec().k]] =",
                        "sssdff444"});
            table326.AddRow(new string[] {
                        "12",
                        "[[rec().l]] =",
                        "asdvvvbbg3333"});
            table326.AddRow(new string[] {
                        "13",
                        "[[rec().m]] =",
                        "aasdasd"});
            table326.AddRow(new string[] {
                        "14",
                        "[[rec().n]] =",
                        "aasdd222"});
            table326.AddRow(new string[] {
                        "15",
                        "[[rec().o]] =",
                        "22323asda"});
#line 1799
   testRunner.And("the \'Testingoutput\' in step 50 for \'ForEachTest2\' debug inputs as", ((string)(null)), table326, "And ");
#line hidden
            TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table327.AddRow(new string[] {
                        "1",
                        "[[rec(50).a]] = 123asda"});
            table327.AddRow(new string[] {
                        "2",
                        "[[rec(50).b]] = aaaaa"});
            table327.AddRow(new string[] {
                        "3",
                        "[[rec(50).c]] = rrrrrrr"});
            table327.AddRow(new string[] {
                        "4",
                        "[[rec(50).d]] = 123asda"});
            table327.AddRow(new string[] {
                        "5",
                        "[[rec(50).e]] = sdfsdrf45456"});
            table327.AddRow(new string[] {
                        "6",
                        "[[rec(50).f]] = cvbcb1123"});
            table327.AddRow(new string[] {
                        "7",
                        "[[rec(50).g]] = aasdww2323"});
            table327.AddRow(new string[] {
                        "8",
                        "[[rec(50).h]] = oooooo9999"});
            table327.AddRow(new string[] {
                        "9",
                        "[[rec(50).i]] = sdfsdf3434"});
            table327.AddRow(new string[] {
                        "10",
                        "[[rec(50).j]] = asda123123"});
            table327.AddRow(new string[] {
                        "11",
                        "[[rec(50).k]] = sssdff444"});
            table327.AddRow(new string[] {
                        "12",
                        "[[rec(50).l]] = asdvvvbbg3333"});
            table327.AddRow(new string[] {
                        "13",
                        "[[rec(50).m]] = aasdasd"});
            table327.AddRow(new string[] {
                        "14",
                        "[[rec(50).n]] = aasdd222"});
            table327.AddRow(new string[] {
                        "15",
                        "[[rec(50).o]] = 22323asda"});
#line 1816
   testRunner.And("the \'Testingoutput\' in step 50 for \'ForEachTest2\' debug outputs as", ((string)(null)), table327, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Replace by using recordset star")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndReplaceByUsingRecordsetStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Replace by using recordset star", ((string[])(null)));
#line 1972
 this.ScenarioSetup(scenarioInfo);
#line 1973
 testRunner.Given("I have a workflow \"workflowithAssignandreplaces\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table328.AddRow(new string[] {
                        "[[rec().a]]",
                        "a"});
            table328.AddRow(new string[] {
                        "[[rec().a]]",
                        "b"});
#line 1974
      testRunner.And("\"workflowithAssignandreplaces\" contains an Assign \"Assignee\" as", ((string)(null)), table328, "And ");
#line hidden
            TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table329.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "[[rec(*).a]]",
                        "Warewolf"});
#line 1978
   testRunner.And("\"WorkflowWithAssignandReplaces\" contains Replace \"Rep\" into \"[[rec().a]]\" as", ((string)(null)), table329, "And ");
#line 1981
   testRunner.When("\"workflowithAssignandreplaces\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1982
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table330.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "a"});
            table330.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "b"});
#line 1983
   testRunner.And("the \'Assignee\' in WorkFlow \'workflowithAssignandreplaces\' debug inputs as", ((string)(null)), table330, "And ");
#line hidden
            TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table331.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = a"});
            table331.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = b"});
#line 1987
   testRunner.And("the \'Assignee\' in Workflow \'workflowithAssignandreplaces\' debug outputs as", ((string)(null)), table331, "And ");
#line hidden
            TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table332.AddRow(new string[] {
                        "[[rec(1).a]] = a",
                        "",
                        ""});
            table332.AddRow(new string[] {
                        "[[rec(2).a]] = b",
                        "",
                        ""});
            table332.AddRow(new string[] {
                        "",
                        "[[rec(1).a]] = a",
                        ""});
            table332.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = b",
                        ""});
            table332.AddRow(new string[] {
                        "",
                        "",
                        "Warewolf"});
#line 1991
   testRunner.And("the \'Rep\' in WorkFlow \'workflowithAssignandreplaces\' debug inputs as", ((string)(null)), table332, "And ");
#line hidden
            TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table333.AddRow(new string[] {
                        "[[rec(1).a]] = Warewolf"});
            table333.AddRow(new string[] {
                        "[[rec(2).a]] = Warewolf"});
            table333.AddRow(new string[] {
                        "[[rec(3).a]] = 2"});
#line 1998
   testRunner.And("the \'Rep\' in Workflow \'workflowithAssignandreplaces\' debug outputs as", ((string)(null)), table333, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Find Record index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndFindRecordIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Find Record index", ((string[])(null)));
#line 2005
this.ScenarioSetup(scenarioInfo);
#line 2006
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "variable",
                        "value"});
            table334.AddRow(new string[] {
                        "#",
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 2007
   testRunner.And("\"WFWithAssignandFindRecordindex\" contains an Assign \"Record\" as", ((string)(null)), table334, "And ");
#line hidden
            TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table335.AddRow(new string[] {
                        "#",
                        "[[rec().a]]",
                        "1",
                        "=",
                        "Warewolf",
                        "YES",
                        "NO"});
#line 2010
   testRunner.And("\"WFWithAssignandFindRecordindex\" contains Find Record Index \"FindRecord\" into res" +
                    "ult as \"[[a]][[b]]\"", ((string)(null)), table335, "And ");
#line 2013
   testRunner.When("\"WFWithAssignandFindRecordindex\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2014
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table336.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "Warewolf"});
#line 2015
   testRunner.And("the \'Record\' in WorkFlow \'WFWithAssignandFindRecordindex\' debug inputs as", ((string)(null)), table336, "And ");
#line hidden
            TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table337.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]         =  Warewolf"});
#line 2018
   testRunner.And("the \'Record\' in Workflow \'WFWithAssignandFindRecordindex\' debug outputs as", ((string)(null)), table337, "And ");
#line hidden
            TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table338.AddRow(new string[] {
                        "In Field(s)",
                        "[[rec(1).a]] = Warewolf",
                        "1",
                        "=",
                        "Warewolf",
                        "",
                        "",
                        "YES",
                        "NO"});
#line 2021
   testRunner.And("the \'FindRecord\' in WorkFlow \'WFWithAssignandFindRecordindex\' debug inputs as", ((string)(null)), table338, "And ");
#line hidden
            TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table339.AddRow(new string[] {
                        "[[a]] = -1"});
            table339.AddRow(new string[] {
                        "[[b]] = -1"});
#line 2024
   testRunner.And("the \'FindRecord\' in Workflow \'WFWithAssignandFindRecordindex\' debug outputs as", ((string)(null)), table339, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Count with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void TestingCountWithTwoVariablesInResultField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Count with two variables in Result field", ((string[])(null)));
#line 2084
this.ScenarioSetup(scenarioInfo);
#line 2085
      testRunner.Given("I have a workflow \"WorkflowforCount\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table340.AddRow(new string[] {
                        "[[rec().a]]",
                        "1213"});
            table340.AddRow(new string[] {
                        "[[rec().a]]",
                        "4561"});
#line 2086
      testRunner.And("\"WorkflowforCount\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table340, "And ");
#line 2090
   testRunner.And("\"WorkflowforCount\" contains Count Record \"CountRec\" on \"[[rec()]]\" into \"[[count]" +
                    "][[a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2091
   testRunner.When("\"WorkflowforCount\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2092
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table341.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "1213"});
            table341.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "4561"});
#line 2093
      testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowforCount\' debug inputs as", ((string)(null)), table341, "And ");
#line hidden
            TechTalk.SpecFlow.Table table342 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table342.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1213"});
            table342.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 4561"});
#line 2097
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowforCount\' debug outputs as", ((string)(null)), table342, "And ");
#line hidden
            TechTalk.SpecFlow.Table table343 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table343.AddRow(new string[] {
                        "[[rec(1).a]] = 1213"});
            table343.AddRow(new string[] {
                        "[[rec(2).a]] = 4561"});
#line 2101
   testRunner.And("the \'CountRec\' in WorkFlow \'WorkflowforCount\' debug inputs as", ((string)(null)), table343, "And ");
#line hidden
            TechTalk.SpecFlow.Table table344 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 2105
   testRunner.And("the \'CountRec\' in Workflow \'WorkflowforCount\' debug outputs as", ((string)(null)), table344, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void TestingFindIndexWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Find Index with two variables in Result field", exampleTags);
#line 2179
this.ScenarioSetup(scenarioInfo);
#line 2180
      testRunner.Given("I have a workflow \"WorkflowforFI\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table345 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table345.AddRow(new string[] {
                        "[[rec().a]]",
                        "141"});
            table345.AddRow(new string[] {
                        "[[rec().a]]",
                        "4561"});
#line 2181
      testRunner.And("\"WorkflowforFI\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table345, "And ");
#line hidden
            TechTalk.SpecFlow.Table table346 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table346.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "All Occurence",
                        "1",
                        "Left to Right"});
#line 2185
   testRunner.And(string.Format("\"WorkflowforFI\" contains Find Index \"Index\" into \'{0}\' as", variable), ((string)(null)), table346, "And ");
#line 2188
   testRunner.When("\"WorkflowforFI\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2189
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table347.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "141"});
            table347.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "4561"});
#line 2190
      testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowforFI\' debug inputs as", ((string)(null)), table347, "And ");
#line hidden
            TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table348.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 141"});
            table348.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 4561"});
#line 2194
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowforFI\' debug outputs as", ((string)(null)), table348, "And ");
#line hidden
            TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table349.AddRow(new string[] {
                        "[[rec(1).a]] = 141",
                        "",
                        "",
                        ""});
            table349.AddRow(new string[] {
                        "[[rec(2).a]] = 4561",
                        "All Occurence",
                        "1",
                        "Left to Right"});
#line 2198
   testRunner.And("the \'Index\' in WorkFlow \'WorkflowforFI\' debug inputs as", ((string)(null)), table349, "And ");
#line hidden
            TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 2202
   testRunner.And("the \'Index\' in Workflow \'WorkflowforFI\' debug outputs as", ((string)(null)), table350, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Find Index with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[indexResult]]")]
        public virtual void TestingFindIndexWithTwoVariablesInResultField_1()
        {
            this.TestingFindIndexWithTwoVariablesInResultField("1", "[[a]][[indexResult]]", ((string[])(null)));
        }
        
        public virtual void TestingDataMergeWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Data Merge with two variables in Result field", exampleTags);
#line 2223
this.ScenarioSetup(scenarioInfo);
#line 2224
      testRunner.Given("I have a workflow \"WorkflowforDataMerge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table351 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table351.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table351.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 2225
      testRunner.And("\"WorkflowforDataMerge\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table351, "And ");
#line hidden
            TechTalk.SpecFlow.Table table352 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table352.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
            table352.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
#line 2229
   testRunner.And(string.Format("\"WorkflowforDataMerge\" contains Data Merge \"Data Merge\" into \'{0}\' as", variable), ((string)(null)), table352, "And ");
#line 2233
   testRunner.When("\"WorkflowforDataMerge\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2234
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table353 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table353.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
            table353.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 2235
      testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowforDataMerge\' debug inputs as", ((string)(null)), table353, "And ");
#line hidden
            TechTalk.SpecFlow.Table table354 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table354.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
            table354.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf"});
#line 2239
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowforDataMerge\' debug outputs as", ((string)(null)), table354, "And ");
#line hidden
            TechTalk.SpecFlow.Table table355 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table355.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table355.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 2243
  testRunner.And("the \'Data Merge\' in WorkFlow \'WorkflowforDataMerge\' debug inputs as", ((string)(null)), table355, "And ");
#line hidden
            TechTalk.SpecFlow.Table table356 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table356.AddRow(new string[] {
                        "[[result]][[a]] ="});
#line 2247
   testRunner.And("the \'Data Merge\' in Workflow \'WorkflowforDataMerge\' debug outputs as", ((string)(null)), table356, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Data Merge with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingDataMergeWithTwoVariablesInResultField_1()
        {
            this.TestingDataMergeWithTwoVariablesInResultField("1", "[[a]][[Result]]", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Data Split with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void TestingDataSplitWithTwoVariablesInResultField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Data Split with two variables in Result field", ((string[])(null)));
#line 2268
this.ScenarioSetup(scenarioInfo);
#line 2269
      testRunner.Given("I have a workflow \"WorkflowforDatasplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table357 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table357.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table357.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 2270
      testRunner.And("\"WorkflowforDatasplit\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table357, "And ");
#line hidden
            TechTalk.SpecFlow.Table table358 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table358.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[fr().a]][[a]]",
                        "Index",
                        "2",
                        "Unselected",
                        ""});
            table358.AddRow(new string[] {
                        "",
                        "[[fr().b]][[b]]",
                        "Index",
                        "2",
                        "Unselected",
                        ""});
#line 2274
   testRunner.And("\"WorkflowforDatasplit\" contains Data Split \"Data Split\" as", ((string)(null)), table358, "And ");
#line 2278
   testRunner.When("\"WorkflowforDatasplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2279
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table359 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table359.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
            table359.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 2280
      testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowforDatasplit\' debug inputs as", ((string)(null)), table359, "And ");
#line hidden
            TechTalk.SpecFlow.Table table360 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table360.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
            table360.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf"});
#line 2284
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowforDatasplit\' debug outputs as", ((string)(null)), table360, "And ");
#line hidden
            TechTalk.SpecFlow.Table table361 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table361.AddRow(new string[] {
                        "[[rec(1).a]] = Test",
                        "Forward",
                        "No",
                        "1",
                        "[[fr().a]][[a]] =",
                        "Index",
                        "2",
                        "No",
                        ""});
            table361.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[fr().b]][[b]] =",
                        "Index",
                        "2",
                        "No",
                        ""});
#line 2288
  testRunner.And("the \'Data Split\' in WorkFlow \'WorkflowforDatasplit\' debug inputs as", ((string)(null)), table361, "And ");
#line hidden
            TechTalk.SpecFlow.Table table362 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table362.AddRow(new string[] {
                        "1",
                        "[[fr(1).aa]] ="});
            table362.AddRow(new string[] {
                        "2",
                        "[[fr(1).bb]] ="});
#line 2292
   testRunner.And("the \'Data Split\' in Workflow \'WorkflowforDatasplit\' debug outputs as", ((string)(null)), table362, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void TestingReplaceWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Replace with two variables in Result field", exampleTags);
#line 2298
this.ScenarioSetup(scenarioInfo);
#line 2299
      testRunner.Given("I have a workflow \"WorkflowforReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table363 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table363.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table363.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 2300
      testRunner.And("\"WorkflowforReplace\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table363, "And ");
#line hidden
            TechTalk.SpecFlow.Table table364 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table364.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "Test",
                        "rocks"});
#line 2304
   testRunner.And(string.Format("\"WorkflowforReplace\" contains Replace \"Replac\" into \'{0}\' as", variable), ((string)(null)), table364, "And ");
#line 2307
   testRunner.When("\"WorkflowforReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2308
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table365 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table365.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
            table365.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 2309
      testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowforReplace\' debug inputs as", ((string)(null)), table365, "And ");
#line hidden
            TechTalk.SpecFlow.Table table366 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table366.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
            table366.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf"});
#line 2313
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowforReplace\' debug outputs as", ((string)(null)), table366, "And ");
#line hidden
            TechTalk.SpecFlow.Table table367 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table367.AddRow(new string[] {
                        "[[rec(1).a]] = Test",
                        "",
                        ""});
            table367.AddRow(new string[] {
                        "[[rec(2).a]] = Warewolf",
                        "Test",
                        "rocks"});
#line 2317
   testRunner.And("the \'Replac\' in WorkFlow \'WorkflowforReplace\' debug inputs as", ((string)(null)), table367, "And ");
#line hidden
            TechTalk.SpecFlow.Table table368 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table368.AddRow(new string[] {
                        "[[a]][[b]][[c]] ="});
#line 2321
   testRunner.And("the \'Replac\' in Workflow \'WorkflowforReplace\' debug outputs as", ((string)(null)), table368, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Replace with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingReplaceWithTwoVariablesInResultField_1()
        {
            this.TestingReplaceWithTwoVariablesInResultField("1", "[[a]][[Result]]", ((string[])(null)));
        }
        
        public virtual void TestingCalculateWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Calculate with two variables in Result field", exampleTags);
#line 2343
this.ScenarioSetup(scenarioInfo);
#line 2344
      testRunner.Given("I have a workflow \"WorkflowforCals\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table369 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table369.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table369.AddRow(new string[] {
                        "[[b]]",
                        "2"});
#line 2345
      testRunner.And("\"WorkflowforCals\" contains an Assign \"Values\" as", ((string)(null)), table369, "And ");
#line 2349
  testRunner.And(string.Format("\"WorkflowforCal\" contains Calculate \"Calculate1\" with formula \"[[a]]+[[b]]\" into " +
                        "\'{0}\'", variable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2350
   testRunner.When("\"WorkflowforCals\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2351
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table370 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table370.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table370.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
#line 2352
      testRunner.And("the \'Values\' in WorkFlow \'WorkflowforCals\' debug inputs as", ((string)(null)), table370, "And ");
#line hidden
            TechTalk.SpecFlow.Table table371 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table371.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table371.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
#line 2356
   testRunner.And("the \'Values\' in Workflow \'WorkflowforCals\' debug outputs as", ((string)(null)), table371, "And ");
#line hidden
            TechTalk.SpecFlow.Table table372 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table372.AddRow(new string[] {
                        "[[a]]+[[b]] = 1+2 = 2"});
#line 2360
   testRunner.And("the \'Calculate1\' in WorkFlow \'WorkflowforCals\' debug inputs as", ((string)(null)), table372, "And ");
#line hidden
            TechTalk.SpecFlow.Table table373 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table373.AddRow(new string[] {
                        string.Format("\'{0}\'", variable)});
#line 2363
      testRunner.And("the \'Calculate1\' in Workflow \'WorkflowforCals\' debug outputs as", ((string)(null)), table373, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Calculate with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingCalculateWithTwoVariablesInResultField_1()
        {
            this.TestingCalculateWithTwoVariablesInResultField("1", "[[a]][[Result]]", ((string[])(null)));
        }
        
        public virtual void TestingFormatNumbersWithTwoVariablesInResult(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Format Numbers with two variables in Result", exampleTags);
#line 2383
this.ScenarioSetup(scenarioInfo);
#line 2384
      testRunner.Given("I have a workflow \"Workflowforfn\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table374 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table374.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table374.AddRow(new string[] {
                        "[[b]]",
                        "2"});
#line 2385
   testRunner.And("\"Workflowforfn\" contains an Assign \"Values\" as", ((string)(null)), table374, "And ");
#line hidden
            TechTalk.SpecFlow.Table table375 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table375.AddRow(new string[] {
                        "123.568",
                        "Up",
                        "2",
                        "2",
                        string.Format("\'{0}\'", variable)});
#line 2389
   testRunner.And("\"Workflowforfn\" contains Format Number \"Fnumber\" as", ((string)(null)), table375, "And ");
#line 2392
   testRunner.When("\"Workflowforfn\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2393
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table376 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table376.AddRow(new string[] {
                        "123.568",
                        "Up",
                        "2",
                        "2"});
#line 2394
   testRunner.And("the \'Fnumber\' in WorkFlow \'Workflowforfn\' debug inputs as", ((string)(null)), table376, "And ");
#line hidden
            TechTalk.SpecFlow.Table table377 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table377.AddRow(new string[] {
                        string.Format("\'{0}\' =", variable)});
#line 2397
   testRunner.And("the \'Fnumber\' in Workflow \'Workflowforfn\' debug outputs as", ((string)(null)), table377, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Format Numbers with two variables in Result")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingFormatNumbersWithTwoVariablesInResult_1()
        {
            this.TestingFormatNumbersWithTwoVariablesInResult("1", "[[a]][[Result]]", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Sort Forward to test gaps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndSortForwardToTestGaps()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Sort Forward to test gaps", ((string[])(null)));
#line 2541
this.ScenarioSetup(scenarioInfo);
#line 2542
      testRunner.Given("I have a workflow \"workflowithAssignandsortrec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table378 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table378.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "30"});
            table378.AddRow(new string[] {
                        "[[rs(5).a]]",
                        "20"});
            table378.AddRow(new string[] {
                        "[[rs(7).a]]",
                        "10"});
            table378.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "6"});
            table378.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "4"});
            table378.AddRow(new string[] {
                        "[[rs(6).b]]",
                        "2"});
#line 2543
      testRunner.And("\"workflowithAssignandsortrec\" contains an Assign \"sortval\" as", ((string)(null)), table378, "And ");
#line hidden
            TechTalk.SpecFlow.Table table379 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table379.AddRow(new string[] {
                        "[[rs(*).a",
                        "Forward"});
#line 2551
   testRunner.And("\"workflowithAssignandsortrec\" contains an Sort \"sortRec\" as", ((string)(null)), table379, "And ");
#line 2554
   testRunner.When("\"workflowithAssignandsortrec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2555
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table380 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table380.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "30"});
            table380.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] =",
                        "20"});
            table380.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] =",
                        "10"});
            table380.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] =",
                        "6"});
            table380.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] =",
                        "4"});
            table380.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] =",
                        "2"});
#line 2556
   testRunner.And("the \'sortval\' in WorkFlow \'workflowithAssignandsortrec\' debug inputs as", ((string)(null)), table380, "And ");
#line hidden
            TechTalk.SpecFlow.Table table381 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table381.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 30"});
            table381.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] = 20"});
            table381.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] = 10"});
            table381.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] = 6"});
            table381.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] = 4"});
            table381.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] = 2"});
#line 2564
   testRunner.And("the \'sortval\' in Workflow \'workflowithAssignandsortrec\' debug outputs as", ((string)(null)), table381, "And ");
#line hidden
            TechTalk.SpecFlow.Table table382 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table382.AddRow(new string[] {
                        "[[rs(1).a]] = 30",
                        ""});
            table382.AddRow(new string[] {
                        "[[rs(2).a]] =",
                        ""});
            table382.AddRow(new string[] {
                        "[[rs(4).a]] =",
                        ""});
            table382.AddRow(new string[] {
                        "[[rs(5).a]] = 20",
                        ""});
            table382.AddRow(new string[] {
                        "[[rs(6).a]] =",
                        ""});
            table382.AddRow(new string[] {
                        "[[rs(7).a]] = 10",
                        "Forward"});
#line 2572
   testRunner.And("the \'sortRec\' in WorkFlow \'workflowithAssignandsortrec\' debug inputs as", ((string)(null)), table382, "And ");
#line hidden
            TechTalk.SpecFlow.Table table383 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table383.AddRow(new string[] {
                        "[[rs(1).a]] ="});
            table383.AddRow(new string[] {
                        "[[rs(2).a]] ="});
            table383.AddRow(new string[] {
                        "[[rs(4).a]] ="});
            table383.AddRow(new string[] {
                        "[[rs(5).a]] = 10"});
            table383.AddRow(new string[] {
                        "[[rs(6).a]] = 20"});
            table383.AddRow(new string[] {
                        "[[rs(7).a]] = 30"});
#line 2580
   testRunner.And("the \'sortRec\' in Workflow \'workflowithAssignandsortrec\' debug outputs as", ((string)(null)), table383, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Sort Backward to test gaps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndSortBackwardToTestGaps()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Sort Backward to test gaps", ((string[])(null)));
#line 2589
this.ScenarioSetup(scenarioInfo);
#line 2590
      testRunner.Given("I have a workflow \"workflowithAssignandsortrecBack\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table384 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table384.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "10"});
            table384.AddRow(new string[] {
                        "[[rs(5).a]]",
                        "20"});
            table384.AddRow(new string[] {
                        "[[rs(7).a]]",
                        "30"});
            table384.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "6"});
            table384.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "4"});
            table384.AddRow(new string[] {
                        "[[rs(6).b]]",
                        "2"});
#line 2591
      testRunner.And("\"workflowithAssignandsortrecBack\" contains an Assign \"sortval\" as", ((string)(null)), table384, "And ");
#line hidden
            TechTalk.SpecFlow.Table table385 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table385.AddRow(new string[] {
                        "[[rs(*).a]]",
                        "Backwards"});
#line 2599
   testRunner.And("\"workflowithAssignandsortrecBack\" contains an Sort \"sortRec\" as", ((string)(null)), table385, "And ");
#line 2602
   testRunner.When("\"workflowithAssignandsortrecBack\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2603
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table386 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table386.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "10"});
            table386.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] =",
                        "20"});
            table386.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] =",
                        "30"});
            table386.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] =",
                        "6"});
            table386.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] =",
                        "4"});
            table386.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] =",
                        "2"});
#line 2604
   testRunner.And("the \'sortval\' in WorkFlow \'workflowithAssignandsortrecBack\' debug inputs as", ((string)(null)), table386, "And ");
#line hidden
            TechTalk.SpecFlow.Table table387 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table387.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 10"});
            table387.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] = 20"});
            table387.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] = 30"});
            table387.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] = 6"});
            table387.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] = 4"});
            table387.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] = 2"});
#line 2612
   testRunner.And("the \'sortval\' in Workflow \'workflowithAssignandsortrecBack\' debug outputs as", ((string)(null)), table387, "And ");
#line hidden
            TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table388.AddRow(new string[] {
                        "[[rs(1).a]] = 10",
                        ""});
            table388.AddRow(new string[] {
                        "[[rs(2).a]] =",
                        ""});
            table388.AddRow(new string[] {
                        "[[rs(4).a]] =",
                        ""});
            table388.AddRow(new string[] {
                        "[[rs(5).a]] = 20",
                        ""});
            table388.AddRow(new string[] {
                        "[[rs(6).a]] =",
                        ""});
            table388.AddRow(new string[] {
                        "[[rs(7).a]] = 30",
                        "Backwards"});
#line 2620
   testRunner.And("the \'sortRec\' in WorkFlow \'workflowithAssignandsortrecBack\' debug inputs as", ((string)(null)), table388, "And ");
#line hidden
            TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table389.AddRow(new string[] {
                        "[[rs(1).a]] = 30"});
            table389.AddRow(new string[] {
                        "[[rs(2).a]] = 20"});
            table389.AddRow(new string[] {
                        "[[rs(4).a]] = 10"});
            table389.AddRow(new string[] {
                        "[[rs(5).a]] ="});
            table389.AddRow(new string[] {
                        "[[rs(6).a]] ="});
            table389.AddRow(new string[] {
                        "[[rs(7).a]] ="});
#line 2628
   testRunner.And("the \'sortRec\' in Workflow \'workflowithAssignandsortrecBack\' debug outputs as", ((string)(null)), table389, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool, Infields rec without star")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolInfieldsRecWithoutStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool, Infields rec without star", ((string[])(null)));
#line 2694
this.ScenarioSetup(scenarioInfo);
#line 2695
      testRunner.Given("I have a workflow \"workflowithAssignandUniqueToolc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table390.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table390.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
            table390.AddRow(new string[] {
                        "[[rs(2).row]]",
                        "40"});
            table390.AddRow(new string[] {
                        "[[rs(2).data]]",
                        "20"});
            table390.AddRow(new string[] {
                        "[[rs(3).row]]",
                        "20"});
            table390.AddRow(new string[] {
                        "[[rs(3).data]]",
                        "20"});
            table390.AddRow(new string[] {
                        "[[rs(4).row]]",
                        "30"});
            table390.AddRow(new string[] {
                        "[[rs(4).data]]",
                        "40"});
#line 2696
      testRunner.And("\"workflowithAssignandUniqueToolc\" contains an Assign \"Records\" as", ((string)(null)), table390, "And ");
#line hidden
            TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table391.AddRow(new string[] {
                        "[[rs().row]],[[rs().data]]",
                        "[[rs().row]]",
                        "[[rec().unique]]"});
#line 2706
   testRunner.And("\"workflowithAssignandUniqueToolc\" contains an Unique \"Unique rec\" as", ((string)(null)), table391, "And ");
#line 2709
   testRunner.When("\"workflowithAssignandUniqueToolc\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2710
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table392.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table392.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
            table392.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =",
                        "40"});
            table392.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =",
                        "20"});
            table392.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =",
                        "20"});
            table392.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =",
                        "20"});
            table392.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =",
                        "30"});
            table392.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =",
                        "40"});
#line 2711
   testRunner.And("the \'Records\' in WorkFlow \'workflowithAssignandUniqueToolc\' debug inputs as", ((string)(null)), table392, "And ");
#line hidden
            TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table393.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table393.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
            table393.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =  40"});
            table393.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =  20"});
            table393.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =  20"});
            table393.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =  20"});
            table393.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =  30"});
            table393.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =  40"});
#line 2721
   testRunner.And("the \'Records\' in Workflow \'workflowithAssignandUniqueToolc\' debug outputs as", ((string)(null)), table393, "And ");
#line hidden
            TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table394.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 30",
                        ""});
            table394.AddRow(new string[] {
                        "",
                        "[[rs(4).data]] = 40",
                        "[[rs().row]] ="});
#line 2731
   testRunner.And("the \'Unique rec\' in WorkFlow \'workflowithAssignandUniqueToolc\' debug inputs as", ((string)(null)), table394, "And ");
#line hidden
            TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table395.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table395.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 40"});
            table395.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 20"});
            table395.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 30"});
#line 2735
      testRunner.And("the \'Unique rec\' in Workflow \'workflowithAssignandUniqueToolc\' debug outputs as", ((string)(null)), table395, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool, Result rec with star")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolResultRecWithStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool, Result rec with star", ((string[])(null)));
#line 2742
this.ScenarioSetup(scenarioInfo);
#line 2743
      testRunner.Given("I have a workflow \"workflowithAssignandUniqueTools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table396.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table396.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
            table396.AddRow(new string[] {
                        "[[rs(2).row]]",
                        "40"});
            table396.AddRow(new string[] {
                        "[[rs(2).data]]",
                        "20"});
            table396.AddRow(new string[] {
                        "[[rs(3).row]]",
                        "20"});
            table396.AddRow(new string[] {
                        "[[rs(3).data]]",
                        "20"});
            table396.AddRow(new string[] {
                        "[[rs(4).row]]",
                        "30"});
            table396.AddRow(new string[] {
                        "[[rs(4).data]]",
                        "40"});
#line 2744
      testRunner.And("\"workflowithAssignandUniqueTools\" contains an Assign \"Records\" as", ((string)(null)), table396, "And ");
#line hidden
            TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table397.AddRow(new string[] {
                        "[[rs().row]],[[rs().data]]",
                        "[[rs().row]]",
                        "[[rec(*).unique]]"});
#line 2754
   testRunner.And("\"workflowithAssignandUniqueTools\" contains an Unique \"Unique rec\" as", ((string)(null)), table397, "And ");
#line 2757
   testRunner.When("\"workflowithAssignandUniqueTools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2758
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table398.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table398.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
            table398.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =",
                        "40"});
            table398.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =",
                        "20"});
            table398.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =",
                        "20"});
            table398.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =",
                        "20"});
            table398.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =",
                        "30"});
            table398.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =",
                        "40"});
#line 2759
   testRunner.And("the \'Records\' in WorkFlow \'workflowithAssignandUniqueTools\' debug inputs as", ((string)(null)), table398, "And ");
#line hidden
            TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table399.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table399.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
            table399.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =  40"});
            table399.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =  20"});
            table399.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =  20"});
            table399.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =  20"});
            table399.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =  30"});
            table399.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =  40"});
#line 2769
   testRunner.And("the \'Records\' in Workflow \'workflowithAssignandUniqueTools\' debug outputs as", ((string)(null)), table399, "And ");
#line hidden
            TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table400.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 30",
                        ""});
            table400.AddRow(new string[] {
                        "",
                        "[[rs(4).data]] = 40",
                        "[[rs().row]] ="});
#line 2779
   testRunner.And("the \'Unique rec\' in WorkFlow \'workflowithAssignandUniqueTools\' debug inputs as", ((string)(null)), table400, "And ");
#line hidden
            TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table401.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table401.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 40"});
            table401.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 20"});
            table401.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 30"});
#line 2783
      testRunner.And("the \'Unique rec\' in Workflow \'workflowithAssignandUniqueTools\' debug outputs as", ((string)(null)), table401, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert an recordset to Upper by using index as scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ConvertAnRecordsetToUpperByUsingIndexAsScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an recordset to Upper by using index as scalar", ((string[])(null)));
#line 2791
this.ScenarioSetup(scenarioInfo);
#line 2792
 testRunner.Given("I have a workflow \"ConvertUsingScalarInRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table402.AddRow(new string[] {
                        "[[rs().row]]",
                        "warewolf"});
            table402.AddRow(new string[] {
                        "[[a]]",
                        "1"});
#line 2793
 testRunner.And("\"ConvertUsingScalarInRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table402, "And ");
#line hidden
            TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table403.AddRow(new string[] {
                        "[[rs([[a]]).row]]",
                        "UPPER"});
#line 2797
 testRunner.And("\"ConvertUsingScalarInRecursiveEvalution\" contains case convert \"Case to Convert\" " +
                    "as", ((string)(null)), table403, "And ");
#line 2800
 testRunner.When("\"ConvertUsingScalarInRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2801
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table404.AddRow(new string[] {
                        "1",
                        "[[rs().row]] =",
                        "warewolf"});
            table404.AddRow(new string[] {
                        "2",
                        "[[a]] =",
                        "1"});
#line 2802
 testRunner.And("the \'Records\' in WorkFlow \'ConvertUsingScalarInRecursiveEvalution\' debug inputs a" +
                    "s", ((string)(null)), table404, "And ");
#line hidden
            TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table405.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  warewolf"});
            table405.AddRow(new string[] {
                        "2",
                        "[[a]] =  1"});
#line 2806
 testRunner.And("the \'Records\' in Workflow \'ConvertUsingScalarInRecursiveEvalution\' debug outputs " +
                    "as", ((string)(null)), table405, "And ");
#line hidden
            TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table406.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf",
                        "UPPER"});
#line 2810
 testRunner.And("the \'Case to Convert\' in WorkFlow \'ConvertUsingScalarInRecursiveEvalution\' debug " +
                    "inputs as", ((string)(null)), table406, "And ");
#line hidden
            TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table407.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = WAREWOLF"});
#line 2813
 testRunner.And("the \'Case to Convert\' in Workflow \'ConvertUsingScalarInRecursiveEvalution\' debug " +
                    "outputs as", ((string)(null)), table407, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert an recordset to Upper by using index as recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ConvertAnRecordsetToUpperByUsingIndexAsRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an recordset to Upper by using index as recordset", ((string[])(null)));
#line 2817
this.ScenarioSetup(scenarioInfo);
#line 2818
 testRunner.Given("I have a workflow \"ConvertUsingRecSetInRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table408.AddRow(new string[] {
                        "[[rs().row]]",
                        "warewolf"});
            table408.AddRow(new string[] {
                        "[[rs().index]]",
                        "1"});
#line 2819
 testRunner.And("\"ConvertUsingRecSetInRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table408, "And ");
#line hidden
            TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table409.AddRow(new string[] {
                        "[[rs([[rs(1).index]]).row]]",
                        "UPPER"});
#line 2823
 testRunner.And("\"ConvertUsingRecSetInRecursiveEvalution\" contains case convert \"Case to Convert\" " +
                    "as", ((string)(null)), table409, "And ");
#line 2826
 testRunner.When("\"ConvertUsingRecSetInRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2827
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table410 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table410.AddRow(new string[] {
                        "1",
                        "[[rs().row]] =",
                        "warewolf"});
            table410.AddRow(new string[] {
                        "2",
                        "[[rs().index]] =",
                        "1"});
#line 2828
 testRunner.And("the \'Records\' in WorkFlow \'ConvertUsingRecSetInRecursiveEvalution\' debug inputs a" +
                    "s", ((string)(null)), table410, "And ");
#line hidden
            TechTalk.SpecFlow.Table table411 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table411.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf"});
            table411.AddRow(new string[] {
                        "2",
                        "[[rs(1).index]] = 1"});
#line 2832
 testRunner.And("the \'Records\' in Workflow \'ConvertUsingRecSetInRecursiveEvalution\' debug outputs " +
                    "as", ((string)(null)), table411, "And ");
#line hidden
            TechTalk.SpecFlow.Table table412 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table412.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf",
                        "UPPER"});
#line 2836
 testRunner.And("the \'Case to Convert\' in WorkFlow \'ConvertUsingRecSetInRecursiveEvalution\' debug " +
                    "inputs as", ((string)(null)), table412, "And ");
#line hidden
            TechTalk.SpecFlow.Table table413 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table413.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = WAREWOLF"});
#line 2839
 testRunner.And("the \'Case to Convert\' in Workflow \'ConvertUsingRecSetInRecursiveEvalution\' debug " +
                    "outputs as", ((string)(null)), table413, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Base Convert two varibles on one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void BaseConvertTwoVariblesOnOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Base Convert two varibles on one row", ((string[])(null)));
#line 2844
this.ScenarioSetup(scenarioInfo);
#line 2845
 testRunner.Given("I have a workflow \"BaseConvertUsingRecSetInRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table414 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table414.AddRow(new string[] {
                        "[[rs().a]]",
                        "1"});
            table414.AddRow(new string[] {
                        "[[rec().a]]",
                        "2"});
#line 2846
 testRunner.And("\"BaseConvertUsingRecSetInRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table414, "And ");
#line hidden
            TechTalk.SpecFlow.Table table415 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table415.AddRow(new string[] {
                        "[[rec([[rs(1).a]]).a]]",
                        "Text",
                        "Base 64"});
#line 2850
 testRunner.And("\"BaseConvertUsingRecSetInRecursiveEvalution\" contains Base convert \"Base to Conve" +
                    "rt\" as", ((string)(null)), table415, "And ");
#line 2853
 testRunner.When("\"BaseConvertUsingRecSetInRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2854
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table416 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table416.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "1"});
            table416.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "2"});
#line 2855
 testRunner.And("the \'Records\' in WorkFlow \'BaseConvertUsingRecSetInRecursiveEvalution\' debug inpu" +
                    "ts as", ((string)(null)), table416, "And ");
#line hidden
            TechTalk.SpecFlow.Table table417 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table417.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 1"});
            table417.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 2"});
#line 2859
 testRunner.And("the \'Records\' in Workflow \'BaseConvertUsingRecSetInRecursiveEvalution\' debug outp" +
                    "uts as", ((string)(null)), table417, "And ");
#line hidden
            TechTalk.SpecFlow.Table table418 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table418.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 2",
                        "Text",
                        "Base 64"});
#line 2863
 testRunner.And("the \'Base to Convert\' in WorkFlow \'BaseConvertUsingRecSetInRecursiveEvalution\' de" +
                    "bug inputs as", ((string)(null)), table418, "And ");
#line hidden
            TechTalk.SpecFlow.Table table419 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table419.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Mg=="});
#line 2866
    testRunner.And("the \'Base to Convert\' in Workflow \'BaseConvertUsingRecSetInRecursiveEvalution\' de" +
                    "bug outputs as", ((string)(null)), table419, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow by using For Each with Raandom in it")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowByUsingForEachWithRaandomInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow by using For Each with Raandom in it", ((string[])(null)));
#line 2871
this.ScenarioSetup(scenarioInfo);
#line 2872
      testRunner.Given("I have a workflow \"WFWithForEachContainsRandom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 2873
   testRunner.And("\"WFWithForEachContainsRandom\" contains a Foreach \"ForEachTest123\" as \"NumOfExecut" +
                    "ion\" executions \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table420 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table420.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5",
                        "[[rec(*).a]]"});
#line 2874
   testRunner.And("\"ForEachTest123\" contains Random \"Random\" as", ((string)(null)), table420, "And ");
#line 2877
      testRunner.When("\"WFWithForEachContainsRandom\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2878
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table421 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table421.AddRow(new string[] {
                        "No. of Executes",
                        "5"});
#line 2879
   testRunner.And("the \'ForEachTest123\' in WorkFlow \'WFWithForEachContainsRandom\' debug inputs as", ((string)(null)), table421, "And ");
#line 2882
      testRunner.And("the \'ForEachTest123\' in WorkFlow \'WFWithForEachContainsRandom\' has  \"5\" nested ch" +
                    "ildren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table422 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table422.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2883
    testRunner.And("the \'Random\' in step 1 for \'ForEachTest123\' debug inputs as", ((string)(null)), table422, "And ");
#line hidden
            TechTalk.SpecFlow.Table table423 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table423.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2886
   testRunner.And("the \'Random\' in step 1 for \'ForEachTest123\' debug outputs as", ((string)(null)), table423, "And ");
#line hidden
            TechTalk.SpecFlow.Table table424 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table424.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2889
   testRunner.And("the \'Random\' in step 2 for \'ForEachTest123\' debug inputs as", ((string)(null)), table424, "And ");
#line hidden
            TechTalk.SpecFlow.Table table425 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table425.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2892
   testRunner.And("the \'Random\' in step 2 for \'ForEachTest123\' debug outputs as", ((string)(null)), table425, "And ");
#line hidden
            TechTalk.SpecFlow.Table table426 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table426.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2895
       testRunner.And("the \'Random\' in step 3 for \'ForEachTest123\' debug inputs as", ((string)(null)), table426, "And ");
#line hidden
            TechTalk.SpecFlow.Table table427 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table427.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2898
   testRunner.And("the \'Random\' in step 3 for \'ForEachTest123\' debug outputs as", ((string)(null)), table427, "And ");
#line hidden
            TechTalk.SpecFlow.Table table428 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table428.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2901
      testRunner.And("the \'Random\' in step 4 for \'ForEachTest123\' debug inputs as", ((string)(null)), table428, "And ");
#line hidden
            TechTalk.SpecFlow.Table table429 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table429.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2904
   testRunner.And("the \'Random\' in step 4 for \'ForEachTest123\' debug outputs as", ((string)(null)), table429, "And ");
#line hidden
            TechTalk.SpecFlow.Table table430 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table430.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2907
       testRunner.And("the \'Random\' in step 5 for \'ForEachTest123\' debug inputs as", ((string)(null)), table430, "And ");
#line hidden
            TechTalk.SpecFlow.Table table431 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table431.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2910
 testRunner.And("the \'Random\' in step 5 for \'ForEachTest123\' debug outputs as", ((string)(null)), table431, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool to find unique names in diff rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolToFindUniqueNamesInDiffRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool to find unique names in diff rows", ((string[])(null)));
#line 3035
this.ScenarioSetup(scenarioInfo);
#line 3036
      testRunner.Given("I have a workflow \"WorkflowUniqueWithNames\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table432 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table432.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Smith"});
            table432.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Gordan"});
            table432.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Nicholas"});
            table432.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Cage"});
            table432.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table432.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
#line 3037
      testRunner.And("\"WorkflowUniqueWithNames\" contains an Assign \"Records1\" as", ((string)(null)), table432, "And ");
#line hidden
            TechTalk.SpecFlow.Table table433 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table433.AddRow(new string[] {
                        "[[emp(*).firstname]],[[emp(*).lastname]]",
                        "[[emp().firstname]]",
                        "[[emp(*).uni]]"});
#line 3045
   testRunner.And("\"WorkflowUniqueWithNames\" contains an Unique \"Unique\" as", ((string)(null)), table433, "And ");
#line 3048
   testRunner.When("\"WorkflowUniqueWithNames\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3049
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table434 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table434.AddRow(new string[] {
                        "1",
                        "[[emp().firstname]] =",
                        "Smith"});
            table434.AddRow(new string[] {
                        "2",
                        "[[emp().lastname]] =",
                        "Gordan"});
            table434.AddRow(new string[] {
                        "3",
                        "[[emp().firstname]] =",
                        "Nicholas"});
            table434.AddRow(new string[] {
                        "4",
                        "[[emp().lastname]] =",
                        "Cage"});
            table434.AddRow(new string[] {
                        "5",
                        "[[emp().firstname]] =",
                        "Cage"});
            table434.AddRow(new string[] {
                        "6",
                        "[[emp().lastname]] =",
                        "Nicholas"});
#line 3050
   testRunner.And("the \'Records1\' in WorkFlow \'WorkflowUniqueWithNames\' debug inputs as", ((string)(null)), table434, "And ");
#line hidden
            TechTalk.SpecFlow.Table table435 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table435.AddRow(new string[] {
                        "1",
                        "[[emp(1).firstname]] =  Smith"});
            table435.AddRow(new string[] {
                        "2",
                        "[[emp(1).lastname]] =  Gordan"});
            table435.AddRow(new string[] {
                        "3",
                        "[[emp(2).firstname]] =  Nicholas"});
            table435.AddRow(new string[] {
                        "4",
                        "[[emp(2).lastname]] =  Cage"});
            table435.AddRow(new string[] {
                        "5",
                        "[[emp(3).firstname]] =  Cage"});
            table435.AddRow(new string[] {
                        "6",
                        "[[emp(3).lastname]] =  Nicholas"});
#line 3058
   testRunner.And("the \'Records1\' in Workflow \'WorkflowUniqueWithNames\' debug outputs as", ((string)(null)), table435, "And ");
#line hidden
            TechTalk.SpecFlow.Table table436 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table436.AddRow(new string[] {
                        "In Field(s)",
                        "[[emp(1).firstname]] = Smith",
                        ""});
            table436.AddRow(new string[] {
                        "",
                        "[[emp(2).firstname]] = Nicholas",
                        ""});
            table436.AddRow(new string[] {
                        "",
                        "[[emp(3).firstname]] = Cage",
                        ""});
            table436.AddRow(new string[] {
                        "",
                        "[[emp(1).lastname]] = Gordan",
                        ""});
            table436.AddRow(new string[] {
                        "",
                        "[[emp(2).lastname]] = Cage",
                        ""});
            table436.AddRow(new string[] {
                        "",
                        "[[emp(3).lastname]] = Nicholas",
                        ""});
            table436.AddRow(new string[] {
                        "",
                        "",
                        "[[emp().firstname]] ="});
#line 3066
   testRunner.And("the \'Unique\' in WorkFlow \'WorkflowUniqueWithNames\' debug inputs as", ((string)(null)), table436, "And ");
#line hidden
            TechTalk.SpecFlow.Table table437 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table437.AddRow(new string[] {
                        "1",
                        "[[emp(1).uni]]  = Smith"});
            table437.AddRow(new string[] {
                        "",
                        "[[emp(2).uni]]  = Nicholas"});
            table437.AddRow(new string[] {
                        "",
                        "[[emp(3).uni]]  = Cage"});
#line 3075
      testRunner.And("the \'Unique\' in Workflow \'WorkflowUniqueWithNames\' debug outputs as", ((string)(null)), table437, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique to return unique data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToReturnUniqueData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique to return unique data", ((string[])(null)));
#line 3082
this.ScenarioSetup(scenarioInfo);
#line 3083
      testRunner.Given("I have a workflow \"UniqueNamesTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table438 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table438.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Smith"});
            table438.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Gordan"});
            table438.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Nicholas"});
            table438.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Cage"});
            table438.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table438.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
            table438.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table438.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
#line 3084
      testRunner.And("\"UniqueNamesTest\" contains an Assign \"Records1\" as", ((string)(null)), table438, "And ");
#line hidden
            TechTalk.SpecFlow.Table table439 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table439.AddRow(new string[] {
                        "[[emp(*).firstname]],[[emp(*).lastname]]",
                        "[[emp().lastname]]",
                        "[[emp(*).uni]]"});
#line 3094
   testRunner.And("\"UniqueNamesTest\" contains an Unique \"Unique\" as", ((string)(null)), table439, "And ");
#line 3097
   testRunner.When("\"UniqueNamesTest\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3098
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table440 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table440.AddRow(new string[] {
                        "1",
                        "[[emp().firstname]] =",
                        "Smith"});
            table440.AddRow(new string[] {
                        "2",
                        "[[emp().lastname]] =",
                        "Gordan"});
            table440.AddRow(new string[] {
                        "3",
                        "[[emp().firstname]] =",
                        "Nicholas"});
            table440.AddRow(new string[] {
                        "4",
                        "[[emp().lastname]] =",
                        "Cage"});
            table440.AddRow(new string[] {
                        "5",
                        "[[emp().firstname]] =",
                        "Cage"});
            table440.AddRow(new string[] {
                        "6",
                        "[[emp().lastname]] =",
                        "Nicholas"});
            table440.AddRow(new string[] {
                        "7",
                        "[[emp().firstname]] =",
                        "Cage"});
            table440.AddRow(new string[] {
                        "8",
                        "[[emp().lastname]] =",
                        "Nicholas"});
#line 3099
   testRunner.And("the \'Records1\' in WorkFlow \'UniqueNamesTest\' debug inputs as", ((string)(null)), table440, "And ");
#line hidden
            TechTalk.SpecFlow.Table table441 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table441.AddRow(new string[] {
                        "1",
                        "[[emp(1).firstname]] =  Smith"});
            table441.AddRow(new string[] {
                        "2",
                        "[[emp(1).lastname]] =  Gordan"});
            table441.AddRow(new string[] {
                        "3",
                        "[[emp(2).firstname]] =  Nicholas"});
            table441.AddRow(new string[] {
                        "4",
                        "[[emp(2).lastname]] =  Cage"});
            table441.AddRow(new string[] {
                        "5",
                        "[[emp(3).firstname]] =  Cage"});
            table441.AddRow(new string[] {
                        "6",
                        "[[emp(3).lastname]] =  Nicholas"});
            table441.AddRow(new string[] {
                        "7",
                        "[[emp(4).firstname]] =  Cage"});
            table441.AddRow(new string[] {
                        "8",
                        "[[emp(4).lastname]] =  Nicholas"});
#line 3109
   testRunner.And("the \'Records1\' in Workflow \'UniqueNamesTest\' debug outputs as", ((string)(null)), table441, "And ");
#line hidden
            TechTalk.SpecFlow.Table table442 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table442.AddRow(new string[] {
                        "In Field(s)",
                        "[[emp(1).firstname]] = Smith",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(2).firstname]] = Nicholas",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(3).firstname]] = Cage",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(4).firstname]] = Cage",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(1).lastname]] = Gordan",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(2).lastname]] = Cage",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(3).lastname]] = Nicholas",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(4).lastname]] = Nicholas",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "",
                        "[[emp().lastname]] ="});
#line 3119
   testRunner.And("the \'Unique\' in WorkFlow \'UniqueNamesTest\' debug inputs as", ((string)(null)), table442, "And ");
#line hidden
            TechTalk.SpecFlow.Table table443 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table443.AddRow(new string[] {
                        "1",
                        "[[emp(1).uni]]  = Gordan"});
            table443.AddRow(new string[] {
                        "",
                        "[[emp(2).uni]]  = Cage"});
            table443.AddRow(new string[] {
                        "",
                        "[[emp(3).uni]]  = Nicholas"});
#line 3130
      testRunner.And("the \'Unique\' in Workflow \'UniqueNamesTest\' debug outputs as", ((string)(null)), table443, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueTool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool", ((string[])(null)));
#line 3136
this.ScenarioSetup(scenarioInfo);
#line 3137
      testRunner.Given("I have a workflow \"WorkflowAssingUnique\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table444 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table444.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "19"});
            table444.AddRow(new string[] {
                        "[[rs(2).a]]",
                        "20"});
            table444.AddRow(new string[] {
                        "[[rs(3).a]]",
                        "40"});
            table444.AddRow(new string[] {
                        "[[rs(4).a]]",
                        "50"});
            table444.AddRow(new string[] {
                        "[[rs(1).b]]",
                        "19"});
            table444.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "20"});
            table444.AddRow(new string[] {
                        "[[rs(3).b]]",
                        "30"});
            table444.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "80"});
#line 3138
      testRunner.And("\"WorkflowAssingUnique\" contains an Assign \"Records\" as", ((string)(null)), table444, "And ");
#line hidden
            TechTalk.SpecFlow.Table table445 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table445.AddRow(new string[] {
                        "[[rs(*).a]],[[rs(*).b]]",
                        "[[rs().a]]",
                        "[[rec().unique]]"});
#line 3148
   testRunner.And("\"WorkflowAssingUnique\" contains an Unique \"Unique rec\" as", ((string)(null)), table445, "And ");
#line 3151
   testRunner.When("\"WorkflowAssingUnique\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3152
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table446 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table446.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "19"});
            table446.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =",
                        "20"});
            table446.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =",
                        "40"});
            table446.AddRow(new string[] {
                        "4",
                        "[[rs(4).a]] =",
                        "50"});
            table446.AddRow(new string[] {
                        "5",
                        "[[rs(1).b]] =",
                        "19"});
            table446.AddRow(new string[] {
                        "6",
                        "[[rs(2).b]] =",
                        "20"});
            table446.AddRow(new string[] {
                        "7",
                        "[[rs(3).b]] =",
                        "30"});
            table446.AddRow(new string[] {
                        "8",
                        "[[rs(4).b]] =",
                        "80"});
#line 3153
   testRunner.And("the \'Records\' in WorkFlow \'WorkflowAssingUnique\' debug inputs as", ((string)(null)), table446, "And ");
#line hidden
            TechTalk.SpecFlow.Table table447 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table447.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =  19"});
            table447.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =  20"});
            table447.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =  40"});
            table447.AddRow(new string[] {
                        "4",
                        "[[rs(4).a]] =  50"});
            table447.AddRow(new string[] {
                        "5",
                        "[[rs(1).b]] =  19"});
            table447.AddRow(new string[] {
                        "6",
                        "[[rs(2).b]] =  20"});
            table447.AddRow(new string[] {
                        "7",
                        "[[rs(3).b]] =  30"});
            table447.AddRow(new string[] {
                        "8",
                        "[[rs(4).b]] =  80"});
#line 3163
   testRunner.And("the \'Records\' in Workflow \'WorkflowAssingUnique\' debug outputs as", ((string)(null)), table447, "And ");
#line hidden
            TechTalk.SpecFlow.Table table448 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table448.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).a]] = 19",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[rs(2).a]] = 20",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[rs(3).a]] = 40",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[rs(4).a]] = 50",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[rs(1).b]] = 19",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[rs(2).b]] = 20",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[rs(3).b]] = 30",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[rs(4).b]] = 80",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "",
                        "[[rs().a]] ="});
#line 3173
   testRunner.And("the \'Unique rec\' in WorkFlow \'WorkflowAssingUnique\' debug inputs as", ((string)(null)), table448, "And ");
#line hidden
            TechTalk.SpecFlow.Table table449 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table449.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 19"});
            table449.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 20"});
            table449.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 40"});
            table449.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 50"});
#line 3184
      testRunner.And("the \'Unique rec\' in Workflow \'WorkflowAssingUnique\' debug outputs as", ((string)(null)), table449, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Calculation using Star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithCalculationUsingStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Calculation using Star notation", ((string[])(null)));
#line 3192
this.ScenarioSetup(scenarioInfo);
#line 3193
      testRunner.Given("I have a workflow \"WorkflowWithAssignCalculationUsingStar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table450 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table450.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "19"});
            table450.AddRow(new string[] {
                        "[[rs(2).a]]",
                        "20"});
            table450.AddRow(new string[] {
                        "[[rs(3).a]]",
                        "40"});
#line 3194
      testRunner.And("\"WorkflowWithAssignCalculationUsingStar\" contains an Assign \"Records\" as", ((string)(null)), table450, "And ");
#line hidden
            TechTalk.SpecFlow.Table table451 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table451.AddRow(new string[] {
                        "[[rec().sum]]",
                        "=[[rs(*).a]]+1"});
#line 3199
   testRunner.And("\"WorkflowWithAssignCalculationUsingStar\" contains an Assign \"Calculation\" as", ((string)(null)), table451, "And ");
#line 3202
   testRunner.When("\"WorkflowWithAssignCalculationUsingStar\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3203
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table452 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table452.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "19"});
            table452.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =",
                        "20"});
            table452.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =",
                        "40"});
#line 3204
   testRunner.And("the \'Records\' in WorkFlow \'WorkflowWithAssignCalculationUsingStar\' debug inputs a" +
                    "s", ((string)(null)), table452, "And ");
#line hidden
            TechTalk.SpecFlow.Table table453 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table453.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =  19"});
            table453.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =  20"});
            table453.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =  40"});
#line 3209
   testRunner.And("the \'Records\' in Workflow \'WorkflowWithAssignCalculationUsingStar\' debug outputs " +
                    "as", ((string)(null)), table453, "And ");
#line hidden
            TechTalk.SpecFlow.Table table454 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table454.AddRow(new string[] {
                        "1",
                        "[[rec().sum]] =",
                        ""});
#line 3214
    testRunner.And("the \'Calculation\' in WorkFlow \'WorkflowWithAssignCalculationUsingStar\' debug inpu" +
                    "ts as", ((string)(null)), table454, "And ");
#line hidden
            TechTalk.SpecFlow.Table table455 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table455.AddRow(new string[] {
                        "1",
                        "[[rec(1).sum]] ="});
#line 3217
   testRunner.And("the \'Calculation\' in Workflow \'WorkflowWithAssignCalculationUsingStar\' debug outp" +
                    "uts as", ((string)(null)), table455, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Saving with Different Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowSavingWithDifferentVersions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Saving with Different Versions", ((string[])(null)));
#line 3281
this.ScenarioSetup(scenarioInfo);
#line 3282
  testRunner.Given("I have a workflow \"WorkflowWithVersionAssignTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table456 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table456.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table456.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 3283
  testRunner.And("\"WorkflowWithVersionAssignTest\" contains an Assign \"VarsAssign\" as", ((string)(null)), table456, "And ");
#line 3287
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3288
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"0\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 3289
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"2\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3290
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"2\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table457 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table457.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table457.AddRow(new string[] {
                        "v.2 DateTime"});
            table457.AddRow(new string[] {
                        "v.1 DateTime"});
#line 3291
   testRunner.And("explorer as", ((string)(null)), table457, "And ");
#line 3296
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"3\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3297
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"5\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table458 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table458.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table458.AddRow(new string[] {
                        "v.5 DateTime Save"});
            table458.AddRow(new string[] {
                        "v.4 DateTime Save"});
            table458.AddRow(new string[] {
                        "v.3 DateTime Save"});
            table458.AddRow(new string[] {
                        "v.2 DateTime Save"});
            table458.AddRow(new string[] {
                        "v.1 DateTime Save"});
#line 3298
   testRunner.And("explorer as", ((string)(null)), table458, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing workflow of different versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingWorkflowOfDifferentVersions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing workflow of different versions", ((string[])(null)));
#line 3308
this.ScenarioSetup(scenarioInfo);
#line 3309
  testRunner.Given("I have a workflow \"WorkflowWithVersionAssignExecuted2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table459 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table459.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table459.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 3310
  testRunner.And("\"WorkflowWithVersionAssignExecuted2\" contains an Assign \"VarsAssign\" as", ((string)(null)), table459, "And ");
#line 3314
   testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3315
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"0\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 3316
   testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3317
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table460 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table460.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "New"});
            table460.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Test"});
#line 3318
   testRunner.And("the \'VarsAssign\' in WorkFlow \'WorkflowWithVersionAssignExecuted2\' debug inputs as" +
                    "", ((string)(null)), table460, "And ");
#line hidden
            TechTalk.SpecFlow.Table table461 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table461.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = New"});
            table461.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Test"});
#line 3322
   testRunner.And("the \'VarsAssign\' in Workflow \'WorkflowWithVersionAssignExecuted2\' debug outputs a" +
                    "s", ((string)(null)), table461, "And ");
#line 3326
   testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"2\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3327
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"2\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table462 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table462.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table462.AddRow(new string[] {
                        "v.2 DateTime"});
            table462.AddRow(new string[] {
                        "v.1 DateTime"});
#line 3328
   testRunner.And("explorer as", ((string)(null)), table462, "And ");
#line hidden
            TechTalk.SpecFlow.Table table463 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table463.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table463.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table463.AddRow(new string[] {
                        "[[rec().a]]",
                        "V1"});
#line 3333
  testRunner.And("\"WorkflowWithVersionAssignExecuted2\" contains an Assign \"VarsAssign2\" as", ((string)(null)), table463, "And ");
#line 3338
  testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3339
  testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3340
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table464 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table464.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "New"});
            table464.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Test"});
            table464.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "V1"});
#line 3341
  testRunner.And("the \'VarsAssign2\' in WorkFlow \'WorkflowWithVersionAssignExecuted2\' debug inputs a" +
                    "s", ((string)(null)), table464, "And ");
#line 3346
  testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3347
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"4\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table465 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table465.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table465.AddRow(new string[] {
                        "v.4 DateTime"});
            table465.AddRow(new string[] {
                        "v.3 DateTime"});
            table465.AddRow(new string[] {
                        "v.2 DateTime"});
            table465.AddRow(new string[] {
                        "v.1 DateTime"});
#line 3348
   testRunner.And("explorer as", ((string)(null)), table465, "And ");
#line 3355
   testRunner.When("I rollback \"WorkflowWithVersionAssignExecuted\" to version \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3356
   testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3357
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table466 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table466.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = New"});
            table466.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Test"});
#line 3358
   testRunner.And("the \'VarsAssign\' in Workflow \'WorkflowWithVersionAssignExecuted2\' debug outputs a" +
                    "s", ((string)(null)), table466, "And ");
#line 3362
   testRunner.And("the \'VarsAssign\' in Workflow \'WorkflowWithVersionAssignExecuted2\' debug outputs d" +
                    "oes not exist|", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
