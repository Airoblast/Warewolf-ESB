// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18063
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Composition
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WorkflowExecutionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WorkflowExecution.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WorkflowExecution", "In order to execute a workflow on the server\r\nAs a Warewolf user\r\nI want to be ab" +
                    "le to build workflows and execute them against the server", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "WorkflowExecution")))
            {
                Dev2.Activities.Specs.Composition.WorkflowExecutionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow executing against the server", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
  testRunner.Given("I have a workflow \"WorkflowWithAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 8
  testRunner.And("\"WorkflowWithAssign\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table1, "And ");
#line 12
   testRunner.When("\"WorkflowWithAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table2.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table2.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 14
   testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowWithAssign\' debug inputs as", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table3.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table3.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 18
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowWithAssign\' debug outputs as", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools executing against the server", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndCount\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table4.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table4.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 25
   testRunner.And("\"WorkflowWithAssignAndCount\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table4, "And ");
#line 29
   testRunner.And("\"WorkflowWithAssignAndCount\" contains Count Record \"CountRec\" on \"[[rec()]]\" into" +
                    " \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
   testRunner.When("\"WorkflowWithAssignAndCount\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table5.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table5.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 32
   testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowWithAssignAndCount\' debug inputs as", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table6.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table6.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 36
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowWithAssignAndCount\' debug outputs as", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table7.AddRow(new string[] {
                        "[[rec(1).a]] = yes"});
            table7.AddRow(new string[] {
                        "[[rec(2).a]] = no"});
#line 40
   testRunner.And("the \'CountRec\' in WorkFlow \'WorkflowWithAssignAndCount\' debug inputs as", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table8.AddRow(new string[] {
                        "[[count]] = 2"});
#line 44
   testRunner.And("the \'CountRec\' in Workflow \'WorkflowWithAssignAndCount\' debug outputs as", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow executing against the server with a database service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowExecutingAgainstTheServerWithADatabaseService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow executing against the server with a database service", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
  testRunner.Given("I have a workflow \"TestWFWithDBService\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table9.AddRow(new string[] {
                        "",
                        "",
                        "dbo_proc_SmallFetch(*).Value",
                        "[[dbo_proc_SmallFetch().Value]]"});
#line 50
  testRunner.And("\"TestWFWithDBService\" contains a \"database\" service \"Fetch\" with mappings", ((string)(null)), table9, "And ");
#line 53
  testRunner.And("\"TestWFWithDBService\" contains Count Record \"Count\" on \"[[dbo_proc_SmallFetch()]]" +
                    "\" into \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
   testRunner.When("\"TestWFWithDBService\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table10.AddRow(new string[] {
                        ""});
#line 56
   testRunner.And("the \'Fetch\' in WorkFlow \'TestWFWithDBService\' debug inputs as", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table11.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(9).Value]] = 5"});
#line 59
   testRunner.And("the \'Fetch\' in Workflow \'TestWFWithDBService\' debug outputs as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(1).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(2).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(3).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(4).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(5).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(6).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(7).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(8).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(9).Value]] = 5"});
#line 62
   testRunner.And("the \'Count\' in WorkFlow \'TestWFWithDBService\' debug inputs as", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table13.AddRow(new string[] {
                        "[[count]] = 9"});
#line 73
  testRunner.And("the \'Count\' in Workflow \'TestWFWithDBService\' debug outputs as", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with an assign and webservice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAnAssignAndWebservice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with an assign and webservice", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
  testRunner.Given("I have a workflow \"TestWebServiceWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table14.AddRow(new string[] {
                        "[[ext]]",
                        "json"});
            table14.AddRow(new string[] {
                        "[[prefix]]",
                        "a"});
#line 79
  testRunner.And("\"TestWebServiceWF\" contains an Assign \"Inputs\" as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table15.AddRow(new string[] {
                        "extension",
                        "[[ext]]",
                        "Countries(*).CountryID",
                        "[[Countries().CountryID]]"});
            table15.AddRow(new string[] {
                        "prefix",
                        "[[prefix]]",
                        "Countries(*).Description",
                        "[[Countries().Description]]"});
#line 83
  testRunner.And("\"TestWebServiceWF\" contains a \"webservice\" service \"InternalCountriesServiceTest\"" +
                    " with mappings", ((string)(null)), table15, "And ");
#line 87
   testRunner.When("\"TestWebServiceWF\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table16.AddRow(new string[] {
                        "1",
                        "[[ext]] =",
                        "json"});
            table16.AddRow(new string[] {
                        "2",
                        "[[prefix]] =",
                        "a"});
#line 89
    testRunner.And("the \'Inputs\' in WorkFlow \'TestWebServiceWF\' debug inputs as", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table17.AddRow(new string[] {
                        "1",
                        "[[ext]] = json"});
            table17.AddRow(new string[] {
                        "2",
                        "[[prefix]] = a"});
#line 93
   testRunner.And("the \'Inputs\' in Workflow \'TestWebServiceWF\' debug outputs as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table18.AddRow(new string[] {
                        "[[ext]] = json"});
            table18.AddRow(new string[] {
                        "[[prefix]] = a"});
#line 97
   testRunner.And("the \'InternalCountriesServiceTest\' in WorkFlow \'TestWebServiceWF\' debug inputs as" +
                    "", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table19.AddRow(new string[] {
                        "[[Countries(10).CountryID]] = 10"});
            table19.AddRow(new string[] {
                        "[[Countries(10).Description]] = Azerbaijan"});
#line 101
   testRunner.And("the \'InternalCountriesServiceTest\' in Workflow \'TestWebServiceWF\' debug outputs a" +
                    "s", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with an assign and remote workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAnAssignAndRemoteWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with an assign and remote workflow", ((string[])(null)));
#line 107
this.ScenarioSetup(scenarioInfo);
#line 108
 testRunner.Given("I have a workflow \"TestAssignAndRemote\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table20.AddRow(new string[] {
                        "[[inputData]]",
                        "hello"});
#line 109
  testRunner.And("\"TestAssignAndRemote\" contains an Assign \"AssignData\" as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table21.AddRow(new string[] {
                        "input",
                        "[[inputData]]",
                        "output",
                        "[[output]]"});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "values(*).upper",
                        "[[values().up]]"});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "values(*).lower",
                        "[[values().low]]"});
#line 112
 testRunner.And("\"TestAssignAndRemote\" contains \"WorkflowUsedBySpecs\" from server \"Remote Connecti" +
                    "on Integration\" with mapping as", ((string)(null)), table21, "And ");
#line 117
   testRunner.When("\"TestAssignAndRemote\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table22.AddRow(new string[] {
                        "1",
                        "[[inputData]] =",
                        "hello"});
#line 119
    testRunner.And("the \'AssignData\' in WorkFlow \'TestAssignAndRemote\' debug inputs as", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table23.AddRow(new string[] {
                        "1",
                        "[[inputData]] = hello"});
#line 122
   testRunner.And("the \'AssignData\' in Workflow \'TestAssignAndRemote\' debug outputs as", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table24.AddRow(new string[] {
                        "[[inputData]] = hello"});
#line 125
    testRunner.And("the \'WorkflowUsedBySpecs\' in WorkFlow \'TestAssignAndRemote\' debug inputs as", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table25.AddRow(new string[] {
                        "1",
                        "[[in]] = hello"});
#line 128
   testRunner.And("the \'Setup Assign (1)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table26.AddRow(new string[] {
                        "1",
                        "[[in]] = HELLO"});
#line 131
   testRunner.And("the \'Convert Case (1)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table27.AddRow(new string[] {
                        "1",
                        "[[output]] = HELLO"});
            table27.AddRow(new string[] {
                        "2",
                        "[[values(1).upper]] = HELLO"});
            table27.AddRow(new string[] {
                        "3",
                        "[[values(1).lower]] = hello"});
#line 134
   testRunner.And("the \'Final Assign (3)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table28.AddRow(new string[] {
                        "[[output]] = HELLO"});
            table28.AddRow(new string[] {
                        "[[values(1).up]] = HELLO"});
            table28.AddRow(new string[] {
                        "[[values(1).low]] = hello"});
#line 139
   testRunner.And("the \'WorkflowUsedBySpecs\' in Workflow \'TestAssignAndRemote\' debug outputs as", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Remote Workflow with an remote workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void RemoteWorkflowWithAnRemoteWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remote Workflow with an remote workflow", ((string[])(null)));
#line 147
this.ScenarioSetup(scenarioInfo);
#line 148
   testRunner.Given("I have server a \"Remote Connection\" with workflow \"Bug11612_Outer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
   testRunner.When("\"Remote Connection\" is the active environment used to execute \"Bug11612_Outer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 150
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table29.AddRow(new string[] {
                        "2"});
            table29.AddRow(new string[] {
                        "Execute workflow asynchronously: False"});
#line 151
   testRunner.And("the \'BUGS\\Bug11612_Inner\' in WorkFlow \'Bug11612_Outer\' debug inputs as", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table30.AddRow(new string[] {
                        "[[result]] = 3"});
#line 155
  testRunner.And("the \'BUGS\\Bug11612_Inner\' in Workflow \'Bug11612_Outer\' debug outputs as", ((string)(null)), table30, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
            "rver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignBaseConvertAndCaseConvertToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
                    "rver", ((string[])(null)));
#line 160
this.ScenarioSetup(scenarioInfo);
#line 161
   testRunner.Given("I have a workflow \"WorkflowWithAssignBaseConvertandCaseconvert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table31.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
            table31.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table31.AddRow(new string[] {
                        "[[rec().a]]",
                        "100"});
#line 162
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains an Assign \"Assign1\" as", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table32.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "UPPER"});
#line 167
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains case convert \"Case to Conv" +
                    "ert\" as", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table33.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Text",
                        "Base 64"});
#line 170
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains Base convert \"Base to Conv" +
                    "ert\" as", ((string)(null)), table33, "And ");
#line 173
   testRunner.When("\"WorkflowWithAssignBaseConvertandCaseconvert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table34.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
            table34.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "test"});
            table34.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "100"});
#line 175
   testRunner.And("the \'Assign1\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' debug inp" +
                    "uts as", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table35.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  50"});
            table35.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  test"});
            table35.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  100"});
#line 180
    testRunner.And("the \'Assign1\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' debug out" +
                    "puts as", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table36.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = test",
                        "UPPER"});
#line 185
   testRunner.And("the \'Case to Convert\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug inputs as", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table37.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = TEST"});
#line 188
   testRunner.And("the \'Case to Convert\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug outputs as", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table38.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50",
                        "Text",
                        "Base 64"});
#line 191
   testRunner.And("the \'Base to Convert\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug inputs as", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table39.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = NTA="});
#line 194
      testRunner.And("the \'Base to Convert\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug outputs as", ((string)(null)), table39, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 3 Assigns tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWith3AssignsToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 3 Assigns tools executing against the server", ((string[])(null)));
#line 232
this.ScenarioSetup(scenarioInfo);
#line 233
   testRunner.Given("I have a workflow \"WorkflowWith3Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table40.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(1).a"});
#line 234
   testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool1\" as", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table41.AddRow(new string[] {
                        "[[test]]",
                        "rec(1).a"});
            table41.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 237
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool2\" as", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table42.AddRow(new string[] {
                        "[[new]]",
                        "[[[[test]]]]"});
#line 241
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool3\" as", ((string)(null)), table42, "And ");
#line 244
   testRunner.When("\"WorkflowWith3Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 245
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table43.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(1).a"});
#line 246
   testRunner.And("the \'Assigntool1\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table44.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(1).a"});
#line 249
   testRunner.And("the \'Assigntool1\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table45.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "rec(1).a"});
            table45.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = rec(1).a",
                        "Warewolf"});
#line 252
   testRunner.And("the \'Assigntool2\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table46.AddRow(new string[] {
                        "1",
                        "[[test]] = rec(1).a"});
            table46.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = Warewolf"});
#line 256
   testRunner.And("the \'Assigntool2\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table46, "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table47.AddRow(new string[] {
                        "1",
                        "[[new]] =",
                        "[[[[test]]]] = Warewolf"});
#line 260
    testRunner.And("the \'Assigntool3\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table48.AddRow(new string[] {
                        "1",
                        "[[new]] = Warewolf"});
#line 263
   testRunner.And("the \'Assigntool3\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table48, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit executing against the server", ((string[])(null)));
#line 295
this.ScenarioSetup(scenarioInfo);
#line 296
      testRunner.Given("I have a workflow \"WorkflowWithAssignDataMergeAndDataSplittools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table49.AddRow(new string[] {
                        "[[a]]",
                        "Test"});
            table49.AddRow(new string[] {
                        "[[b]]",
                        "Warewolf"});
            table49.AddRow(new string[] {
                        "[[split().a]]",
                        "Workflow"});
#line 297
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains an Assign \"Assign To merg" +
                    "e\" as", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table50.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table50.AddRow(new string[] {
                        "[[b]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 302
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains Data Merge \"Data Merge\" i" +
                    "nto \"[[result]]\" as", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table51.AddRow(new string[] {
                        "[[result]][[split().a]]",
                        "[[rec().b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table51.AddRow(new string[] {
                        "",
                        "[[rec().b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 306
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains Data Split \"Data Split\" a" +
                    "s", ((string)(null)), table51, "And ");
#line 310
   testRunner.When("\"WorkflowWithAssignDataMergeAndDataSplittools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table52.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "Test"});
            table52.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "Warewolf"});
            table52.AddRow(new string[] {
                        "3",
                        "[[split().a]] =",
                        "Workflow"});
#line 312
   testRunner.And("the \'Assign To merge\' in WorkFlow \'WorkflowWithAssignDataMergeAndDataSplittools\' " +
                    "debug inputs as", ((string)(null)), table52, "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table53.AddRow(new string[] {
                        "1",
                        "[[a]]         =  Test"});
            table53.AddRow(new string[] {
                        "2",
                        "[[b]]         =  Warewolf"});
            table53.AddRow(new string[] {
                        "3",
                        "[[split(1).a]] =  Workflow"});
#line 317
  testRunner.And("the \'Assign To merge\' in Workflow \'WorkflowWithAssignDataMergeAndDataSplittools\' " +
                    "debug outputs as", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table54.AddRow(new string[] {
                        "1",
                        "[[a]] = Test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table54.AddRow(new string[] {
                        "2",
                        "[[b]] = Warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 322
   testRunner.And("the \'Data Merge\' in WorkFlow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " inputs as", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table55.AddRow(new string[] {
                        "[[result]] = TestWarewolf"});
#line 326
   testRunner.And("the \'Data Merge\' in Workflow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " outputs as", ((string)(null)), table55, "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table56.AddRow(new string[] {
                        "[[result]][[split(1).a]] = TestWarewolfWorkflow",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().b]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table56.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec().b]] =",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 329
   testRunner.And("the \'Data Split\' in WorkFlow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " inputs as", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table57.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = Test"});
            table57.AddRow(new string[] {
                        "",
                        "[[rec(2).b]] = Warewolf"});
            table57.AddRow(new string[] {
                        "",
                        "[[rec(3).b]] = Work"});
            table57.AddRow(new string[] {
                        "",
                        "[[rec(4).b]] = flow"});
            table57.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = Test"});
            table57.AddRow(new string[] {
                        "",
                        "[[rec(2).b]] = Warewolf"});
            table57.AddRow(new string[] {
                        "",
                        "[[rec(3).b]] = Work"});
            table57.AddRow(new string[] {
                        "",
                        "[[rec(4).b]] = flow"});
#line 333
   testRunner.And("the \'Data Split\' in Workflow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " outputs as", ((string)(null)), table57, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignsAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns and DataSplit executing against the server", ((string[])(null)));
#line 345
this.ScenarioSetup(scenarioInfo);
#line 346
      testRunner.Given("I have a workflow \"WorkflowWithAssignandDataSplittools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table58.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table58.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table58.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "test"});
#line 347
   testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains an Assign \"splitvalues1\" as", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table59.AddRow(new string[] {
                        "[[test]]",
                        "warewolf"});
#line 352
    testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains an Assign \"splitvalues2\" as", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table60.AddRow(new string[] {
                        "[[[[rs(1).a]]]]",
                        "[[rec(1).a]]",
                        "Index",
                        "[[[[a]]]]",
                        "Unselected",
                        ""});
#line 355
   testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains Data Split \"DataSpliting\" as", ((string)(null)), table60, "And ");
#line 358
   testRunner.When("\"WorkflowWithAssignandDataSplittools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 359
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table61.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table61.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table61.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]] =",
                        "test"});
#line 360
   testRunner.And("the \'splitvalues1\' in WorkFlow \'WorkflowWithAssignandDataSplittools\' debug inputs" +
                    " as", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table62.AddRow(new string[] {
                        "1",
                        "[[a]]         =  b"});
            table62.AddRow(new string[] {
                        "2",
                        "[[b]]         =  2"});
            table62.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]]   =  test"});
#line 365
  testRunner.And("the \'splitvalues1\' in Workflow \'WorkflowWithAssignandDataSplittools\' debug output" +
                    "s as", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table63.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "warewolf"});
#line 370
  testRunner.And("the \'splitvalues2\' in WorkFlow \'WorkflowWithAssignandDataSplittools\' debug inputs" +
                    " as", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table64.AddRow(new string[] {
                        "1",
                        "[[test]] =  warewolf"});
#line 373
  testRunner.And("the \'splitvalues2\' in Workflow \'WorkflowWithAssignandDataSplittools\' debug output" +
                    "s as", ((string)(null)), table64, "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table65.AddRow(new string[] {
                        "[[[[rs(1).a]]]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).a]] =",
                        "Index",
                        "[[[[a]]]] = 2",
                        "No",
                        ""});
#line 376
   testRunner.And("the \'DataSpliting\' in WorkFlow \'WorkflowWithAssignandDataSplittools\' debug inputs" +
                    " as", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table66.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = lf"});
#line 379
   testRunner.And("the \'DataSpliting\' in Workflow \'WorkflowWithAssignandDataSplittools\' debug output" +
                    "s as", ((string)(null)), table66, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Sequence(Assign, Datamerge, Data Split, Find Index and R" +
            "eplace) executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignAndSequenceAssignDatamergeDataSplitFindIndexAndReplaceExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Sequence(Assign, Datamerge, Data Split, Find Index and R" +
                    "eplace) executing against the server", ((string[])(null)));
#line 424
this.ScenarioSetup(scenarioInfo);
#line 425
      testRunner.Given("I have a workflow \"workflowithAssignandsequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table67.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table67.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
            table67.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
            table67.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
#line 426
       testRunner.And("\"workflowithAssignandsequence\" contains an Assign \"Assign for sequence\" as", ((string)(null)), table67, "And ");
#line 432
      testRunner.And("\"workflowithAssignandsequence\" contains a Sequence \"Test1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table68.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table68.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 433
   testRunner.And("\"Test1\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table69.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(1).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table69.AddRow(new string[] {
                        "",
                        "[[rec(2).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 437
   testRunner.And("\"Test1\" contains Data Split \"Data Split\" as", ((string)(null)), table69, "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table70.AddRow(new string[] {
                        "[[rec().a]]",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 441
   testRunner.And("\"Test1\" contains Find Index \"Index\" into \"[[indexResult]]\" as", ((string)(null)), table70, "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table71.AddRow(new string[] {
                        "[[rec(*)]]",
                        "e",
                        "REPLACED"});
#line 444
   testRunner.And("\"Test1\" contains Replace \"Replacing\" into \"[[replaceResult]]\" as", ((string)(null)), table71, "And ");
#line 447
   testRunner.When("\"workflowithAssignandsequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 448
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table72.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "test"});
            table72.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "nothing"});
            table72.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "warewolf"});
            table72.AddRow(new string[] {
                        "4",
                        "[[rec().b]] =",
                        "nothing"});
#line 449
   testRunner.And("the \'Assign for sequence\' in WorkFlow \'workflowithAssignandsequence\' debug inputs" +
                    " as", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table73.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test"});
            table73.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = nothing"});
            table73.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] = warewolf"});
            table73.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] = nothing"});
#line 455
    testRunner.And("the \'Assign for sequence\' in Workflow \'workflowithAssignandsequence\' debug output" +
                    "s as", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table74.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table74.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 461
   testRunner.And("the \'Data Merge\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table74, "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table75.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 465
   testRunner.And("the \'Data Merge\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table75, "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table76.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table76.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 468
   testRunner.And("the \'Data Split\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table76, "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table77.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = test"});
            table77.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = warewolf"});
#line 472
   testRunner.And("the \'Data Split\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table77, "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table78.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 476
      testRunner.And("the \'Index\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table79.AddRow(new string[] {
                        "[[indexResult]] = 4"});
#line 479
   testRunner.And("the \'Index\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table80.AddRow(new string[] {
                        "[[rec(1).a]] = test",
                        "",
                        ""});
            table80.AddRow(new string[] {
                        "[[rec(1).b]] = test",
                        "",
                        ""});
            table80.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "",
                        ""});
            table80.AddRow(new string[] {
                        "[[rec(2).b]] = warewolf",
                        "e",
                        "REPLACED"});
#line 482
   testRunner.And("the \'Replacing\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table80, "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table81.AddRow(new string[] {
                        "[[rec(1).a]] = tREPLACEDst"});
            table81.AddRow(new string[] {
                        "[[rec(1).b]] = tREPLACEDst"});
            table81.AddRow(new string[] {
                        "[[rec(2).a]] = warREPLACEDwolf"});
            table81.AddRow(new string[] {
                        "[[rec(2).b]] = warREPLACEDwolf"});
            table81.AddRow(new string[] {
                        "[[replaceResult]] = 4"});
#line 488
   testRunner.And("the \'Replacing\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table81, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create and Delete folder tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateAndDeleteFolderToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create and Delete folder tools executing against the server", ((string[])(null)));
#line 496
this.ScenarioSetup(scenarioInfo);
#line 497
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateandDeleteRecord\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table82.AddRow(new string[] {
                        "[[rec().a]]",
                        "C:\\copied00.txt"});
#line 498
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Assign \"Assign to create\" a" +
                    "s", ((string)(null)), table82, "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table83.AddRow(new string[] {
                        "[[rec().a]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 501
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Create \"Create1\" as", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset",
                        "Result"});
            table84.AddRow(new string[] {
                        "[[rec().a]]",
                        "[[res2]]"});
#line 504
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Delete Folder \"DeleteFolder" +
                    "\" as", ((string)(null)), table84, "And ");
#line 507
   testRunner.When("\"WorkflowWithAssignCreateandDeleteRecord\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 508
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table85.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "C:\\copied00.txt"});
#line 509
   testRunner.And("the \'Assign to create\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecord\' debu" +
                    "g inputs as", ((string)(null)), table85, "And ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table86.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = C:\\copied00.txt"});
#line 512
   testRunner.And("the \'Assign to create\' in Workflow \'WorkflowWithAssignCreateandDeleteRecord\' debu" +
                    "g outputs as", ((string)(null)), table86, "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table87.AddRow(new string[] {
                        "[[rec(1).a]] = C:\\copied00.txt",
                        "True",
                        "\"\"",
                        "\"\""});
#line 515
  testRunner.And("the \'Create1\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecord\' debug inputs " +
                    "as", ((string)(null)), table87, "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table88.AddRow(new string[] {
                        "[[res1]] = Success"});
#line 518
    testRunner.And("the \'Create1\' in Workflow \'WorkflowWithAssignCreateandDeleteRecord\' debug outputs" +
                    " as", ((string)(null)), table88, "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table89.AddRow(new string[] {
                        "[[rec(1).a]] = C:\\copied00.txt",
                        "\"\"",
                        "\"\""});
#line 521
   testRunner.And("the \'DeleteFolder\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecord\' debug in" +
                    "puts as", ((string)(null)), table89, "And ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table90.AddRow(new string[] {
                        "[[res2]] = Success"});
#line 524
   testRunner.And("the \'DeleteFolder\' in Workflow \'WorkflowWithAssignCreateandDeleteRecord\' debug ou" +
                    "tputs as", ((string)(null)), table90, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create and Delete Record tools with incorrect input path exe" +
            "cuting against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateAndDeleteRecordToolsWithIncorrectInputPathExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create and Delete Record tools with incorrect input path exe" +
                    "cuting against the server", ((string[])(null)));
#line 529
this.ScenarioSetup(scenarioInfo);
#line 530
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table91.AddRow(new string[] {
                        "[[rec().a]]",
                        "create.txt"});
#line 531
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Assign \"Assign to cr" +
                    "eate\" as", ((string)(null)), table91, "And ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table92.AddRow(new string[] {
                        "[[rec().a]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 534
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Create \"Create1\" as", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "File Or Folder",
                        "Result"});
            table93.AddRow(new string[] {
                        "[[rec().a]]",
                        "[[res1]]"});
#line 537
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Delete \"Delete\" as", ((string)(null)), table93, "And ");
#line 540
   testRunner.When("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 541
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table94.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "create.txt"});
#line 542
   testRunner.And("the \'Assign to create\' in WorkFlow \'WorkflowWithAssignCreateDeleteRecordNoneExist" +
                    "1\' debug inputs as", ((string)(null)), table94, "And ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table95.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = create.txt"});
#line 545
   testRunner.And("the \'Assign to create\' in Workflow \'WorkflowWithAssignCreateDeleteRecordNoneExist" +
                    "1\' debug outputs as", ((string)(null)), table95, "And ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table96.AddRow(new string[] {
                        "[[rec(1).a]] = create.txt",
                        "True",
                        "Username =",
                        "Password ="});
#line 548
   testRunner.And("the \'Create1\' in WorkFlow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug " +
                    "inputs as", ((string)(null)), table96, "And ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table97.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 551
   testRunner.And("the \'Create1\' in Workflow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug " +
                    "outputs as", ((string)(null)), table97, "And ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table98.AddRow(new string[] {
                        "[[rec(1).a]] = create.txt",
                        "Username =",
                        "Password ="});
#line 554
   testRunner.And("the \'Delete\' in WorkFlow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug i" +
                    "nputs as", ((string)(null)), table98, "And ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table99.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 557
   testRunner.And("the \'Delete\' in Workflow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug o" +
                    "utputs as", ((string)(null)), table99, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools executing against the server", ((string[])(null)));
#line 561
this.ScenarioSetup(scenarioInfo);
#line 562
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table100.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table100.AddRow(new string[] {
                        "[[b]]",
                        "test"});
            table100.AddRow(new string[] {
                        "[[test]]",
                        "warewolf"});
#line 563
   testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"tool1\" as", ((string)(null)), table100, "And ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table101.AddRow(new string[] {
                        "[[[[a]]]]",
                        "[[[[[[a]]]]]]"});
#line 568
   testRunner.And("\"WorkflowWith2Assigntools\" contains an Assign \"tool2\" as", ((string)(null)), table101, "And ");
#line 571
   testRunner.When("\"WorkflowWith2Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 572
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table102.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table102.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
            table102.AddRow(new string[] {
                        "3",
                        "[[test]] =",
                        "warewolf"});
#line 573
   testRunner.And("the \'tool1\' in WorkFlow \'WorkflowWith2Assigntools\' debug inputs as", ((string)(null)), table102, "And ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table103.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table103.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
            table103.AddRow(new string[] {
                        "3",
                        "[[test]] = warewolf"});
#line 578
   testRunner.And("the \'tool1\' in Workflow \'WorkflowWith2Assigntools\' debug outputs as", ((string)(null)), table103, "And ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table104.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = test",
                        "[[[[[[a]]]]]] = warewolf"});
#line 583
   testRunner.And("the \'tool2\' in WorkFlow \'WorkflowWith2Assigntools\' debug inputs as", ((string)(null)), table104, "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table105.AddRow(new string[] {
                        "1",
                        "[[b]] =  warewolf"});
#line 586
   testRunner.And("the \'tool2\' in Workflow \'WorkflowWith2Assigntools\' debug outputs as", ((string)(null)), table105, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools by using recordsets in fields executing against the " +
            "server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsByUsingRecordsetsInFieldsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools by using recordsets in fields executing against the " +
                    "server", ((string[])(null)));
#line 592
this.ScenarioSetup(scenarioInfo);
#line 593
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntoolswithrecordsets\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table106.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(2).a"});
            table106.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
#line 594
   testRunner.And("\"WorkflowWith2Assigntoolswithrecordsets\" contains an Assign \"rec1\" as", ((string)(null)), table106, "And ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table107.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "warewolf"});
#line 598
   testRunner.And("\"WorkflowWith2Assigntoolswithrecordsets\" contains an Assign \"rec2\" as", ((string)(null)), table107, "And ");
#line 601
   testRunner.When("\"WorkflowWith2Assigntoolswithrecordsets\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 602
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table108.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(2).a"});
            table108.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "test"});
#line 603
   testRunner.And("the \'rec1\' in WorkFlow \'WorkflowWith2Assigntoolswithrecordsets\' debug inputs as", ((string)(null)), table108, "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table109.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(2).a"});
            table109.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = test"});
#line 607
   testRunner.And("the \'rec1\' in Workflow \'WorkflowWith2Assigntoolswithrecordsets\' debug outputs as", ((string)(null)), table109, "And ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table110.AddRow(new string[] {
                        "1",
                        "[[[[rec(1).a]]]] = rec(2).a",
                        "warewolf"});
#line 611
   testRunner.And("the \'rec2\' in WorkFlow \'WorkflowWith2Assigntoolswithrecordsets\' debug inputs as", ((string)(null)), table110, "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table111.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] =  warewolf"});
#line 614
   testRunner.And("the \'rec2\' in Workflow \'WorkflowWith2Assigntoolswithrecordsets\' debug outputs as", ((string)(null)), table111, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools by using Scalars as variables executing against the " +
            "server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsByUsingScalarsAsVariablesExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools by using Scalars as variables executing against the " +
                    "server", ((string[])(null)));
#line 618
this.ScenarioSetup(scenarioInfo);
#line 619
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntoolswithrscalars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table112.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table112.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 620
   testRunner.And("\"WorkflowWith2Assigntoolswithscalars\" contains an Assign \"scl1\" as", ((string)(null)), table112, "And ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table113.AddRow(new string[] {
                        "[[[[a]]]]",
                        "warewolf"});
#line 624
   testRunner.And("\"WorkflowWith2Assigntoolswithrscalars\" contains an Assign \"scl2\" as", ((string)(null)), table113, "And ");
#line 627
   testRunner.When("\"WorkflowWith2Assigntoolswithrscalars\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 628
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table114.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table114.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 629
   testRunner.And("the \'scl1\' in WorkFlow \'WorkflowWith2Assigntoolswithrscalars\' debug inputs as", ((string)(null)), table114, "And ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table115.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table115.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 633
   testRunner.And("the \'scl1\' in Workflow \'WorkflowWith2Assigntoolswithrscalars\' debug outputs as", ((string)(null)), table115, "And ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table116.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = test",
                        "warewolf"});
#line 637
   testRunner.And("the \'scl2\' in WorkFlow \'WorkflowWith2Assigntoolswithrscalars\' debug inputs as", ((string)(null)), table116, "And ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table117.AddRow(new string[] {
                        "1",
                        "[[b]] =  warewolf"});
#line 640
   testRunner.And("the \'scl2\' in Workflow \'WorkflowWith2Assigntoolswithrscalars\' debug outputs as", ((string)(null)), table117, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Count Data Merge and 2 Delete  tools executing against the s" +
            "erver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignCountDataMergeAnd2DeleteToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Count Data Merge and 2 Delete  tools executing against the s" +
                    "erver", ((string[])(null)));
#line 699
this.ScenarioSetup(scenarioInfo);
#line 700
   testRunner.Given("I have a workflow \"WorkflowWithAssignCountDataMerge&2Delete\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table118.AddRow(new string[] {
                        "[[rec().a]]",
                        "21"});
            table118.AddRow(new string[] {
                        "[[rec().a]]",
                        "22"});
            table118.AddRow(new string[] {
                        "[[rec().a]]",
                        ""});
#line 701
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains an Assign \"countrecordval1\" a" +
                    "s", ((string)(null)), table118, "And ");
#line 706
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Count Record \"Cnt1\" on \"[[rec" +
                    "()]]\" into \"[[result1]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table119.AddRow(new string[] {
                        "[[rec()]]",
                        "[[result2]]"});
#line 707
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Delete \"Delrec\" as", ((string)(null)), table119, "And ");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table120.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "2",
                        "",
                        "Left"});
            table120.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "2",
                        "",
                        "Left"});
#line 710
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Data Merge \"DataMerge1\" into " +
                    "\"[[rec().a]]\" as", ((string)(null)), table120, "And ");
#line 714
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Count Record \"Cnt2\" on \"[[rec" +
                    "()]]\" into \"[[result3]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 715
   testRunner.When("\"WorkflowWithAssignCountDataMerge&2Delete\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 716
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table121.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "21"});
            table121.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "22"});
            table121.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "\"\""});
#line 717
   testRunner.And("the \'countrecordval1\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debu" +
                    "g inputs as", ((string)(null)), table121, "And ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table122.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 21"});
            table122.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 22"});
            table122.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] ="});
#line 722
   testRunner.And("the \'countrecordval1\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debu" +
                    "g outputs as", ((string)(null)), table122, "And ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table123.AddRow(new string[] {
                        "[[rec(1).a]] = 21"});
            table123.AddRow(new string[] {
                        "[[rec(2).a]] = 22"});
            table123.AddRow(new string[] {
                        "[[rec(3).a]] ="});
#line 727
   testRunner.And("the \'Cnt1\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inputs as" +
                    "", ((string)(null)), table123, "And ");
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table124.AddRow(new string[] {
                        "[[result1]] = 3"});
#line 732
   testRunner.And("the \'Cnt1\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug outputs a" +
                    "s", ((string)(null)), table124, "And ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table125.AddRow(new string[] {
                        "[[rec(3).a]] ="});
#line 735
   testRunner.And("the \'Delrec\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inputs " +
                    "as", ((string)(null)), table125, "And ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table126.AddRow(new string[] {
                        "[[result2]] = Success"});
#line 738
   testRunner.And("the \'Delrec\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug outputs" +
                    " as", ((string)(null)), table126, "And ");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table127.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 21",
                        "Index",
                        "\"2\"",
                        "\"\"",
                        "Left"});
            table127.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 22",
                        "Index",
                        "\"2\"",
                        "\"\"",
                        "Left"});
#line 741
   testRunner.And("the \'DataMerge1\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inp" +
                    "uts as", ((string)(null)), table127, "And ");
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table128.AddRow(new string[] {
                        "[[rec(3).a]] = 2122"});
#line 745
   testRunner.And("the \'DataMerge1\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug out" +
                    "puts as", ((string)(null)), table128, "And ");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table129.AddRow(new string[] {
                        "[[rec(1).a]] = 21"});
            table129.AddRow(new string[] {
                        "[[rec(2).a]] = 22"});
            table129.AddRow(new string[] {
                        "[[rec(3).a]] = 2122"});
#line 748
    testRunner.And("the \'Cnt2\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inputs as" +
                    "", ((string)(null)), table129, "And ");
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table130.AddRow(new string[] {
                        "[[result3]] = 3"});
#line 753
   testRunner.And("the \'Cnt2\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug outputs a" +
                    "s", ((string)(null)), table130, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools Assign and SQL Bulk Insert executing against the ser" +
            "ver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsAssignAndSQLBulkInsertExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools Assign and SQL Bulk Insert executing against the ser" +
                    "ver", ((string[])(null)));
#line 760
this.ScenarioSetup(scenarioInfo);
#line 761
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndSQLBulkInsert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table131.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 762
   testRunner.And("\"WorkflowWithAssignAndSQLBulkInsert\" contains an Assign \"InsertData\" as", ((string)(null)), table131, "And ");
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Mapping",
                        "IsNullable",
                        "DataTypeName",
                        "MaxLength",
                        "IsAutoIncrement"});
            table132.AddRow(new string[] {
                        "Id",
                        "",
                        "false",
                        "int",
                        "",
                        "true"});
            table132.AddRow(new string[] {
                        "Name",
                        "[[rec().a]]",
                        "false",
                        "varchar",
                        "50",
                        "false"});
            table132.AddRow(new string[] {
                        "Email",
                        "Warewolf@dev2.co.za",
                        "false",
                        "varchar",
                        "50",
                        "false"});
#line 765
   testRunner.And("\"WorkflowWithAssignAndSQLBulkInsert\" contains an SQL Bulk Insert \"BulkInsert\" usi" +
                    "ng database \"testingDBSrc\" and table \"dbo.MailingList\" and KeepIdentity set \"fal" +
                    "se\" and Result set \"[[result]]\" as", ((string)(null)), table132, "And ");
#line 770
   testRunner.When("\"WorkflowWithAssignAndSQLBulkInsert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 771
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table133.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 772
   testRunner.And("the \'InsertData\' in WorkFlow \'WorkflowWithAssignAndSQLBulkInsert\' debug inputs as" +
                    "", ((string)(null)), table133, "And ");
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table134.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf"});
#line 775
   testRunner.And("the \'InsertData\' in Workflow \'WorkflowWithAssignAndSQLBulkInsert\' debug outputs a" +
                    "s", ((string)(null)), table134, "And ");
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table135.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf",
                        "Name",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table135.AddRow(new string[] {
                        "2",
                        "Warewolf@dev2.co.za",
                        "Email",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table135.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "0",
                        "0",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES"});
#line 778
   testRunner.And("the \'BulkInsert\' in WorkFlow \'WorkflowWithAssignAndSQLBulkInsert\' debug inputs as" +
                    "", ((string)(null)), table135, "And ");
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table136.AddRow(new string[] {
                        "[[result]] = Success"});
#line 783
   testRunner.And("the \'BulkInsert\' in Workflow \'WorkflowWithAssignAndSQLBulkInsert\' debug outputs a" +
                    "s", ((string)(null)), table136, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools Assign and SQL Bulk Insert with negative Recordset I" +
            "ndex executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsAssignAndSQLBulkInsertWithNegativeRecordsetIndexExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools Assign and SQL Bulk Insert with negative Recordset I" +
                    "ndex executing against the server", ((string[])(null)));
#line 787
this.ScenarioSetup(scenarioInfo);
#line 788
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndSQLBulk\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table137.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 789
   testRunner.And("\"WorkflowWithAssignAndSQLBulk\" contains an Assign \"InsertData\" as", ((string)(null)), table137, "And ");
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Mapping",
                        "IsNullable",
                        "DataTypeName",
                        "MaxLength",
                        "IsAutoIncrement"});
            table138.AddRow(new string[] {
                        "Id",
                        "",
                        "false",
                        "int",
                        "",
                        "true"});
            table138.AddRow(new string[] {
                        "Name",
                        "[[rec(-1).a]]",
                        "false",
                        "varchar",
                        "50",
                        "false"});
            table138.AddRow(new string[] {
                        "Email",
                        "Warewolf@dev2.co.za",
                        "false",
                        "varchar",
                        "50",
                        "false"});
#line 792
   testRunner.And("\"WorkflowWithAssignAndSQLBulk\" contains an SQL Bulk Insert \"BulkInsert\" using dat" +
                    "abase \"testingDBSrc\" and table \"dbo.MailingList\" and KeepIdentity set \"false\" an" +
                    "d Result set \"[[result]]\" as", ((string)(null)), table138, "And ");
#line 797
   testRunner.When("\"WorkflowWithAssignAndSQLBulk\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 798
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table139.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 799
   testRunner.And("the \'InsertData\' in WorkFlow \'WorkflowWithAssignAndSQLBulk\' debug inputs as", ((string)(null)), table139, "And ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table140.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf"});
#line 802
   testRunner.And("the \'InsertData\' in Workflow \'WorkflowWithAssignAndSQLBulk\' debug outputs as", ((string)(null)), table140, "And ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table141.AddRow(new string[] {
                        "1",
                        "[[rec(-1).a]] =",
                        "Name",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table141.AddRow(new string[] {
                        "2",
                        "Warewolf@dev2.co.za",
                        "Email",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 805
   testRunner.And("the \'BulkInsert\' in WorkFlow \'WorkflowWithAssignAndSQLBulk\' debug inputs as", ((string)(null)), table141, "And ");
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table142.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 809
   testRunner.And("the \'BulkInsert\' in Workflow \'WorkflowWithAssignAndSQLBulk\' debug outputs as", ((string)(null)), table142, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Base Convert(Evaluating scalar variable inside va" +
            "riable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndBaseConvertEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Base Convert(Evaluating scalar variable inside va" +
                    "riable)executing against the server", ((string[])(null)));
#line 813
this.ScenarioSetup(scenarioInfo);
#line 814
  testRunner.Given("I have a workflow \"WorkflowWithAssignandBase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table143.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table143.AddRow(new string[] {
                        "[[b]]",
                        "12"});
#line 815
  testRunner.And("\"WorkflowWithAssignandBase\" contains an Assign \"Base Var\" as", ((string)(null)), table143, "And ");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table144.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Text",
                        "Base 64"});
#line 819
    testRunner.And("\"WorkflowWithAssignandBase\" contains Base convert \"Base\" as", ((string)(null)), table144, "And ");
#line 822
   testRunner.When("\"WorkflowWithAssignandBase\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 823
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table145.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table145.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12"});
#line 824
   testRunner.And("the \'Base Var\' in WorkFlow \'WorkflowWithAssignandBase\' debug inputs as", ((string)(null)), table145, "And ");
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table146.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table146.AddRow(new string[] {
                        "2",
                        "[[b]] = 12"});
#line 828
   testRunner.And("the \'Base Var\' in Workflow \'WorkflowWithAssignandBase\' debug outputs as", ((string)(null)), table146, "And ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table147.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = 12",
                        "Text",
                        "Base 64"});
#line 832
    testRunner.And("the \'Base\' in WorkFlow \'WorkflowWithAssignandBase\' debug inputs as", ((string)(null)), table147, "And ");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table148.AddRow(new string[] {
                        "1",
                        "[[b]] = MTI="});
#line 835
      testRunner.And("the \'Base\' in Workflow \'WorkflowWithAssignandBase\' debug outputs as", ((string)(null)), table148, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Base Convert(Evaluating Recordset variable inside" +
            " variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndBaseConvertEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Base Convert(Evaluating Recordset variable inside" +
                    " variable)executing against the server", ((string[])(null)));
#line 840
this.ScenarioSetup(scenarioInfo);
#line 841
  testRunner.Given("I have a workflow \"WorkflowWithAssignandBasec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table149.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table149.AddRow(new string[] {
                        "[[rec().a]]",
                        "12"});
#line 842
  testRunner.And("\"WorkflowWithAssignandBasec\" contains an Assign \"BaseVar\" as", ((string)(null)), table149, "And ");
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table150.AddRow(new string[] {
                        "[[[[rs().a]]]]",
                        "Text",
                        "Base 64"});
#line 846
    testRunner.And("\"WorkflowWithAssignandBasec\" contains Base convert \"Base\" as", ((string)(null)), table150, "And ");
#line 849
   testRunner.When("\"WorkflowWithAssignandBasec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 850
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table151.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table151.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "12"});
#line 851
   testRunner.And("the \'BaseVar\' in WorkFlow \'WorkflowWithAssignandBasec\' debug inputs as", ((string)(null)), table151, "And ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table152.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = rec(1).a"});
            table152.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 12"});
#line 855
   testRunner.And("the \'BaseVar\' in Workflow \'WorkflowWithAssignandBasec\' debug outputs as", ((string)(null)), table152, "And ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table153.AddRow(new string[] {
                        "1",
                        "[[[[rs(1).a]]]] = 12",
                        "Text",
                        "Base 64"});
#line 859
    testRunner.And("the \'Base\' in WorkFlow \'WorkflowWithAssignandBasec\' debug inputs as", ((string)(null)), table153, "And ");
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table154.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = MTI="});
#line 862
      testRunner.And("the \'Base\' in Workflow \'WorkflowWithAssignandBasec\' debug outputs as", ((string)(null)), table154, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Case Convert(Evaluating scalar variable inside va" +
            "riable)executing against the server.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndCaseConvertEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Case Convert(Evaluating scalar variable inside va" +
                    "riable)executing against the server.", ((string[])(null)));
#line 867
this.ScenarioSetup(scenarioInfo);
#line 868
  testRunner.Given("I have a workflow \"WorkflowWithAssignandcCse\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table155.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table155.AddRow(new string[] {
                        "[[b]]",
                        "warewolf"});
#line 869
  testRunner.And("\"WorkflowWithAssignandcCse\" contains an Assign \"Case Var\" as", ((string)(null)), table155, "And ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table156.AddRow(new string[] {
                        "[[[[a]]]]",
                        "UPPER"});
#line 873
    testRunner.And("\"WorkflowWithAssignandcCse\" contains case convert \"CaseConvert\" as", ((string)(null)), table156, "And ");
#line 876
   testRunner.When("\"WorkflowWithAssignandcCse\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 877
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table157.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table157.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "warewolf"});
#line 878
   testRunner.And("the \'Case Var\' in WorkFlow \'WorkflowWithAssignandcCse\' debug inputs as", ((string)(null)), table157, "And ");
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table158.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table158.AddRow(new string[] {
                        "2",
                        "[[b]] = warewolf"});
#line 882
   testRunner.And("the \'Case Var\' in Workflow \'WorkflowWithAssignandcCse\' debug outputs as", ((string)(null)), table158, "And ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table159.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = warewolf",
                        "UPPER"});
#line 886
  testRunner.And("the \'CaseConvert\' in WorkFlow \'WorkflowWithAssignandcCse\' debug inputs as", ((string)(null)), table159, "And ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table160.AddRow(new string[] {
                        "1",
                        "[[b]] = WAREWOLF"});
#line 889
   testRunner.And("the \'CaseConvert\' in Workflow \'WorkflowWithAssignandcCse\' debug outputs as", ((string)(null)), table160, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Case Convert(Evaluating Recordset variable inside" +
            " variable)executing against the server.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndCaseConvertEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Case Convert(Evaluating Recordset variable inside" +
                    " variable)executing against the server.", ((string[])(null)));
#line 893
this.ScenarioSetup(scenarioInfo);
#line 894
  testRunner.Given("I have a workflow \"WorkflowWithAssignandcCase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table161.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table161.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
#line 895
  testRunner.And("\"WorkflowWithAssignandcCase\" contains an Assign \"Case Var\" as", ((string)(null)), table161, "And ");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table162.AddRow(new string[] {
                        "[[[[rs(1).a]]]]",
                        "UPPER"});
#line 899
    testRunner.And("\"WorkflowWithAssignandcCase\" contains case convert \"CaseConvert\" as", ((string)(null)), table162, "And ");
#line 902
   testRunner.When("\"WorkflowWithAssignandcCase\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 903
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table163.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table163.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "warewolf"});
#line 904
   testRunner.And("the \'Case Var\' in WorkFlow \'WorkflowWithAssignandcCase\' debug inputs as", ((string)(null)), table163, "And ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table164.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = rec(1).a"});
            table164.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = warewolf"});
#line 908
   testRunner.And("the \'Case Var\' in Workflow \'WorkflowWithAssignandcCase\' debug outputs as", ((string)(null)), table164, "And ");
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table165.AddRow(new string[] {
                        "1",
                        "[[[[rs(1).a]]]] = warewolf",
                        "UPPER"});
#line 912
  testRunner.And("the \'CaseConvert\' in WorkFlow \'WorkflowWithAssignandcCase\' debug inputs as", ((string)(null)), table165, "And ");
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table166.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = WAREWOLF"});
#line 915
   testRunner.And("the \'CaseConvert\' in Workflow \'WorkflowWithAssignandcCase\' debug outputs as", ((string)(null)), table166, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Data Merge (Evaluating variables inside variable)" +
            "executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDataMergeEvaluatingVariablesInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Data Merge (Evaluating variables inside variable)" +
                    "executing against the server", ((string[])(null)));
#line 920
this.ScenarioSetup(scenarioInfo);
#line 921
  testRunner.Given("I have a workflow \"WorkflowWithAssignandData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table167.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table167.AddRow(new string[] {
                        "[[b]]",
                        "warewolf"});
            table167.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table167.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
#line 922
  testRunner.And("\"WorkflowWithAssignandData\" contains an Assign \"Datam\" as", ((string)(null)), table167, "And ");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table168.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table168.AddRow(new string[] {
                        "[[[[rs().a]]]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 928
     testRunner.And("\"WorkflowWithAssignandData\" contains Data Merge \"Datamerge\" into \"[[result]]\" as", ((string)(null)), table168, "And ");
#line 932
  testRunner.When("\"WorkflowWithAssignandData\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 933
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table169.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table169.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "warewolf"});
            table169.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table169.AddRow(new string[] {
                        "4",
                        "[[rec().a]] =",
                        "test"});
#line 934
  testRunner.And("the \'Datam\' in WorkFlow \'WorkflowWithAssignandData\' debug inputs as", ((string)(null)), table169, "And ");
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table170.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table170.AddRow(new string[] {
                        "2",
                        "[[b]] = warewolf"});
            table170.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]] = rec(1).a"});
            table170.AddRow(new string[] {
                        "4",
                        "[[rec(1).a]] = test"});
#line 940
  testRunner.And("the \'Datam\' in Workflow \'WorkflowWithAssignandData\' debug outputs as", ((string)(null)), table170, "And ");
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table171.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table171.AddRow(new string[] {
                        "2",
                        "[[[[rs(1).a]]]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 946
  testRunner.And("the \'Datamerge\' in WorkFlow \'WorkflowWithAssignandData\' debug inputs as", ((string)(null)), table171, "And ");
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table172.AddRow(new string[] {
                        "1",
                        "[[result]] = warewolftest"});
#line 950
   testRunner.And("the \'Datamerge\' in Workflow \'WorkflowWithAssignandData\' debug outputs as", ((string)(null)), table172, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Find Index(Evaluating scalar variable inside vari" +
            "able)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFindIndexEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Find Index(Evaluating scalar variable inside vari" +
                    "able)executing against the server", ((string[])(null)));
#line 954
this.ScenarioSetup(scenarioInfo);
#line 955
  testRunner.Given("I have a workflow \"WorkflowWithAssignandFindIndex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table173.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table173.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 956
  testRunner.And("\"WorkflowWithAssignandFindIndex\" contains an Assign \"IndexVal\" as", ((string)(null)), table173, "And ");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table174.AddRow(new string[] {
                        "[[[[a]]]]",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 960
     testRunner.And("\"WorkflowWithAssignandFindIndex\" contains Find Index \"Indexchar\" into \"[[indexRes" +
                    "ult]]\" as", ((string)(null)), table174, "And ");
#line 963
   testRunner.When("\"WorkflowWithAssignandFindIndex\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 964
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table175.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table175.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 965
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandFindIndex\' debug inputs as", ((string)(null)), table175, "And ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table176.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table176.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 969
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandFindIndex\' debug outputs as", ((string)(null)), table176, "And ");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table177.AddRow(new string[] {
                        "[[[[a]]]] = test",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 973
    testRunner.And("the \'Indexchar\' in WorkFlow \'WorkflowWithAssignandFindIndex\' debug inputs as", ((string)(null)), table177, "And ");
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table178.AddRow(new string[] {
                        "[[indexResult]] = 3"});
#line 976
   testRunner.And("the \'Indexchar\' in Workflow \'WorkflowWithAssignandFindIndex\' debug outputs as", ((string)(null)), table178, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Find Index(Evaluating recordset variable inside v" +
            "ariable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFindIndexEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Find Index(Evaluating recordset variable inside v" +
                    "ariable)executing against the server", ((string[])(null)));
#line 981
this.ScenarioSetup(scenarioInfo);
#line 982
  testRunner.Given("I have a workflow \"WorkflowWithAssignandFindIndex1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table179.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table179.AddRow(new string[] {
                        "[[new().a]]",
                        "test"});
#line 983
  testRunner.And("\"WorkflowWithAssignandFindIndex1\" contains an Assign \"Index Val\" as", ((string)(null)), table179, "And ");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table180.AddRow(new string[] {
                        "[[[[rec().a]]]]",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 987
     testRunner.And("\"WorkflowWithAssignandFindIndex1\" contains Find Index \"Index char\" into \"[[indexR" +
                    "esult]]\" as", ((string)(null)), table180, "And ");
#line 990
   testRunner.When("\"WorkflowWithAssignandFindIndex1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 991
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table181.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table181.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "test"});
#line 992
   testRunner.And("the \'Index Val\' in WorkFlow \'WorkflowWithAssignandFindIndex1\' debug inputs as", ((string)(null)), table181, "And ");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table182.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table182.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = test"});
#line 996
   testRunner.And("the \'Index Val\' in Workflow \'WorkflowWithAssignandFindIndex1\' debug outputs as", ((string)(null)), table182, "And ");
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table183.AddRow(new string[] {
                        "[[[[rec(1).a]]]] = test",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 1000
    testRunner.And("the \'Index char\' in WorkFlow \'WorkflowWithAssignandFindIndex1\' debug inputs as", ((string)(null)), table183, "And ");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table184.AddRow(new string[] {
                        "[[indexResult]] = 3"});
#line 1003
   testRunner.And("the \'Index char\' in Workflow \'WorkflowWithAssignandFindIndex1\' debug outputs as", ((string)(null)), table184, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating scalar variable inside variabl" +
            "e)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating scalar variable inside variabl" +
                    "e)executing against the server", ((string[])(null)));
#line 1007
this.ScenarioSetup(scenarioInfo);
#line 1008
  testRunner.Given("I have a workflow \"WorkflowWithAssignandReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table185.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table185.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 1009
  testRunner.And("\"WorkflowWithAssignandReplace\" contains an Assign \"IndexVal\" as", ((string)(null)), table185, "And ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table186.AddRow(new string[] {
                        "[[[[a]]]]",
                        "s",
                        "REPLACE"});
#line 1013
      testRunner.And("\"WorkflowWithAssignandReplace\" contains Replace \"Replac\" into \"[[replaceResult]]\"" +
                    " as", ((string)(null)), table186, "And ");
#line 1016
   testRunner.When("\"WorkflowWithAssignandReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1017
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table187.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table187.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 1018
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandReplace\' debug inputs as", ((string)(null)), table187, "And ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table188.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table188.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 1022
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandReplace\' debug outputs as", ((string)(null)), table188, "And ");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table189.AddRow(new string[] {
                        "[[[[a]]]] = test",
                        "s",
                        "REPLACE"});
#line 1026
   testRunner.And("the \'Replac\' in WorkFlow \'WorkflowWithAssignandReplace\' debug inputs as", ((string)(null)), table189, "And ");
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table190.AddRow(new string[] {
                        "[[b]] = teREPLACEt"});
            table190.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 1029
     testRunner.And("the \'Replac\' in Workflow \'WorkflowWithAssignandReplace\' debug outputs as", ((string)(null)), table190, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating Recordset variable inside vari" +
            "able)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating Recordset variable inside vari" +
                    "able)executing against the server", ((string[])(null)));
#line 1035
this.ScenarioSetup(scenarioInfo);
#line 1036
  testRunner.Given("I have a workflow \"WorkflowWithAssignandReplacebyrec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table191.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table191.AddRow(new string[] {
                        "[[new().a]]",
                        "test"});
#line 1037
  testRunner.And("\"WorkflowWithAssignandReplacebyrec\" contains an Assign \"Vals\" as", ((string)(null)), table191, "And ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table192.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "s",
                        "REPLACE"});
#line 1041
      testRunner.And("\"WorkflowWithAssignandReplacebyrec\" contains Replace \"Rep\" into \"[[replaceResult]" +
                    "]\" as", ((string)(null)), table192, "And ");
#line 1044
   testRunner.When("\"WorkflowWithAssignandReplacebyrec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1045
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table193.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table193.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "test"});
#line 1046
   testRunner.And("the \'Vals\' in WorkFlow \'WorkflowWithAssignandReplacebyrec\' debug inputs as", ((string)(null)), table193, "And ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table194.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table194.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = test"});
#line 1050
   testRunner.And("the \'Vals\' in Workflow \'WorkflowWithAssignandReplacebyrec\' debug outputs as", ((string)(null)), table194, "And ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table195.AddRow(new string[] {
                        "[[[[rec(1).a]]]] = test",
                        "s",
                        "REPLACE"});
#line 1054
   testRunner.And("the \'Rep\' in WorkFlow \'WorkflowWithAssignandReplacebyrec\' debug inputs as", ((string)(null)), table195, "And ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table196.AddRow(new string[] {
                        "[[new(1).a]] = teREPLACEt"});
            table196.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 1057
     testRunner.And("the \'Rep\' in Workflow \'WorkflowWithAssignandReplacebyrec\' debug outputs as", ((string)(null)), table196, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating scalar variable inside " +
            "variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating scalar variable inside " +
                    "variable)executing against the server", ((string[])(null)));
#line 1064
this.ScenarioSetup(scenarioInfo);
#line 1065
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table197.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table197.AddRow(new string[] {
                        "[[b]]",
                        "12.3412"});
#line 1066
   testRunner.And("\"WorkflowWithAssignandFormat\" contains an Assign \"IndexVal\" as", ((string)(null)), table197, "And ");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table198.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 1070
      testRunner.And("\"WorkflowWithAssignandFormat\" contains Format Number \"Fnumber\" as", ((string)(null)), table198, "And ");
#line 1073
   testRunner.When("\"WorkflowWithAssignandFormat\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1074
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table199.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table199.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12.3412"});
#line 1075
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandFormat\' debug inputs as", ((string)(null)), table199, "And ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table200.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table200.AddRow(new string[] {
                        "2",
                        "[[b]] = 12.3412"});
#line 1079
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandFormat\' debug outputs as", ((string)(null)), table200, "And ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table201.AddRow(new string[] {
                        "[[[[a]]]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 1083
   testRunner.And("the \'Fnumber\' in WorkFlow \'WorkflowWithAssignandFormat\' debug inputs as", ((string)(null)), table201, "And ");
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table202.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 1086
   testRunner.And("the \'Fnumber\' in Workflow \'WorkflowWithAssignandFormat\' debug outputs as", ((string)(null)), table202, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating Recordset variable insi" +
            "de variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating Recordset variable insi" +
                    "de variable)executing against the server", ((string[])(null)));
#line 1091
this.ScenarioSetup(scenarioInfo);
#line 1092
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatn\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table203.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table203.AddRow(new string[] {
                        "[[new().a]]",
                        "12.3412"});
#line 1093
   testRunner.And("\"WorkflowWithAssignandFormatn\" contains an Assign \"IndVal\" as", ((string)(null)), table203, "And ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table204.AddRow(new string[] {
                        "[[[[rec().a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 1097
      testRunner.And("\"WorkflowWithAssignandFormatn\" contains Format Number \"Fnumb\" as", ((string)(null)), table204, "And ");
#line 1100
   testRunner.When("\"WorkflowWithAssignandFormatn\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1101
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table205.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table205.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "12.3412"});
#line 1102
   testRunner.And("the \'IndVal\' in WorkFlow \'WorkflowWithAssignandFormatn\' debug inputs as", ((string)(null)), table205, "And ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table206.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table206.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = 12.3412"});
#line 1106
   testRunner.And("the \'IndVal\' in Workflow \'WorkflowWithAssignandFormatn\' debug outputs as", ((string)(null)), table206, "And ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table207.AddRow(new string[] {
                        "[[[[rec(1).a]]]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 1110
   testRunner.And("the \'Fnumb\' in WorkFlow \'WorkflowWithAssignandFormatn\' debug inputs as", ((string)(null)), table207, "And ");
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table208.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 1113
   testRunner.And("the \'Fnumb\' in Workflow \'WorkflowWithAssignandFormatn\' debug outputs as", ((string)(null)), table208, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Random(Evaluating recordset variable inside varia" +
            "ble)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndRandomEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Random(Evaluating recordset variable inside varia" +
                    "ble)executing against the server", ((string[])(null)));
#line 1119
this.ScenarioSetup(scenarioInfo);
#line 1120
  testRunner.Given("I have a workflow \"WorkflowWithAssignandRandom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table209.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table209.AddRow(new string[] {
                        "[[b]]",
                        "10"});
            table209.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table209.AddRow(new string[] {
                        "[[new().a]]",
                        "20"});
#line 1121
  testRunner.And("\"WorkflowWithAssignandRandom\" contains an Assign \"Valforrandno\" as", ((string)(null)), table209, "And ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table210.AddRow(new string[] {
                        "Numbers",
                        "[[[[a]]]]",
                        "[[[[rec().a]]]]",
                        "[[ranresult]]"});
#line 1127
    testRunner.And("\"WorkflowWithAssignandRandom\" contains Random \"Rand\" as", ((string)(null)), table210, "And ");
#line 1130
   testRunner.When("\"WorkflowWithAssignandRandom\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1131
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table211.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table211.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10"});
            table211.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table211.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "20"});
#line 1132
   testRunner.And("the \'Valforrandno\' in WorkFlow \'WorkflowWithAssignandRandom\' debug inputs as", ((string)(null)), table211, "And ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table212.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table212.AddRow(new string[] {
                        "2",
                        "[[b]] = 10"});
            table212.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table212.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] = 20"});
#line 1138
   testRunner.And("the \'Valforrandno\' in Workflow \'WorkflowWithAssignandRandom\' debug outputs as", ((string)(null)), table212, "And ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table213.AddRow(new string[] {
                        "Numbers",
                        "[[[[a]]]] = 10",
                        "[[[[rec(1).a]]]] = 20"});
#line 1144
   testRunner.And("the \'Rand\' in WorkFlow \'WorkflowWithAssignandRandom\' debug inputs as", ((string)(null)), table213, "And ");
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table214.AddRow(new string[] {
                        "[[ranresult]] = Int32"});
#line 1147
   testRunner.And("the \'Rand\' in Workflow \'WorkflowWithAssignandRandom\' debug outputs as", ((string)(null)), table214, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Date and Time(Evaluating recordset variable insid" +
            "e variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDateAndTimeEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Date and Time(Evaluating recordset variable insid" +
                    "e variable)executing against the server", ((string[])(null)));
#line 1152
this.ScenarioSetup(scenarioInfo);
#line 1153
  testRunner.Given("I have a workflow \"WorkflowWithAssignandDateTimetool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table215.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table215.AddRow(new string[] {
                        "[[b]]",
                        "01/02/2014"});
            table215.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table215.AddRow(new string[] {
                        "[[new().a]]",
                        "dd/mm/yyyy"});
#line 1154
  testRunner.And("\"WorkflowWithAssignandDateTimetool\" contains an Assign \"Dateandtime\" as", ((string)(null)), table215, "And ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table216.AddRow(new string[] {
                        "[[[[a]]]]",
                        "[[[[rec(1).a]]]]",
                        "1",
                        "dd/mm/yyyy",
                        "[[res]]"});
#line 1160
   testRunner.And("\"WorkflowWithAssignandDateTimetool\" contains Date and Time \"AddDate\" as", ((string)(null)), table216, "And ");
#line 1163
   testRunner.When("\"WorkflowWithAssignandDateTimetool\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1164
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table217.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table217.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "01/02/2014"});
            table217.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table217.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "dd/mm/yyyy"});
#line 1165
   testRunner.And("the \'Dateandtime\' in WorkFlow \'WorkflowWithAssignandDateTimetool\' debug inputs as" +
                    "", ((string)(null)), table217, "And ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table218.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table218.AddRow(new string[] {
                        "2",
                        "[[b]] = 01/02/2014"});
            table218.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table218.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] =  dd/mm/yyyy"});
#line 1171
    testRunner.And("the \'Dateandtime\' in Workflow \'WorkflowWithAssignandDateTimetool\' debug outputs a" +
                    "s", ((string)(null)), table218, "And ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table219.AddRow(new string[] {
                        "[[[[a]]]] = 01/02/2014",
                        "[[[[rec(1).a]]]] = dd/mm/yyyy",
                        "Years",
                        "1",
                        "dd/mm/yyyy"});
#line 1177
    testRunner.And("the \'AddDate\' in WorkFlow \'WorkflowWithAssignandDateTimetool\' debug inputs as", ((string)(null)), table219, "And ");
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table220.AddRow(new string[] {
                        "[[res]] = 01/02/2015"});
#line 1180
    testRunner.And("the \'AddDate\' in Workflow \'WorkflowWithAssignandDateTimetool\' debug outputs as", ((string)(null)), table220, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and DateTimeDiff(Evaluating recordset variable inside" +
            " variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDateTimeDiffEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and DateTimeDiff(Evaluating recordset variable inside" +
                    " variable)executing against the server", ((string[])(null)));
#line 1186
this.ScenarioSetup(scenarioInfo);
#line 1187
   testRunner.Given("I have a workflow \"WorkflowWithAssignandDateTimeDiff\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table221.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table221.AddRow(new string[] {
                        "[[b]]",
                        "01/02/2016"});
            table221.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table221.AddRow(new string[] {
                        "[[new().a]]",
                        "01/02/2014"});
#line 1188
   testRunner.And("\"WorkflowWithAssignandDateTimeDiff\" contains an Assign \"Dateandtime\" as", ((string)(null)), table221, "And ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table222.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "[[[[a]]]]",
                        "dd/mm/yyyy",
                        "Years",
                        "[[result]]"});
#line 1194
   testRunner.And("\"WorkflowWithAssignandDateTimeDiff\" contains Date and Time Difference \"DateTimedi" +
                    "f\" as", ((string)(null)), table222, "And ");
#line 1197
    testRunner.When("\"WorkflowWithAssignandDateTimeDiff\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1198
    testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table223.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table223.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "01/02/2016"});
            table223.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table223.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "01/02/2014"});
#line 1199
    testRunner.And("the \'Dateandtime\' in WorkFlow \'WorkflowWithAssignandDateTimeDiff\' debug inputs as" +
                    "", ((string)(null)), table223, "And ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table224.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table224.AddRow(new string[] {
                        "2",
                        "[[b]] = 01/02/2016"});
            table224.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table224.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] = 01/02/2014"});
#line 1205
    testRunner.And("the \'Dateandtime\' in Workflow \'WorkflowWithAssignandDateTimeDiff\' debug outputs a" +
                    "s", ((string)(null)), table224, "And ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table225.AddRow(new string[] {
                        "[[[[rec(1).a]]]] = 01/02/2014",
                        "[[[[a]]]] = 01/02/2016",
                        "dd/mm/yyyy",
                        "Years"});
#line 1211
    testRunner.And("the \'DateTimedif\' in WorkFlow \'WorkflowWithAssignandDateTimeDiff\' debug inputs as" +
                    "", ((string)(null)), table225, "And ");
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table226.AddRow(new string[] {
                        "[[result]] = 2"});
#line 1214
    testRunner.And("the \'DateTimedif\' in Workflow \'WorkflowWithAssignandDateTimeDiff\' debug outputs a" +
                    "s", ((string)(null)), table226, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating variable inside a varable)exec" +
            "uting against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingVariableInsideAVarableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating variable inside a varable)exec" +
                    "uting against the server", ((string[])(null)));
#line 1218
this.ScenarioSetup(scenarioInfo);
#line 1219
  testRunner.Given("I have a workflow \"WorkflowWithAssignReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table227.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table227.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 1220
  testRunner.And("\"WorkflowWithAssignReplace\" contains an Assign \"IndexVal\" as", ((string)(null)), table227, "And ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table228.AddRow(new string[] {
                        "[[[[a]]]]",
                        "s",
                        "REPLACE"});
#line 1224
      testRunner.And("\"WorkflowWithAssignReplace\" contains Replace \"Replac\" into \"[[replaceResult]]\" as" +
                    "", ((string)(null)), table228, "And ");
#line 1227
   testRunner.When("\"WorkflowWithAssignReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1228
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table229.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table229.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 1229
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignReplace\' debug inputs as", ((string)(null)), table229, "And ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table230.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table230.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 1233
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignReplace\' debug outputs as", ((string)(null)), table230, "And ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table231.AddRow(new string[] {
                        "[[[[a]]]] = test",
                        "s",
                        "REPLACE"});
#line 1237
   testRunner.And("the \'Replac\' in WorkFlow \'WorkflowWithAssignReplace\' debug inputs as", ((string)(null)), table231, "And ");
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table232.AddRow(new string[] {
                        "[[b]] = teREPLACEt"});
            table232.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 1240
     testRunner.And("the \'Replac\' in Workflow \'WorkflowWithAssignReplace\' debug outputs as", ((string)(null)), table232, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating variable inside variabl" +
            "e in format number tool)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingVariableInsideVariableInFormatNumberToolExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating variable inside variabl" +
                    "e in format number tool)executing against the server", ((string[])(null)));
#line 1245
this.ScenarioSetup(scenarioInfo);
#line 1246
      testRunner.Given("I have a workflow \"WorkflowAssignandFormat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table233.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table233.AddRow(new string[] {
                        "[[b]]",
                        "12.3412"});
#line 1247
   testRunner.And("\"WorkflowAssignandFormat\" contains an Assign \"IndexVal1\" as", ((string)(null)), table233, "And ");
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table234.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 1251
      testRunner.And("\"WorkflowAssignandFormat\" contains Format Number \"Fnumber1\" as", ((string)(null)), table234, "And ");
#line 1254
   testRunner.When("\"WorkflowAssignandFormat\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1255
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table235.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table235.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12.3412"});
#line 1256
   testRunner.And("the \'IndexVal1\' in WorkFlow \'WorkflowAssignandFormat\' debug inputs as", ((string)(null)), table235, "And ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table236.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table236.AddRow(new string[] {
                        "2",
                        "[[b]] = 12.3412"});
#line 1260
   testRunner.And("the \'IndexVal1\' in Workflow \'WorkflowAssignandFormat\' debug outputs as", ((string)(null)), table236, "And ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table237.AddRow(new string[] {
                        "[[[[a]]]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 1264
   testRunner.And("the \'Fnumber1\' in WorkFlow \'WorkflowAssignandFormat\' debug inputs as", ((string)(null)), table237, "And ");
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table238.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 1267
   testRunner.And("the \'Fnumber1\' in Workflow \'WorkflowAssignandFormat\' debug outputs as", ((string)(null)), table238, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign DataMerge and DataSplit(Evaluating recordset variable" +
            " as index variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignDataMergeAndDataSplitEvaluatingRecordsetVariableAsIndexVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign DataMerge and DataSplit(Evaluating recordset variable" +
                    " as index variable)executing against the server", ((string[])(null)));
#line 1271
this.ScenarioSetup(scenarioInfo);
#line 1272
  testRunner.Given("I have a workflow \"WorkflowWithAssignDatamergeandSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table239.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table239.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table239.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "warewolf"});
            table239.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
#line 1273
  testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains an Assign \"Data\" as", ((string)(null)), table239, "And ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table240.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table240.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 1279
      testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains Data Merge \"Merge\" into \"[[result]" +
                    "]\" as", ((string)(null)), table240, "And ");
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table241.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[d]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table241.AddRow(new string[] {
                        "",
                        "[[c]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1283
   testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table241, "And ");
#line 1287
   testRunner.When("\"WorkflowWithAssignDatamergeandSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1288
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table242.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table242.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table242.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "warewolf"});
            table242.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "test"});
#line 1289
   testRunner.And("the \'Data\' in WorkFlow \'WorkflowWithAssignDatamergeandSplit\' debug inputs as", ((string)(null)), table242, "And ");
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table243.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table243.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table243.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = warewolf"});
            table243.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] = test"});
#line 1295
   testRunner.And("the \'Data\' in Workflow \'WorkflowWithAssignDatamergeandSplit\' debug outputs as", ((string)(null)), table243, "And ");
#line hidden
            TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table244.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table244.AddRow(new string[] {
                        "2",
                        "[[a]] = 1",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 1301
      testRunner.And("the \'Merge\' in WorkFlow \'WorkflowWithAssignDatamergeandSplit\' debug inputs as", ((string)(null)), table244, "And ");
#line hidden
            TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table245.AddRow(new string[] {
                        "[[result]] = warewolf1"});
#line 1305
   testRunner.And("the \'Merge\' in Workflow \'WorkflowWithAssignDatamergeandSplit\' debug outputs as", ((string)(null)), table245, "And ");
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table246.AddRow(new string[] {
                        "[[rec(1).a]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[d]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table246.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[c]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1308
   testRunner.And("the \'DataSplit\' in WorkFlow \'WorkflowWithAssignDatamergeandSplit\' debug inputs as" +
                    "", ((string)(null)), table246, "And ");
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table247.AddRow(new string[] {
                        "1",
                        "[[d]] = ware"});
            table247.AddRow(new string[] {
                        "2",
                        "[[c]] = wolf"});
#line 1312
   testRunner.And("the \'DataSplit\' in Workflow \'WorkflowWithAssignDatamergeandSplit\' debug outputs a" +
                    "s", ((string)(null)), table247, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with 2 Assign tools evaluating recordset index variables.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowWith2AssignToolsEvaluatingRecordsetIndexVariables_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with 2 Assign tools evaluating recordset index variables.", ((string[])(null)));
#line 1375
this.ScenarioSetup(scenarioInfo);
#line 1376
  testRunner.Given("I have a workflow \"WorkflowWithAssignandAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table248.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table248.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "2"});
            table248.AddRow(new string[] {
                        "[[index(1).a]]",
                        "2"});
#line 1377
  testRunner.And("\"WorkflowWithAssignandAssign\" contains an Assign \"Data1\" as", ((string)(null)), table248, "And ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table249.AddRow(new string[] {
                        "[[new([[a]]).a]]",
                        "test"});
            table249.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "warewolf"});
#line 1382
    testRunner.And("\"WorkflowWithAssignandAssign\" contains an Assign \"Data2\" as", ((string)(null)), table249, "And ");
#line 1386
   testRunner.When("\"WorkflowWithAssignandAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1387
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table250.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table250.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "2"});
            table250.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] =",
                        "2"});
#line 1388
   testRunner.And("the \'Data1\' in WorkFlow \'WorkflowWithAssignandAssign\' debug inputs as", ((string)(null)), table250, "And ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table251.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table251.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 2"});
            table251.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] = 2"});
#line 1393
   testRunner.And("the \'Data1\' in Workflow \'WorkflowWithAssignandAssign\' debug outputs as", ((string)(null)), table251, "And ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table252.AddRow(new string[] {
                        "1",
                        "[[new(1).a]] =",
                        "test"});
            table252.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "warewolf"});
#line 1398
    testRunner.And("the \'Data2\' in WorkFlow \'WorkflowWithAssignandAssign\' debug inputs as", ((string)(null)), table252, "And ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table253.AddRow(new string[] {
                        "1",
                        "[[new(1).a]] = test"});
            table253.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf"});
#line 1402
   testRunner.And("the \'Data2\' in Workflow \'WorkflowWithAssignandAssign\' debug outputs as", ((string)(null)), table253, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Calculate", ((string[])(null)));
#line 1407
this.ScenarioSetup(scenarioInfo);
#line 1408
      testRunner.Given("I have a workflow \"WFWithAssignCalculateindexrecordset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table254.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table254.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "2"});
            table254.AddRow(new string[] {
                        "[[index(1).a]]",
                        "1"});
            table254.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "6"});
#line 1409
   testRunner.And("\"WFWithAssignCalculateindexrecordset\" contains an Assign \"values1\" as", ((string)(null)), table254, "And ");
#line 1415
   testRunner.And("\"WFWithAssignCalculateindexrecordset\" contains Calculate \"Calculate1\" with formul" +
                    "a \"[[rec([[index(1).a]]).a]]+[[a]]\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1416
   testRunner.When("\"WFWithAssignCalculateindexrecordset\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1417
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table255.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table255.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "2"});
            table255.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] =",
                        "1"});
            table255.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "6"});
#line 1418
   testRunner.And("the \'values1\' in WorkFlow \'WFWithAssignCalculateindexrecordset\' debug inputs as", ((string)(null)), table255, "And ");
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table256.AddRow(new string[] {
                        "1",
                        "[[a]]         =  1"});
            table256.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]  =  2"});
            table256.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] = 1"});
            table256.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]]   = 6"});
#line 1424
  testRunner.And("the \'values1\' in Workflow \'WFWithAssignCalculateindexrecordset\' debug outputs as", ((string)(null)), table256, "And ");
#line hidden
            TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table257.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]+[[a]] = [[rec(1).a]]+1 = 2+1"});
#line 1430
   testRunner.And("the \'Calculate1\' in WorkFlow \'WFWithAssignCalculateindexrecordset\' debug inputs a" +
                    "s", ((string)(null)), table257, "And ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table258.AddRow(new string[] {
                        "[[result]] = 3"});
#line 1433
      testRunner.And("the \'Calculate1\' in Workflow \'WFWithAssignCalculateindexrecordset\' debug outputs " +
                    "as", ((string)(null)), table258, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Sort Forward to test gaps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignAndSortForwardToTestGaps()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Sort Forward to test gaps", ((string[])(null)));
#line 1866
this.ScenarioSetup(scenarioInfo);
#line 1867
      testRunner.Given("I have a workflow \"workflowithAssignandsortrec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table259.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "30"});
            table259.AddRow(new string[] {
                        "[[rs(5).a]]",
                        "20"});
            table259.AddRow(new string[] {
                        "[[rs(7).a]]",
                        "10"});
            table259.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "6"});
            table259.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "4"});
            table259.AddRow(new string[] {
                        "[[rs(6).b]]",
                        "2"});
#line 1868
      testRunner.And("\"workflowithAssignandsortrec\" contains an Assign \"sortval\" as", ((string)(null)), table259, "And ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table260.AddRow(new string[] {
                        "[[rs(*).a",
                        "Forward"});
#line 1876
   testRunner.And("\"workflowithAssignandsortrec\" contains an Sort \"sortRec\" as", ((string)(null)), table260, "And ");
#line 1879
   testRunner.When("\"workflowithAssignandsortrec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1880
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table261.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "30"});
            table261.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] =",
                        "20"});
            table261.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] =",
                        "10"});
            table261.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] =",
                        "6"});
            table261.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] =",
                        "4"});
            table261.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] =",
                        "2"});
#line 1881
   testRunner.And("the \'sortval\' in WorkFlow \'workflowithAssignandsortrec\' debug inputs as", ((string)(null)), table261, "And ");
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table262.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 30"});
            table262.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] = 20"});
            table262.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] = 10"});
            table262.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] = 6"});
            table262.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] = 4"});
            table262.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] = 2"});
#line 1889
   testRunner.And("the \'sortval\' in Workflow \'workflowithAssignandsortrec\' debug outputs as", ((string)(null)), table262, "And ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table263.AddRow(new string[] {
                        "[[rs(1).a]] = 30",
                        ""});
            table263.AddRow(new string[] {
                        "[[rs(2).a]] =",
                        ""});
            table263.AddRow(new string[] {
                        "[[rs(4).a]] =",
                        ""});
            table263.AddRow(new string[] {
                        "[[rs(5).a]] = 20",
                        ""});
            table263.AddRow(new string[] {
                        "[[rs(6).a]] =",
                        ""});
            table263.AddRow(new string[] {
                        "[[rs(7).a]] = 10",
                        "Forward"});
#line 1897
   testRunner.And("the \'sortRec\' in WorkFlow \'workflowithAssignandsortrec\' debug inputs as", ((string)(null)), table263, "And ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table264.AddRow(new string[] {
                        "[[rs(1).a]] ="});
            table264.AddRow(new string[] {
                        "[[rs(2).a]] ="});
            table264.AddRow(new string[] {
                        "[[rs(4).a]] ="});
            table264.AddRow(new string[] {
                        "[[rs(5).a]] = 10"});
            table264.AddRow(new string[] {
                        "[[rs(6).a]] = 20"});
            table264.AddRow(new string[] {
                        "[[rs(7).a]] = 30"});
#line 1905
   testRunner.And("the \'sortRec\' in Workflow \'workflowithAssignandsortrec\' debug outputs as", ((string)(null)), table264, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Sort Backward to test gaps")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignAndSortBackwardToTestGaps()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Sort Backward to test gaps", ((string[])(null)));
#line 1914
this.ScenarioSetup(scenarioInfo);
#line 1915
      testRunner.Given("I have a workflow \"workflowithAssignandsortrecBack\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table265.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "10"});
            table265.AddRow(new string[] {
                        "[[rs(5).a]]",
                        "20"});
            table265.AddRow(new string[] {
                        "[[rs(7).a]]",
                        "30"});
            table265.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "6"});
            table265.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "4"});
            table265.AddRow(new string[] {
                        "[[rs(6).b]]",
                        "2"});
#line 1916
      testRunner.And("\"workflowithAssignandsortrecBack\" contains an Assign \"sortval\" as", ((string)(null)), table265, "And ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table266.AddRow(new string[] {
                        "[[rs(*).a]]",
                        "Backwards"});
#line 1924
   testRunner.And("\"workflowithAssignandsortrecBack\" contains an Sort \"sortRec\" as", ((string)(null)), table266, "And ");
#line 1927
   testRunner.When("\"workflowithAssignandsortrecBack\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1928
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table267.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "10"});
            table267.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] =",
                        "20"});
            table267.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] =",
                        "30"});
            table267.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] =",
                        "6"});
            table267.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] =",
                        "4"});
            table267.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] =",
                        "2"});
#line 1929
   testRunner.And("the \'sortval\' in WorkFlow \'workflowithAssignandsortrecBack\' debug inputs as", ((string)(null)), table267, "And ");
#line hidden
            TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table268.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 10"});
            table268.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] = 20"});
            table268.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] = 30"});
            table268.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] = 6"});
            table268.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] = 4"});
            table268.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] = 2"});
#line 1937
   testRunner.And("the \'sortval\' in Workflow \'workflowithAssignandsortrecBack\' debug outputs as", ((string)(null)), table268, "And ");
#line hidden
            TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table269.AddRow(new string[] {
                        "[[rs(1).a]] = 10",
                        ""});
            table269.AddRow(new string[] {
                        "[[rs(2).a]] =",
                        ""});
            table269.AddRow(new string[] {
                        "[[rs(4).a]] =",
                        ""});
            table269.AddRow(new string[] {
                        "[[rs(5).a]] = 20",
                        ""});
            table269.AddRow(new string[] {
                        "[[rs(6).a]] =",
                        ""});
            table269.AddRow(new string[] {
                        "[[rs(7).a]] = 30",
                        "Backwards"});
#line 1945
   testRunner.And("the \'sortRec\' in WorkFlow \'workflowithAssignandsortrecBack\' debug inputs as", ((string)(null)), table269, "And ");
#line hidden
            TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table270.AddRow(new string[] {
                        "[[rs(1).a]] = 30"});
            table270.AddRow(new string[] {
                        "[[rs(2).a]] = 20"});
            table270.AddRow(new string[] {
                        "[[rs(4).a]] = 10"});
            table270.AddRow(new string[] {
                        "[[rs(5).a]] ="});
            table270.AddRow(new string[] {
                        "[[rs(6).a]] ="});
            table270.AddRow(new string[] {
                        "[[rs(7).a]] ="});
#line 1953
   testRunner.And("the \'sortRec\' in Workflow \'workflowithAssignandsortrecBack\' debug outputs as", ((string)(null)), table270, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
