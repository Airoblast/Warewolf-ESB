// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18063
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Composition
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WorkflowExecutionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WorkflowExecution.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WorkflowExecution", "In order to execute a workflow on the server\r\nAs a Warewolf user\r\nI want to be ab" +
                    "le to build workflows and execute them against the server", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "WorkflowExecution")))
            {
                Dev2.Activities.Specs.Composition.WorkflowExecutionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow executing against the server", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
  testRunner.Given("I have a workflow \"WorkflowWithAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 8
  testRunner.And("\"WorkflowWithAssign\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table1, "And ");
#line 12
   testRunner.When("\"WorkflowWithAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table2.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table2.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 14
   testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowWithAssign\' debug inputs as", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table3.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table3.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 18
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowWithAssign\' debug outputs as", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools executing against the server", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndCount\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table4.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table4.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 25
   testRunner.And("\"WorkflowWithAssignAndCount\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table4, "And ");
#line 29
   testRunner.And("\"WorkflowWithAssignAndCount\" contains Count Record \"CountRec\" on \"[[rec()]]\" into" +
                    " \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
   testRunner.When("\"WorkflowWithAssignAndCount\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table5.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table5.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 32
   testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowWithAssignAndCount\' debug inputs as", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table6.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table6.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 36
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowWithAssignAndCount\' debug outputs as", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table7.AddRow(new string[] {
                        "[[rec(1).a]] = yes"});
            table7.AddRow(new string[] {
                        "[[rec(2).a]] = no"});
#line 40
   testRunner.And("the \'CountRec\' in WorkFlow \'WorkflowWithAssignAndCount\' debug inputs as", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table8.AddRow(new string[] {
                        "[[count]] = 2"});
#line 44
   testRunner.And("the \'CountRec\' in Workflow \'WorkflowWithAssignAndCount\' debug outputs as", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow executing against the server with a database service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void SimpleWorkflowExecutingAgainstTheServerWithADatabaseService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow executing against the server with a database service", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
  testRunner.Given("I have a workflow \"TestDbServiceWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table9.AddRow(new string[] {
                        "",
                        "",
                        "dbo_proc_SmallFetch(*).Value",
                        "[[rec().fetch]]"});
#line 50
  testRunner.And("\"TestDbServiceWF\" contains a \"database\" service \"Fetch\" with mappings", ((string)(null)), table9, "And ");
#line 53
  testRunner.And("\"TestDbServiceWF\" contains Count Record \"Count\" on \"[[rec()]]\" into \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
   testRunner.When("\"TestDbServiceWF\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table10.AddRow(new string[] {
                        ""});
#line 56
   testRunner.And("the \'Fetch\' in WorkFlow \'TestDbServiceWF\' debug inputs as", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table11.AddRow(new string[] {
                        "[[rec(9).fetch]] = 5"});
#line 59
   testRunner.And("the \'Fetch\' in Workflow \'TestDbServiceWF\' debug outputs as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table12.AddRow(new string[] {
                        "[[rec(1).fetch]] = 1"});
            table12.AddRow(new string[] {
                        "[[rec(2).fetch]] = 2"});
            table12.AddRow(new string[] {
                        "[[rec(3).fetch]] = 1"});
            table12.AddRow(new string[] {
                        "[[rec(4).fetch]] = 2"});
            table12.AddRow(new string[] {
                        "[[rec(5).fetch]] = 1"});
            table12.AddRow(new string[] {
                        "[[rec(6).fetch]] = 2"});
            table12.AddRow(new string[] {
                        "[[rec(7).fetch]] = 1"});
            table12.AddRow(new string[] {
                        "[[rec(8).fetch]] = 2"});
            table12.AddRow(new string[] {
                        "[[rec(9).fetch]] = 5"});
#line 62
   testRunner.And("the \'Count\' in WorkFlow \'TestDbServiceWF\' debug inputs as", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table13.AddRow(new string[] {
                        "[[count]] = 9"});
#line 73
  testRunner.And("the \'Count\' in Workflow \'TestDbServiceWF\' debug outputs as", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with an assign and webservice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAnAssignAndWebservice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with an assign and webservice", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
  testRunner.Given("I have a workflow \"TestWebServiceWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table14.AddRow(new string[] {
                        "[[ext]]",
                        "json"});
            table14.AddRow(new string[] {
                        "[[prefix]]",
                        "a"});
#line 79
  testRunner.And("\"TestWebServiceWF\" contains an Assign \"Inputs\" as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table15.AddRow(new string[] {
                        "extension",
                        "[[ext]]",
                        "Countries(*).CountryID",
                        "[[Countries().CountryID]]"});
            table15.AddRow(new string[] {
                        "prefix",
                        "[[prefix]]",
                        "Countries(*).Description",
                        "[[Countries().Description]]"});
#line 83
  testRunner.And("\"TestWebServiceWF\" contains a \"webservice\" service \"InternalCountriesServiceTest\"" +
                    " with mappings", ((string)(null)), table15, "And ");
#line 87
   testRunner.When("\"TestWebServiceWF\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table16.AddRow(new string[] {
                        "1",
                        "[[ext]] =",
                        "json"});
            table16.AddRow(new string[] {
                        "2",
                        "[[prefix]] =",
                        "a"});
#line 89
    testRunner.And("the \'Inputs\' in WorkFlow \'TestWebServiceWF\' debug inputs as", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table17.AddRow(new string[] {
                        "1",
                        "[[ext]] = json"});
            table17.AddRow(new string[] {
                        "2",
                        "[[prefix]] = a"});
#line 93
   testRunner.And("the \'Inputs\' in Workflow \'TestWebServiceWF\' debug outputs as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table18.AddRow(new string[] {
                        "[[ext]] = json"});
            table18.AddRow(new string[] {
                        "[[prefix]] = a"});
#line 97
   testRunner.And("the \'InternalCountriesServiceTest\' in WorkFlow \'TestWebServiceWF\' debug inputs as" +
                    "", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table19.AddRow(new string[] {
                        "[[Countries(10).CountryID]] = 10"});
            table19.AddRow(new string[] {
                        "[[Countries(10).Description]] = Azerbaijan"});
#line 101
   testRunner.And("the \'InternalCountriesServiceTest\' in Workflow \'TestWebServiceWF\' debug outputs a" +
                    "s", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with an assign and remote workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAnAssignAndRemoteWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with an assign and remote workflow", ((string[])(null)));
#line 107
this.ScenarioSetup(scenarioInfo);
#line 108
 testRunner.Given("I have a workflow \"TestAssignAndRemote\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table20.AddRow(new string[] {
                        "[[inputData]]",
                        "hello"});
#line 109
  testRunner.And("\"TestAssignAndRemote\" contains an Assign \"AssignData\" as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table21.AddRow(new string[] {
                        "input",
                        "[[inputData]]",
                        "output",
                        "[[output]]"});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "values(*).upper",
                        "[[values().up]]"});
            table21.AddRow(new string[] {
                        "",
                        "",
                        "values(*).lower",
                        "[[values().low]]"});
#line 112
 testRunner.And("\"TestAssignAndRemote\" contains \"WorkflowUsedBySpecs\" from server \"Remote Connecti" +
                    "on\" with mapping as", ((string)(null)), table21, "And ");
#line 117
   testRunner.When("\"TestAssignAndRemote\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table22.AddRow(new string[] {
                        "1",
                        "[[inputData]] =",
                        "hello"});
#line 119
    testRunner.And("the \'AssignData\' in WorkFlow \'TestAssignAndRemote\' debug inputs as", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table23.AddRow(new string[] {
                        "1",
                        "[[inputData]] = hello"});
#line 122
   testRunner.And("the \'AssignData\' in Workflow \'TestAssignAndRemote\' debug outputs as", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table24.AddRow(new string[] {
                        "[[inputData]] = hello"});
#line 125
    testRunner.And("the \'WorkflowUsedBySpecs\' in WorkFlow \'TestAssignAndRemote\' debug inputs as", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table25.AddRow(new string[] {
                        "1",
                        "[[in]] = hello"});
#line 128
   testRunner.And("the \'Setup Assign (1)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table26.AddRow(new string[] {
                        "1",
                        "[[in]] = HELLO"});
#line 131
   testRunner.And("the \'Convert Case (1)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table27.AddRow(new string[] {
                        "1",
                        "[[output]] = HELLO"});
            table27.AddRow(new string[] {
                        "2",
                        "[[values(1).upper]] = HELLO"});
            table27.AddRow(new string[] {
                        "3",
                        "[[values(1).lower]] = hello"});
#line 134
   testRunner.And("the \'Final Assign (3)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table28.AddRow(new string[] {
                        "[[output]] = HELLO"});
            table28.AddRow(new string[] {
                        "[[values(1).up]] = HELLO"});
            table28.AddRow(new string[] {
                        "[[values(1).low]] = hello"});
#line 139
   testRunner.And("the \'WorkflowUsedBySpecs\' in Workflow \'TestAssignAndRemote\' debug outputs as", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
            "rver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignBaseConvertAndCaseConvertToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
                    "rver", ((string[])(null)));
#line 146
this.ScenarioSetup(scenarioInfo);
#line 147
   testRunner.Given("I have a workflow \"WorkflowWithAssignBaseConvertandCaseconvert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "100"});
#line 148
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains an Assign \"Assign1\" as", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table30.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "UPPER"});
#line 153
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains case convert \"Case to Conv" +
                    "ert\" as", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table31.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Text",
                        "Base64"});
#line 156
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains Base convert \"Base to Conv" +
                    "ert\" as", ((string)(null)), table31, "And ");
#line 159
   testRunner.When("\"WorkflowWithAssignBaseConvertandCaseconvert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 160
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table32.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "50"});
            table32.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "test"});
            table32.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "100"});
#line 161
   testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' de" +
                    "bug inputs as", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table33.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "50"});
            table33.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "test"});
            table33.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "100"});
#line 166
    testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' de" +
                    "bug outputs as", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table34.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = test",
                        "UPPER"});
#line 171
   testRunner.And("the \'Case to Convert\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug inputs as", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table35.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = TEST"});
#line 174
   testRunner.And("the \'Case to Convert\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug outputs as", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "[[rec(1).a]] = 50",
                        "Text",
                        "Base64"});
#line 177
   testRunner.And("the \'Base to Convert\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug inputs as", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table37.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = NTA="});
#line 179
      testRunner.And("the \'Base to Convert\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug outputs as", ((string)(null)), table37, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and 2 Delete tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignAnd2DeleteToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and 2 Delete tools executing against the server", ((string[])(null)));
#line 183
this.ScenarioSetup(scenarioInfo);
#line 184
   testRunner.Given("I have a workflow \"WorkflowWithAssignand2Deletetools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table38.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
#line 185
   testRunner.And("\"WorkflowWithAssignand2Deletetools\" contains an Assign \"Assign to delete\" as", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table39.AddRow(new string[] {
                        "[[rec(1)]]",
                        "[[result1]]"});
#line 188
   testRunner.And("\"WorkflowWithAssignand2Deletetools\" contains Delete \"Delet1\" as", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table40.AddRow(new string[] {
                        "[[rec(1)]]",
                        "[[result2]]]"});
#line 191
      testRunner.And("\"WorkflowWithAssignand2Deletetools\" contains Delete \"Delet2\" as", ((string)(null)), table40, "And ");
#line 194
   testRunner.When("\"WorkflowWithAssignBaseConvertandCaseconvert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 195
      testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table41.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
#line 196
   testRunner.And("the \'Assign to delete\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' " +
                    "debug inputs as", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table42.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50"});
#line 199
   testRunner.And("the \'Assign to delete\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' " +
                    "debug outputs as", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table43.AddRow(new string[] {
                        "[[rec(1).a]] = 50"});
#line 202
   testRunner.And("the \'Delet1\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' debug inpu" +
                    "ts as", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table44.AddRow(new string[] {
                        "[[result1]] = Success"});
#line 205
   testRunner.And("the \'Delet1\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' debug outp" +
                    "uts as", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table45.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        ""});
#line 208
   testRunner.And("the \'Delet2\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' debug inpu" +
                    "ts as", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table46.AddRow(new string[] {
                        "1",
                        "[[result2]] = Failure"});
#line 211
  testRunner.And("the \'Delet2\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' debug outp" +
                    "uts as", ((string)(null)), table46, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 3 Assigns tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWith3AssignsToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 3 Assigns tools executing against the server", ((string[])(null)));
#line 215
this.ScenarioSetup(scenarioInfo);
#line 216
   testRunner.Given("I have a workflow \"WorkflowWith3Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table47.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(1).a"});
#line 217
   testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool1\" as", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table48.AddRow(new string[] {
                        "[[test]]",
                        "rec(1).a"});
            table48.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 220
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool2\" as", ((string)(null)), table48, "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table49.AddRow(new string[] {
                        "[[new]]",
                        "[[[[test]]]]"});
#line 224
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool3\" as", ((string)(null)), table49, "And ");
#line 227
   testRunner.When("\"WorkflowWith3Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table50.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(1).a"});
#line 229
   testRunner.And("the \'Assigntool1\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table51.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(1).a"});
#line 232
   testRunner.And("the \'Assigntool1\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table51, "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table52.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "rec(1).a"});
            table52.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = rec(1).a",
                        "Warewolf"});
#line 235
   testRunner.And("the \'Assigntool2\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table52, "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table53.AddRow(new string[] {
                        "1",
                        "[[test]] = rec(1).a"});
            table53.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = Warewolf"});
#line 239
   testRunner.And("the \'Assigntool2\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table54.AddRow(new string[] {
                        "1",
                        "[[new]] =",
                        "[[[[test]]]] = Warewolf"});
#line 243
   testRunner.And("the \'Assigntool3\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table55.AddRow(new string[] {
                        "1",
                        "[[new]] = Warewolf"});
#line 246
   testRunner.And("the \'Assigntool3\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table55, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit executing against the server", ((string[])(null)));
#line 280
this.ScenarioSetup(scenarioInfo);
#line 281
      testRunner.Given("I have a workflow \"WorkflowWithAssignDataMergeandDataSplittools\"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table56.AddRow(new string[] {
                        "[[a]]",
                        "Test"});
            table56.AddRow(new string[] {
                        "[[b]]",
                        "Warewolf"});
            table56.AddRow(new string[] {
                        "[[split().a]]",
                        "Workflow"});
#line 282
   testRunner.And("\"WorkflowWithAssignDataMergeandDataSplittools\" contains an Assign \"Assign To merg" +
                    "e\" as", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table57.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table57.AddRow(new string[] {
                        "[[b]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 287
   testRunner.And("\"WorkflowWithAssignDataMergeandDataSplittools\" contains Data Merge \"Data Merge\" i" +
                    "nto \"[[result]]\" as", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table58.AddRow(new string[] {
                        "[[result]][[split().a]]",
                        "[[rec(1).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
            table58.AddRow(new string[] {
                        "",
                        "[[rec(2).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 291
   testRunner.And("\"Test\" contains Data Split \"Data Split\" as", ((string)(null)), table58, "And ");
#line 295
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 296
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table59.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "Test"});
            table59.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "Warewolf"});
            table59.AddRow(new string[] {
                        "3",
                        "[[split().a]] =",
                        "Workflow"});
#line 297
   testRunner.And("the \'Assign To merge\' in WorkFlow \'WorkflowWithAssignDataMergeandDataSplittools\' " +
                    "debug inputs as", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table60.AddRow(new string[] {
                        "1",
                        "[[a]]         =  Test"});
            table60.AddRow(new string[] {
                        "2",
                        "[[b]]         =  Warewolf"});
            table60.AddRow(new string[] {
                        "3",
                        "[[split().a]] =  Workflow"});
#line 302
  testRunner.And("the \'Assign To merge\' in Workflow \'WorkflowWithAssignDataMergeandDataSplittools\' " +
                    "debug outputs as", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table61.AddRow(new string[] {
                        "1",
                        "[[a]] =  Test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table61.AddRow(new string[] {
                        "2",
                        "[[b]] =  warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 307
   testRunner.And("the \'Data Merge\' in WorkFlow \'WorkflowWithAssignDataMergeandDataSplittools\' debug" +
                    " inputs as", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table62.AddRow(new string[] {
                        "[[result]] = Testwarewolf"});
#line 311
   testRunner.And("the \'Data Merge\' in Workflow \'WorkflowWithAssignDataMergeandDataSplittools\' debug" +
                    " outputs as", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table63.AddRow(new string[] {
                        "[[result]][[split(1).a]] = TestWarewolfWorkflow",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table63.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 314
   testRunner.And("the \'Data Split\' in WorkFlow \'WorkflowWithAssignDataMergeandDataSplittools\' debug" +
                    " inputs as", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table64.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
            table64.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf"});
            table64.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] = Workflow"});
#line 318
   testRunner.And("the \'Data Split\' in Workflow \'WorkflowWithAssignDataMergeandDataSplittools\' debug" +
                    " outputs as", ((string)(null)), table64, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
