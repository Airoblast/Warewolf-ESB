// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable

namespace Dev2.Activities.Specs.Toolbox.Scripting.Command
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CommandFeature
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "Command.feature"
#line hidden

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Command",
                                                                "In order to execute command line scripts\r\nAs a Warewolf user\r\nI want a tool that " +
                                                                "allows me to execute commands",
                                                                ProgrammingLanguage.CSharp, ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null)
                 && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Command")))
            {
                FeatureSetup(null);
            }
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute commands")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Command")]
        public virtual void ExecuteCommands()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute commands", ((string[]) (null)));
#line 6
            this.ScenarioSetup(scenarioInfo);
#line 7
            testRunner.Given("I have a command variable \"[[drive]]\" equal to \"C:\\\"", ((string) (null)),
                             ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table1 = new TechTalk.SpecFlow.Table(new string[]
                {
                    "script"
                });
            table1.AddRow(new string[]
                {
                    "@echo off"
                });
            table1.AddRow(new string[]
                {
                    "REM"
                });
            table1.AddRow(new string[]
                {
                    "dir [[drive]]Program Files"
                });
#line 8
            testRunner.Given("I have these command scripts to execute in a single execution run", ((string) (null)),
                             table1, "Given ");
#line 13
            testRunner.When("the command tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 14
            testRunner.Then("the result of the command tool will be \"Volume in drive C has no label\"",
                            ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 15
            testRunner.And("command execution has \"NO\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(
            "Execute a command that requires user interaction like pause")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Command")]
        public virtual void ExecuteACommandThatRequiresUserInteractionLikePause()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Execute a command that requires user interaction like pause",
                                                   ((string[]) (null)));
#line 17
            this.ScenarioSetup(scenarioInfo);
#line 18
            testRunner.Given("I have this command script to execute \"pause\"", ((string) (null)),
                             ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 19
            testRunner.When("the command tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 20
            testRunner.Then("the result of the command tool will be \"Press any key to continue . . .\"",
                            ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 21
            testRunner.And("command execution has \"NO\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a blank cmd")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Command")]
        public virtual void ExecuteABlankCmd()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a blank cmd", ((string[]) (null)));
#line 23
            this.ScenarioSetup(scenarioInfo);
#line 24
            testRunner.Given("I have this command script to execute \"\"", ((string) (null)),
                             ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 25
            testRunner.When("the command tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 26
            testRunner.Then("the result of the command tool will be \"\"", ((string) (null)),
                            ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 27
            testRunner.And("command execution has \"AN\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute invalid cmd")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Command")]
        public virtual void ExecuteInvalidCmd()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute invalid cmd", ((string[]) (null)));
#line 29
            this.ScenarioSetup(scenarioInfo);
#line 30
            testRunner.Given("I have this command script to execute \"asdf\"", ((string) (null)),
                             ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 31
            testRunner.When("the command tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 32
            testRunner.Then("the result of the command tool will be \"\"", ((string) (null)),
                            ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 33
            testRunner.And("command execution has \"AN\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion