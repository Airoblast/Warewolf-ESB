// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable

namespace Dev2.Activities.Specs.Toolbox.Utility.Random
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RandomFeature
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "Random.feature"
#line hidden

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Random",
                                                                "In order to generate random values\r\nAs a Warewolf user\r\nI want a tool that can ge" +
                                                                "nerate, numbers, guids and letters",
                                                                ProgrammingLanguage.CSharp, ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null)
                 && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Random")))
            {
                FeatureSetup(null);
            }
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Letters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateLetters()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Letters", ((string[]) (null)));
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I have a type as \"Letters\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                             "Given ");
#line 9
            testRunner.And("I have a length as \"10\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 10
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 11
            testRunner.Then("the result from the random tool should be of type \"System.String\" with a length o" +
                            "f \"10\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 12
            testRunner.And("random execution has \"NO\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Letters and Numbers")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateLettersAndNumbers()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Letters and Numbers", ((string[]) (null)));
#line 14
            this.ScenarioSetup(scenarioInfo);
#line 15
            testRunner.Given("I have a type as \"LetterAndNumbers\"", ((string) (null)),
                             ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 16
            testRunner.And("I have a length as \"10\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 17
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 18
            testRunner.Then("the result from the random tool should be of type \"System.String\" with a length o" +
                            "f \"10\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 19
            testRunner.And("random execution has \"NO\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Numbers one digit")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateNumbersOneDigit()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Numbers one digit", ((string[]) (null)));
#line 21
            this.ScenarioSetup(scenarioInfo);
#line 22
            testRunner.Given("I have a type as \"Numbers\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                             "Given ");
#line 23
            testRunner.And("I have a range from \"0\" to \"9\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line 24
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 25
            testRunner.Then("the result from the random tool should be of type \"System.Int32\" with a length of" +
                            " \"1\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 26
            testRunner.And("random execution has \"NO\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Numbers two digits")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateNumbersTwoDigits()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Numbers two digits", ((string[]) (null)));
#line 28
            this.ScenarioSetup(scenarioInfo);
#line 29
            testRunner.Given("I have a type as \"Numbers\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                             "Given ");
#line 30
            testRunner.And("I have a range from \"10\" to \"99\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line 31
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 32
            testRunner.Then("the result from the random tool should be of type \"System.Int32\" with a length of" +
                            " \"2\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 33
            testRunner.And("random execution has \"NO\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Guid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateGuid()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Guid", ((string[]) (null)));
#line 35
            this.ScenarioSetup(scenarioInfo);
#line 36
            testRunner.Given("I have a type as \"Guid\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                             "Given ");
#line 37
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 38
            testRunner.Then("the result from the random tool should be of type \"System.Guid\" with a length of " +
                            "\"36\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 39
            testRunner.And("random execution has \"NO\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Numbers with blank range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateNumbersWithBlankRange()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Numbers with blank range",
                                                                  ((string[]) (null)));
#line 41
            this.ScenarioSetup(scenarioInfo);
#line 42
            testRunner.Given("I have a type as \"Numbers\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                             "Given ");
#line 43
            testRunner.And("I have a range from \"\" to \"\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line 44
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 45
            testRunner.Then("the result from the random tool should be of type \"System.String\" with a length o" +
                            "f \"0\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 46
            testRunner.And("random execution has \"AN\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Numbers with one blank range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateNumbersWithOneBlankRange()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Numbers with one blank range",
                                                                  ((string[]) (null)));
#line 48
            this.ScenarioSetup(scenarioInfo);
#line 49
            testRunner.Given("I have a type as \"Numbers\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                             "Given ");
#line 50
            testRunner.And("I have a range from \"1\" to \"\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line 51
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 52
            testRunner.Then("the result from the random tool should be of type \"System.String\" with a length o" +
                            "f \"0\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 53
            testRunner.And("random execution has \"AN\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Numbers with a negative range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateNumbersWithANegativeRange()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Numbers with a negative range",
                                                                  ((string[]) (null)));
#line 55
            this.ScenarioSetup(scenarioInfo);
#line 56
            testRunner.Given("I have a type as \"Numbers\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                             "Given ");
#line 57
            testRunner.And("I have a range from \"-1\" to \"-9\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line 58
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 59
            testRunner.Then("the result from the random tool should be of type \"System.Int32\" with a length of" +
                            " \"2\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 60
            testRunner.And("random execution has \"NO\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Letters with blank length")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateLettersWithBlankLength()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Letters with blank length",
                                                                  ((string[]) (null)));
#line 62
            this.ScenarioSetup(scenarioInfo);
#line 63
            testRunner.Given("I have a type as \"Numbers\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                             "Given ");
#line 64
            testRunner.And("I have a range from \"\" to \"\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line 65
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 66
            testRunner.Then("random execution has \"AN\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Letters with a negative length")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateLettersWithANegativeLength()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Letters with a negative length",
                                                                  ((string[]) (null)));
#line 68
            this.ScenarioSetup(scenarioInfo);
#line 69
            testRunner.Given("I have a type as \"Letters\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                             "Given ");
#line 70
            testRunner.And("I have a length as \"-1\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 71
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 72
            testRunner.Then("the result from the random tool should be of type \"System.String\" with a length o" +
                            "f \"0\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 73
            testRunner.And("random execution has \"AN\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(
            "Generate Letters and Numbers with blank length")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateLettersAndNumbersWithBlankLength()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Letters and Numbers with blank length",
                                                                  ((string[]) (null)));
#line 75
            this.ScenarioSetup(scenarioInfo);
#line 76
            testRunner.Given("I have a type as \"LetterAndNumbers\"", ((string) (null)),
                             ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 77
            testRunner.And("I have a length as \"\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 78
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 79
            testRunner.Then("the result from the random tool should be of type \"System.String\" with a length o" +
                            "f \"0\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 80
            testRunner.And("random execution has \"AN\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(
            "Generate Letters and Numbers with a negative length")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateLettersAndNumbersWithANegativeLength()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(
                "Generate Letters and Numbers with a negative length", ((string[]) (null)));
#line 82
            this.ScenarioSetup(scenarioInfo);
#line 83
            testRunner.Given("I have a type as \"LetterAndNumbers\"", ((string) (null)),
                             ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 84
            testRunner.And("I have a length as \"\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 85
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 86
            testRunner.Then("the result from the random tool should be of type \"System.String\" with a length o" +
                            "f \"0\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 87
            testRunner.And("random execution has \"AN\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate a Number between 5 and 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Random")]
        public virtual void GenerateANumberBetween5And5()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate a Number between 5 and 5",
                                                                  ((string[]) (null)));
#line 89
            this.ScenarioSetup(scenarioInfo);
#line 90
            testRunner.Given("I have a type as \"Numbers\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                             "Given ");
#line 91
            testRunner.And("I have a range from \"5\" to \"5\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line 92
            testRunner.When("the random tool is executed", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                            "When ");
#line 93
            testRunner.Then("the result from the random tool should be of type \"System.Int32\" with a length of" +
                            " \"1\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 94
            testRunner.And("the random value will be \"5\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line 95
            testRunner.And("random execution has \"NO\" error", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                           "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion