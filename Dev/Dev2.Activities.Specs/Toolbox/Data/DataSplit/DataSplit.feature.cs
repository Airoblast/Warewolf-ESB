// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Toolbox.Data.DataSplit
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DataSplitFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DataSplit.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DataSplit", "In order to split data\r\nAs a Warewolf user\r\nI want a tool that splits two or more" +
                    " pieces of data", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "DataSplit")))
            {
                Dev2.Activities.Specs.Toolbox.Data.DataSplit.DataSplitFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text to a recordset using Index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextToARecordsetUsingIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text to a recordset using Index", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("A string to split with value \"abcde\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("assign to variable \"[[vowels(*).letters]]\" split type \"Index\" at \"1\" and Include " +
                    "\"unselected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "vowels().letters"});
            table1.AddRow(new string[] {
                        "a"});
            table1.AddRow(new string[] {
                        "b"});
            table1.AddRow(new string[] {
                        "c"});
            table1.AddRow(new string[] {
                        "d"});
            table1.AddRow(new string[] {
                        "e"});
#line 10
 testRunner.Then("the split result will be", ((string)(null)), table1, "Then ");
#line 17
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table2.AddRow(new string[] {
                        "abcde",
                        "Forward",
                        "No",
                        "1",
                        "[[vowels(*).letters]] =",
                        "Index",
                        "1",
                        "No",
                        ""});
#line 18
 testRunner.And("the debug inputs as", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table3.AddRow(new string[] {
                        "1",
                        "[[vowels(1).letters]] = a"});
            table3.AddRow(new string[] {
                        "",
                        "[[vowels(2).letters]] = b"});
            table3.AddRow(new string[] {
                        "",
                        "[[vowels(3).letters]] = c"});
            table3.AddRow(new string[] {
                        "",
                        "[[vowels(4).letters]] = d"});
            table3.AddRow(new string[] {
                        "",
                        "[[vowels(5).letters]] = e"});
#line 21
    testRunner.And("the debug output as", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split characters using Index Going Backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitCharactersUsingIndexGoingBackwards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split characters using Index Going Backwards", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("A string to split with value \"@!?><\":}{+_)(*&^~\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.And("assign to variable \"[[vowels(*).chars]]\" split type \"Index\" at \"7\" and Include \"u" +
                    "nselected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("the direction is \"Backward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "vowels().chars"});
            table4.AddRow(new string[] {
                        "_)(*&^~"});
            table4.AddRow(new string[] {
                        "><\":}{+"});
            table4.AddRow(new string[] {
                        "@!?"});
#line 34
 testRunner.Then("the split result will be", ((string)(null)), table4, "Then ");
#line 39
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table5.AddRow(new string[] {
                        "@!?><\":}{+_)(*&^~",
                        "Backward",
                        "No",
                        "1",
                        "[[vowels(*).chars]] =",
                        "Index",
                        "7",
                        "No",
                        ""});
#line 40
 testRunner.And("the debug inputs as", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table6.AddRow(new string[] {
                        "1",
                        "[[vowels(1).chars]] = _)(*&^~"});
            table6.AddRow(new string[] {
                        "",
                        "[[vowels(2).chars]] = ><\":}{+"});
            table6.AddRow(new string[] {
                        "",
                        "[[vowels(3).chars]] = @!?"});
#line 43
 testRunner.And("the debug output as", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split characters using Index Going Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitCharactersUsingIndexGoingForward()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split characters using Index Going Forward", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("A string to split with value \"@!?><\":}{+_)(*&^~\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("assign to variable \"[[vowels(*).chars]]\" split type \"Index\" at \"7\" and Include \"u" +
                    "nselected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.And("the direction is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "vowels().chars"});
            table7.AddRow(new string[] {
                        "@!?><\":"});
            table7.AddRow(new string[] {
                        "}{+_)(*"});
            table7.AddRow(new string[] {
                        "&^~"});
#line 54
 testRunner.Then("the split result will be", ((string)(null)), table7, "Then ");
#line 59
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table8.AddRow(new string[] {
                        "@!?><\":}{+_)(*&^~",
                        "Forward",
                        "No",
                        "1",
                        "[[vowels(*).chars]] =",
                        "Index",
                        "7",
                        "No",
                        ""});
#line 60
 testRunner.And("the debug inputs as", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table9.AddRow(new string[] {
                        "1",
                        "[[vowels(1).chars]] = @!?><\":"});
            table9.AddRow(new string[] {
                        "",
                        "[[vowels(2).chars]] = }{+_)(*"});
            table9.AddRow(new string[] {
                        "",
                        "[[vowels(3).chars]] = &^~"});
#line 63
 testRunner.And("the debug output as", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text using All split types - Some with Include selected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextUsingAllSplitTypes_SomeWithIncludeSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text using All split types - Some with Include selected", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("A string to split with value \"IndexTab\tChars,space end\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.And("assign to variable \"[[vowels(*).letters]]\" split type \"Index\" at \"5\" and Include " +
                    "\"Selected\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("assign to variable \"[[vowels(*).letters]]\" split type \"Tab\" at \"\" and Include \"un" +
                    "selected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("assign to variable \"[[vowels(*).letters]]\" split type \"Chars\" at \"ars,\" and Inclu" +
                    "de \"Selected\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("assign to variable \"[[vowels(*).letters]]\" split type \"Space\" at \"1\" and Include " +
                    "\"unselected\" and Escape \'\\\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("assign to variable \"[[vowels(*).letters]]\" split type \"End\" at \"\" and Include \"un" +
                    "selected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "vowels().letters"});
            table10.AddRow(new string[] {
                        "Index"});
            table10.AddRow(new string[] {
                        "Tab"});
            table10.AddRow(new string[] {
                        "Chars,"});
            table10.AddRow(new string[] {
                        "space"});
            table10.AddRow(new string[] {
                        "end"});
#line 77
 testRunner.Then("the split result will be", ((string)(null)), table10, "Then ");
#line 84
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table11.AddRow(new string[] {
                        "IndexTab\tChars,space end",
                        "Forward",
                        "No",
                        "1",
                        "[[vowels(*).letters]] =",
                        "Index",
                        "5",
                        "Yes",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[vowels(*).letters]] =",
                        "Tab",
                        "",
                        "No",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "3",
                        "[[vowels(*).letters]] =",
                        "Chars",
                        "ars,",
                        "Yes",
                        "\" \""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "4",
                        "[[vowels(*).letters]] =",
                        "Space",
                        "",
                        "No",
                        ""});
            table11.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "5",
                        "[[vowels(*).letters]] =",
                        "End",
                        "",
                        "No",
                        ""});
#line 85
 testRunner.And("the debug inputs as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table12.AddRow(new string[] {
                        "1",
                        "[[vowels(1).letters]] = Index"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(2).letters]] = Tab"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(3).letters]] = Chars,"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(4).letters]] = space"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(5).letters]] = end"});
            table12.AddRow(new string[] {
                        "2",
                        "[[vowels(1).letters]] = Index"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(2).letters]] = Tab"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(3).letters]] = Chars,"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(4).letters]] = space"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(5).letters]] = end"});
            table12.AddRow(new string[] {
                        "3",
                        "[[vowels(1).letters]] = Index"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(2).letters]] = Tab"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(3).letters]] = Chars,"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(4).letters]] = space"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(5).letters]] = end"});
            table12.AddRow(new string[] {
                        "4",
                        "[[vowels(1).letters]] = Index"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(2).letters]] = Tab"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(3).letters]] = Chars,"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(4).letters]] = space"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(5).letters]] = end"});
            table12.AddRow(new string[] {
                        "5",
                        "[[vowels(1).letters]] = Index"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(2).letters]] = Tab"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(3).letters]] = Chars,"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(4).letters]] = space"});
            table12.AddRow(new string[] {
                        "",
                        "[[vowels(5).letters]] = end"});
#line 92
 testRunner.And("the debug output as", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split CSV file format into recordset - some fields blank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitCSVFileFormatIntoRecordset_SomeFieldsBlank()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split CSV file format into recordset - some fields blank", ((string[])(null)));
#line 120
this.ScenarioSetup(scenarioInfo);
#line 121
 testRunner.Given("A file \"CSVExample.txt\" to split", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 122
 testRunner.And("assign to variable \"[[rec().id]]\" split type \"Chars\" at \",\" and Include \"unselect" +
                    "ed\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("assign to variable \"[[rec().name]]\" split type \"Chars\" at \",\" and Include \"unsele" +
                    "cted\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("assign to variable \"\" split type \"Chars\" at \",\" and Include \"unselected\" and Esca" +
                    "pe \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.And("assign to variable \"[[rec().phone]]\" split type \"New Line\" at \"\" and Include \"uns" +
                    "elected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec().id",
                        "rec().name",
                        "rec().phone"});
            table13.AddRow(new string[] {
                        "ID",
                        "NAME",
                        "PHONE"});
            table13.AddRow(new string[] {
                        "1",
                        "Barney",
                        "1234"});
            table13.AddRow(new string[] {
                        "2",
                        "Tshepo",
                        "5678"});
            table13.AddRow(new string[] {
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "3",
                        "Mo",
                        ""});
#line 127
 testRunner.Then("the split result will be", ((string)(null)), table13, "Then ");
#line 134
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table14.AddRow(new string[] {
                        "String",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().id]]    =",
                        "Chars",
                        ",",
                        "No",
                        "\" \""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec().name]]  =",
                        "Chars",
                        ",",
                        "No",
                        "\" \""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "3",
                        "\" \"             =",
                        "Chars",
                        ",",
                        "No",
                        "\" \""});
            table14.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "4",
                        "[[rec().phone]] =",
                        "New Line",
                        "",
                        "No",
                        ""});
#line 135
 testRunner.And("the debug inputs as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table15.AddRow(new string[] {
                        "1",
                        "[[rec(1).id]] = ID"});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(2).id]] = 1"});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(3).id]] = 2"});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(4).id]] ="});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(5).id]] = 3"});
            table15.AddRow(new string[] {
                        "2",
                        "[[rec(1).name]] = NAME"});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(2).name]] = Barney"});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(3).name]] = Tshepo"});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(4).name]] ="});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(5).name]] = Mo"});
            table15.AddRow(new string[] {
                        "3",
                        "\" \""});
            table15.AddRow(new string[] {
                        "4",
                        "[[rec(1).phone]] = PHONE"});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(2).phone]] = 1234"});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(3).phone]] = 5678"});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(4).phone]] ="});
            table15.AddRow(new string[] {
                        "",
                        "[[rec(5).phone]] ="});
#line 141
 testRunner.And("the debug output as", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split CSV file format into recordset - Skip blank rows selected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitCSVFileFormatIntoRecordset_SkipBlankRowsSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split CSV file format into recordset - Skip blank rows selected", ((string[])(null)));
#line 160
this.ScenarioSetup(scenarioInfo);
#line 161
 testRunner.Given("A file \"CSVExample.txt\" to split", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 162
 testRunner.And("assign to variable \"[[rec().id]]\" split type \"Chars\" at \",\" and Include \"unselect" +
                    "ed\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("assign to variable \"[[rec().name]]\" split type \"Chars\" at \",\" and Include \"unsele" +
                    "cted\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.And("assign to variable \"\" split type \"Chars\" at \",\" and Include \"unselected\" and Esca" +
                    "pe \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
 testRunner.And("assign to variable \"[[rec().phone]]\" split type \"New Line\" at \"\" and Include \"uns" +
                    "elected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.And("Skip Blanks rows is \"enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec().id",
                        "rec().name",
                        "rec().phone"});
            table16.AddRow(new string[] {
                        "ID",
                        "NAME",
                        "PHONE"});
            table16.AddRow(new string[] {
                        "1",
                        "Barney",
                        "1234"});
            table16.AddRow(new string[] {
                        "2",
                        "Tshepo",
                        "5678"});
            table16.AddRow(new string[] {
                        "3",
                        "Mo",
                        "01"});
#line 168
 testRunner.Then("the split result will be", ((string)(null)), table16, "Then ");
#line 174
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table17.AddRow(new string[] {
                        "String",
                        "Forward",
                        "Yes",
                        "1",
                        "[[rec().id]]    =",
                        "Chars",
                        ",",
                        "No",
                        "\" \""});
            table17.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec().name]]  =",
                        "Chars",
                        ",",
                        "No",
                        "\" \""});
            table17.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "3",
                        "\" \"             =",
                        "Chars",
                        ",",
                        "No",
                        "\" \""});
            table17.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "4",
                        "[[rec().phone]] =",
                        "New Line",
                        "",
                        "No",
                        ""});
#line 175
 testRunner.And("the debug inputs as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table18.AddRow(new string[] {
                        "1",
                        "[[rec(1).id]] = ID"});
            table18.AddRow(new string[] {
                        "",
                        "[[rec(2).id]] = 1"});
            table18.AddRow(new string[] {
                        "",
                        "[[rec(3).id]] = 2"});
            table18.AddRow(new string[] {
                        "",
                        "[[rec(4).id]] = 3"});
            table18.AddRow(new string[] {
                        "2",
                        "[[rec(1).name]] = NAME"});
            table18.AddRow(new string[] {
                        "",
                        "[[rec(2).name]] = Barney"});
            table18.AddRow(new string[] {
                        "",
                        "[[rec(3).name]] = Tshepo"});
            table18.AddRow(new string[] {
                        "",
                        "[[rec(4).name]] = Mo"});
            table18.AddRow(new string[] {
                        "3",
                        "\" \""});
            table18.AddRow(new string[] {
                        "4",
                        "[[rec(1).phone]] = PHONE"});
            table18.AddRow(new string[] {
                        "",
                        "[[rec(2).phone]] = 1234"});
            table18.AddRow(new string[] {
                        "",
                        "[[rec(3).phone]] = 5678"});
            table18.AddRow(new string[] {
                        "",
                        "[[rec(4).phone]] ="});
#line 181
 testRunner.And("the debug output as", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split blank text using All split types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitBlankTextUsingAllSplitTypes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split blank text using All split types", ((string[])(null)));
#line 197
this.ScenarioSetup(scenarioInfo);
#line 198
 testRunner.Given("A string to split with value \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 199
 testRunner.And("assign to variable \"[[vowels().letters]]\" split type \"Index\" at \"5\" and Include \"" +
                    "Selected\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("assign to variable \"[[vowels().letters]]\" split type \"Tab\" at \"\" and Include \"uns" +
                    "elected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.And("assign to variable \"[[vowels().letters]]\" split type \"Chars\" at \"ars,\" and Includ" +
                    "e \"selected\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
 testRunner.And("assign to variable \"[[vowels().letters]]\" split type \"Space\" at \"\" and Include \"u" +
                    "nselected\" and Escape \'\\\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.And("assign to variable \"[[vowels().letters]]\" split type \"End\" at \"\" and Include \"uns" +
                    "elected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
 testRunner.And("assign to variable \"[[vowels().letters]]\" split type \"NewLine\" at \"\" and Include " +
                    "\"unselected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "vowels().letters"});
#line 206
 testRunner.Then("the split result will be", ((string)(null)), table19, "Then ");
#line 208
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table20.AddRow(new string[] {
                        "\" \"",
                        "Forward",
                        "No",
                        "1",
                        "[[vowels().letters]] =",
                        "Index",
                        "5",
                        "Yes",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[vowels().letters]] =",
                        "Tab",
                        "",
                        "No",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "3",
                        "[[vowels().letters]] =",
                        "Chars",
                        "ars,",
                        "Yes",
                        "\" \""});
            table20.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "4",
                        "[[vowels().letters]] =",
                        "Space",
                        "",
                        "No",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "5",
                        "[[vowels().letters]] =",
                        "End",
                        "",
                        "No",
                        ""});
            table20.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "6",
                        "[[vowels().letters]] =",
                        "NewLine",
                        "",
                        "",
                        ""});
#line 209
 testRunner.And("the debug inputs as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 217
 testRunner.And("the debug output as", ((string)(null)), table21, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text using Index where and Space >")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextUsingIndexWhereAndSpace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text using Index where and Space >", ((string[])(null)));
#line 220
this.ScenarioSetup(scenarioInfo);
#line 221
 testRunner.Given("A string to split with value \"123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 222
 testRunner.And("assign to variable \"[[var]]\" split type \"Index\" at \",\" and Include \"Selected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.And("assign to variable \"[[vowels().letters]]\" split type \"Space\" at \"\" and Include \"u" +
                    "nselected\" and Escape \'\\\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 225
    testRunner.Then("the split result for \"[[var]]\" will be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 226
    testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table22.AddRow(new string[] {
                        "123",
                        "Forward",
                        "No",
                        "1",
                        "[[var]]    =",
                        "Index",
                        ",",
                        "Yes",
                        ""});
            table22.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[vowels().letters]] =",
                        "Space",
                        "",
                        "No",
                        ""});
#line 227
    testRunner.And("the debug inputs as", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table23.AddRow(new string[] {
                        "1",
                        "[[var]] ="});
            table23.AddRow(new string[] {
                        "2",
                        "[[vowels(1).letters]] ="});
#line 231
 testRunner.And("the debug output as", ((string)(null)), table23, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text using Char and Escape character")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextUsingCharAndEscapeCharacter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text using Char and Escape character", ((string[])(null)));
#line 236
this.ScenarioSetup(scenarioInfo);
#line 237
 testRunner.Given("A string to split with value \"123\\,45,1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 238
 testRunner.And("assign to variable \"[[var]]\" split type \"Chars\" at \",\" and Include \"Unselected\" a" +
                    "nd Escape \'\\\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 240
 testRunner.Then("the split result for \"[[var]]\" will be \"123\\,45\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 241
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table24.AddRow(new string[] {
                        "123\\,45,1",
                        "Forward",
                        "No",
                        "1",
                        "[[var]]  =",
                        "Chars",
                        ",",
                        "No",
                        "\\"});
#line 242
 testRunner.And("the debug inputs as", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table25.AddRow(new string[] {
                        "1",
                        "[[var]] = 123\\,45"});
#line 245
 testRunner.And("the debug output as", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split blank text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitBlankText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split blank text", ((string[])(null)));
#line 249
this.ScenarioSetup(scenarioInfo);
#line 250
 testRunner.Given("A string to split with value \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 251
 testRunner.And("assign to variable \"[[vowels(*).letters]]\" split type \"Index\" at \"1\" and Include " +
                    "\"Unselected\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "vowels().letters"});
#line 253
 testRunner.Then("the split result will be", ((string)(null)), table26, "Then ");
#line 255
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table27.AddRow(new string[] {
                        "\" \"",
                        "Forward",
                        "No",
                        "1",
                        "[[vowels(*).letters]] =",
                        "Index",
                        "1",
                        "No",
                        ""});
#line 256
 testRunner.And("the debug inputs as", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 259
 testRunner.And("the debug output as", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text to a recordset using a negative Index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextToARecordsetUsingANegativeIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text to a recordset using a negative Index", ((string[])(null)));
#line 262
this.ScenarioSetup(scenarioInfo);
#line 263
 testRunner.Given("A string to split with value \"abcde\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 264
 testRunner.And("assign to variable \"[[vowels(*).letters]]\" split type \"Index\" at \"-1\" and Include" +
                    " \"unselected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "vowels().letters"});
#line 266
 testRunner.Then("the split result will be", ((string)(null)), table29, "Then ");
#line 268
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table30.AddRow(new string[] {
                        "abcde",
                        "Forward",
                        "No",
                        "1",
                        "[[vowels(*).letters]] =",
                        "Index",
                        "-1",
                        "No",
                        ""});
#line 269
 testRunner.And("the debug inputs as", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table31.AddRow(new string[] {
                        "1",
                        "[[vowels(1).letters]] ="});
#line 272
 testRunner.And("the debug output as", ((string)(null)), table31, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text into negative recordset index as the index to split at")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextIntoNegativeRecordsetIndexAsTheIndexToSplitAt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text into negative recordset index as the index to split at", ((string[])(null)));
#line 276
this.ScenarioSetup(scenarioInfo);
#line 277
 testRunner.Given("A string to split with value \"abcd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 278
 testRunner.And("assign to variable \"[[vowels().letters]]\" split type \"Index\" at \"[[my(-1).index]]" +
                    "\" and Include \"Selected\" and Escape \'\\\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 280
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text using a negative recordset index as escape character")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextUsingANegativeRecordsetIndexAsEscapeCharacter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text using a negative recordset index as escape character", ((string[])(null)));
#line 282
this.ScenarioSetup(scenarioInfo);
#line 283
 testRunner.Given("A string to split with value \"abcd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 284
 testRunner.And("assign to variable \"[[vowels().letters]]\" split type \"Index\" at \"2\" and Include \"" +
                    "Selected\" and Escape \'[[my(-1).escape]]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 286
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table32.AddRow(new string[] {
                        "abcd",
                        "Forward",
                        "No",
                        "1",
                        "[[vowels().letters]] =",
                        "Index",
                        "2",
                        "Yes",
                        ""});
#line 287
 testRunner.And("the debug inputs as", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table33.AddRow(new string[] {
                        "1",
                        "[[vowels(1).letters]] ="});
#line 290
 testRunner.And("the debug output as", ((string)(null)), table33, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text using a index with \",\" and space")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextUsingAIndexWithAndSpace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text using a index with \",\" and space", ((string[])(null)));
#line 295
this.ScenarioSetup(scenarioInfo);
#line 296
     testRunner.Given("A string to split with value \"a bc, def\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 297
  testRunner.And("assign to variable \"[[vowels(*).letters]]\" split type \"Index\" at \",\" and Include " +
                    "\"UnSelected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
  testRunner.And("assign to variable \"[[vowels(*).letters]]\" split type \"Space\" at \"\" and Include \"" +
                    "unselected\" and Escape \'\\\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 299
  testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 300
  testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text using Index where index is not numeric - variable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextUsingIndexWhereIndexIsNotNumeric_Variable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text using Index where index is not numeric - variable", ((string[])(null)));
#line 302
  this.ScenarioSetup(scenarioInfo);
#line 303
     testRunner.Given("A string to split with value \"123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 304
  testRunner.And("I have a variable \"[[idx]]\" with a value “2”", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
     testRunner.And("assign to variable \"[[var]]\" split type \"Index\" at \"[[idx]]\" and Include \"unselec" +
                    "ted\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 306
     testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 307
     testRunner.Then("the split result for \"[[var]]\" will be \"12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 308
     testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text using Index where index > provided")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextUsingIndexWhereIndexProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text using Index where index > provided", ((string[])(null)));
#line 310
  this.ScenarioSetup(scenarioInfo);
#line 311
     testRunner.Given("A string to split with value \"123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 312
     testRunner.And("assign to variable \"[[var]]\" split type \"Index\" at \"7\" and Include \"Selected\" and" +
                    " Escape \'\\\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 313
     testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 314
     testRunner.Then("the split result for \"[[var]]\" will be \"123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 315
     testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split negative record index as Input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitNegativeRecordIndexAsInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split negative record index as Input", ((string[])(null)));
#line 334
this.ScenarioSetup(scenarioInfo);
#line 335
 testRunner.Given("A string to split with value \"[[my(-1).var]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 336
 testRunner.And("assign to variable \"[[vowels().letters]]\" split type \"Index\" at \"5\" and Include \"" +
                    "Selected\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 337
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 338
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table34.AddRow(new string[] {
                        "[[my(-1).var]] =",
                        "Forward",
                        "No",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 339
 testRunner.And("the debug inputs as", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table35.AddRow(new string[] {
                        "1",
                        "[[vowels(1).letters]] ="});
#line 342
 testRunner.And("the debug output as", ((string)(null)), table35, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Split text into negative recordset index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DataSplit")]
        public virtual void SplitTextIntoNegativeRecordsetIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split text into negative recordset index", ((string[])(null)));
#line 346
this.ScenarioSetup(scenarioInfo);
#line 347
 testRunner.Given("A string to split with value \"abcd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 348
 testRunner.And("assign to variable \"[[vowels(-1).letters]]\" split type \"Index\" at \"5\" and Include" +
                    " \"Selected\" and Escape \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 349
 testRunner.When("the data split tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 350
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table36.AddRow(new string[] {
                        "abcd",
                        "Forward",
                        "No",
                        "1",
                        "[[vowels(-1).letters]] =",
                        "Index",
                        "5",
                        "Yes",
                        ""});
#line 351
 testRunner.And("the debug inputs as", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table37.AddRow(new string[] {
                        "1",
                        "[[vowels(-1).letters]] ="});
#line 354
 testRunner.And("the debug output as", ((string)(null)), table37, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
