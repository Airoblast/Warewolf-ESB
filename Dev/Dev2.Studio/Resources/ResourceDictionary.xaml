<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:bdsm="clr-namespace:Dev2.Studio.Core.Models;assembly=Dev2.Studio.Core" 
                    xmlns:Activities="clr-namespace:Unlimited.Applications.BusinessDesignStudio.Activities;assembly=Dev2.Activities"
                    xmlns:igWindows="http://infragistics.com/Windows"
                    xmlns:igDock="http://infragistics.com/DockManager"
                    xmlns:ribbon="http://schemas.microsoft.com/winfx/2006/xaml/presentation/ribbon"
                    xmlns:converters="clr-namespace:Dev2.Studio.Core.AppResources.Converters;assembly=Dev2.Studio.Core"
                    xmlns:Dev2Enums="clr-namespace:Dev2.Enums;assembly=Dev2.Common"
                    xmlns:devFeedbackActions="clr-namespace:Dev2.Studio.Feedback.Actions"
                    xmlns:converters3="clr-namespace:Dev2.Studio.AppResources.Converters"
                    xmlns:contract="clr-namespace:Dev2.DataList.Contract;assembly=Dev2.Data"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:local="clr-namespace:Dev2.Studio.Core.AppResources.Behaviors;assembly=Dev2.Studio.Core" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--Fix For the annoying binding issue that would cause studio to hang in debug, it has to be here to apply to menu items globally-->
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <!--Fix For the annoying binding issue that would cause studio to hang in debug, it has to be here to apply to menu items globally-->

    <Activities:ImagePathConverter x:Key="ImagePathConverter" />

    <SolidColorBrush x:Key="DebugItemLabelBrush" Color="Black"/>
    <SolidColorBrush x:Key="DebugItemValueBrush" Color="ForestGreen"/>
    <SolidColorBrush x:Key="DebugItemVariableBrush" Color="Purple"/>

    <converters:DebugItemResultTypeToColorConverter x:Key="DebugItemResultTypeToColorConverter" />
    <converters:BooleanInvertConverter x:Key="BooleanInvertConverter" />
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverterNullIsVisible" NotNullVisibilityValue="Collapsed" NullVisibilityValue="Visible" />
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverterNullIsCollapsed" NotNullVisibilityValue="Visible" NullVisibilityValue="Collapsed" />
    <converters3:NavigationViewModelToImageConverter x:Key="NavigationViewModelToImageConverter" />
    <converters:LayoutObjectViewModelToImageConverter x:Key="LayoutObjectViewModelToImageConverter" />
    <converters:EnumToStringConverter x:Key="EnumToStringConverter" />
    <converters:TimeSpanToStringConverter x:Key="TimeSpanToStringConverter" Format="hh\:mm\:ss\.fff" />
    <converters:DateTimeToStringConverter x:Key="DateTimeToStringConverter" />
    <converters:CountToVisibilityConverter x:Key="CountToVisibilityConverter" />
    <converters:BoolToDisabledFontColorConverter x:Key="BoolToDisabledFontColorConverter" />
    <converters3:IntToVisibilityConverter x:Key="IntToVisibilityConverter" />
    <converters:StringToAutomationIdConverter x:Key="StringToAutomationIdConverter" />
    <converters:StringToVisibilityConverter x:Key="StringToVisibilityConverter"  />
    <converters:MultipleStringToVisilityValueConverter x:Key="MultipleStringToVisilityValueConverter"  />
    <converters:StringToVisibilityConverterMulti x:Key="StringToVisibilityConverterMulti"  />
    <converters:BoolToValueConverter x:Key="BoolToPlusMinusConverter" TrueValue="+" FalseValue="-" />
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverterPositive" TrueValue="Visible" FalseValue="Collapsed" />
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverterNegative" TrueValue="Collapsed" FalseValue="Visible" />
    <converters:Dev2ErrorTypeToImageConverter x:Key="Dev2ErrorTypeToImageConverter"/>
    <converters:NullableBoolToBoolConverter x:Key="NullableBoolToBoolConverter"/>
    <converters:TypeToVisibilityConverter x:Key="RecorderFeedbackActionTypeToVisibilityConverterPositive" Type="{x:Type devFeedbackActions:RecorderFeedbackAction}" />
    <converters:TypeToVisibilityConverter x:Key="RecorderFeedbackActionTypeToVisibilityConverterNegative" Type="{x:Type devFeedbackActions:RecorderFeedbackAction}" MatchingVisibilityValue="Collapsed" MismatchVisibilityValue="Visible" />

    <converters:EnumToBoolConverter x:Key="EnumToBoolConverterenRoundingType">
        <converters:EnumToBoolConverter.TrueEnumValues>
            <converters:EnumCollection>
                <x:Static Member="contract:enRoundingType.Normal" />
                <x:Static Member="contract:enRoundingType.Up" />
                <x:Static Member="contract:enRoundingType.Down" />
            </converters:EnumCollection>
        </converters:EnumToBoolConverter.TrueEnumValues>
    </converters:EnumToBoolConverter>

    <converters:EnumToVisibilityConverter x:Key="EnumToVisibilityConverterActivityTypeWorkflow">
        <converters:EnumToVisibilityConverter.VisibleEnumValues>
            <converters:EnumCollection>
                <x:Static Member="Dev2Enums:ActivityType.Workflow" />
                <x:Static Member="Dev2Enums:ActivityType.Service" />
            </converters:EnumCollection>
        </converters:EnumToVisibilityConverter.VisibleEnumValues>
    </converters:EnumToVisibilityConverter>

    <converters:EnumToBoolConverter x:Key="EnumToBoolConverterActivityTypeWorkflow">
        <converters:EnumToBoolConverter.TrueEnumValues>
            <converters:EnumCollection>
                <x:Static Member="Dev2Enums:ActivityType.Workflow" />
            </converters:EnumCollection>
        </converters:EnumToBoolConverter.TrueEnumValues>
    </converters:EnumToBoolConverter>

    <converters:EnumToVisibilityConverter x:Key="EnumToVisibilityConverterActivityTypeStep">
        <converters:EnumToVisibilityConverter.VisibleEnumValues>
            <converters:EnumCollection>
                <x:Static Member="Dev2Enums:ActivityType.Step" />
            </converters:EnumCollection>
        </converters:EnumToVisibilityConverter.VisibleEnumValues>
    </converters:EnumToVisibilityConverter>

    <converters:EnumToVisibilityConverter x:Key="EnumToVisibilityConverterStateTypeBefore">
        <converters:EnumToVisibilityConverter.VisibleEnumValues>
            <converters:EnumCollection>
                <x:Static Member="Dev2Enums:StateType.Before" />
            </converters:EnumCollection>
        </converters:EnumToVisibilityConverter.VisibleEnumValues>
    </converters:EnumToVisibilityConverter>

    <converters:EnumToVisibilityConverter x:Key="EnumToVisibilityConverterStateTypeAfter">
        <converters:EnumToVisibilityConverter.VisibleEnumValues>
            <converters:EnumCollection>
                <x:Static Member="Dev2Enums:StateType.After" />
            </converters:EnumCollection>
        </converters:EnumToVisibilityConverter.VisibleEnumValues>
    </converters:EnumToVisibilityConverter>

    <ribbon:RibbonContextMenu x:Key="DefaultContextMenu" Visibility="Hidden">
        <ribbon:RibbonMenuButton Label="Minimize the ribbon" >
            <ribbon:RibbonMenuButton.ItemContainerStyle >
                <Style TargetType="{x:Type MenuItem}" >
                    <Setter Property="Command" Value="{Binding RegionChangeCommand}" />
                </Style>
            </ribbon:RibbonMenuButton.ItemContainerStyle>
        </ribbon:RibbonMenuButton>
    </ribbon:RibbonContextMenu>

    <Storyboard x:Key="FlashingAnimationStoryBoard">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         From="0"
                                                         To="1"
                                                         RepeatBehavior="Forever"
                                                         AutoReverse="True"
                                                         Duration="0:0:1"/>
    </Storyboard>

    <Style x:Key="ImageTickStyle" TargetType="{x:Type Image}">
        <Setter Property="Height" Value="15" />
        <Setter Property="Width" Value="15" />
        <Setter Property="Source" Value="/Images/tickIcon.png" />
    </Style>

    <Style x:Key="FlashingFrameworkElement" TargetType="{x:Type FrameworkElement}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard Storyboard="{StaticResource FlashingAnimationStoryBoard}" />
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BottomRightResizeThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Cursor" Value="SizeNWSE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Image Source="/Images/Resize_Grip.png" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="DesignSurfaceDataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="Background" Value="White"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Padding" Value="2"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridCell}">
                    <Setter Property="IsTabStop" Value="False"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ActivityDataGridStyle" TargetType="{x:Type DataGrid}">
        <Setter Property="HeadersVisibility" Value="None"/>
        <Setter Property="Height" Value="52"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="GridLinesVisibility" Value="None" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="VerticalScrollBarVisibility" Value="Visible"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridCell}">
                    <Setter Property="IsTabStop" Value="False"/>
                    <Setter Property="Height" Value="25"/>
                    <Setter Property="BorderBrush" Value="LightGray"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Dev2ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="21"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="IsEditable" Value="False"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
    </Style>

    <Style x:Key="Dev2ComboBoxInDataGridStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="23"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="IsEditable" Value="False"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
    </Style>

    <Style x:Key="Dev2TextboxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Height" Value="21"/>
    </Style>

    <Style x:Key="Dev2HeadingLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="FontStretch" Value="Medium"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="Gray"/>
    </Style>

    <Style x:Key="LinkButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock Text="{TemplateBinding Content}" Background="{TemplateBinding Background}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="LightBlue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContentLinkButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ContentControl Content="{TemplateBinding Content}" Background="{TemplateBinding Background}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="LightBlue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="DefaultErrorTemplate">
        <DockPanel DataContext="{Binding AdornedElement.(Validation.Errors)/ErrorContent, ElementName=adorner}">
            <Ellipse x:Name="Ellipse" DockPanel.Dock="Right" Margin="2,0,2,0" Width="14" Height="14"                             VerticalAlignment="Center" 
                            Stroke="#40000000" StrokeThickness="2" Fill="Red">
                <Ellipse.ToolTip>
                    <Border MaxWidth="350">
                        <ContentControl FontSize="14" Content="{Binding}"/>
                    </Border>
                </Ellipse.ToolTip>
            </Ellipse>
            <Border BorderBrush="#40FFAF00" BorderThickness="2" IsHitTestVisible="False">
                <Border.Background>
                    <SolidColorBrush Color="Red" Opacity="0.2"/>
                </Border.Background>
                <AdornedElementPlaceholder Margin="-2" x:Name="adorner"/>
            </Border>
        </DockPanel>
    </ControlTemplate>

    <Style x:Key="DebugTreeStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel x:Name="stackPanel">
                        <i:Interaction.Behaviors>
                            <local:PreventHorizontalScrollWhenFocusedTreeViewItemBehavior/>
                        </i:Interaction.Behaviors>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates"/>
                            <VisualStateGroup x:Name="FocusStates"/>
                            <VisualStateGroup x:Name="SelectionStates"/>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Expanded"/>
                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="HasItemsStates"/>
                            <VisualStateGroup x:Name="ValidationStates"/>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="LightGray" BorderThickness="0,0,0,1" Margin="0,2.5,0,2.5" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="30" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>

                            <Border x:Name="Bd" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True"
                                BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" />

                            <TextBlock x:Name="NodeIndicator" Text="-" Visibility="Hidden" VerticalAlignment="Top" HorizontalAlignment="Center" />
                            <ToggleButton IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" x:Name="Expander">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="VerticalAlignment" Value="Top" />
                                        <Setter Property="Focusable" Value="false" />
                                        <Setter Property="Width" Value="16" />
                                        <Setter Property="Height" Value="16" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
                                                        <Path Fill="#00FFFFFF" Stroke="#FF989898" x:Name="ExpandPath">
                                                            <Path.Data>
                                                                <PathGeometry Figures="M0,0L0,6L6,0z" />
                                                            </Path.Data>
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF1BBBFA" />
                                                            <Setter TargetName="ExpandPath" Property="Fill" Value="#00FFFFFF" />
                                                        </Trigger>
                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="RenderTransform">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter TargetName="ExpandPath" Property="Fill" Value="#FF595959" />
                                                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF262626" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>

                            <Border HorizontalAlignment="Stretch" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True" Grid.Column="1" Background="Transparent">
                                <ContentPresenter x:Name="PART_Header" Content="{TemplateBinding HeaderedContentControl.Header}" ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
                        </Grid>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsExpanded" Value="True">
                			<Trigger.EnterActions>
                				<BeginStoryboard x:Name="Storyboard2_BeginStoryboard" Storyboard="{StaticResource Storyboard2}"/>
                			</Trigger.EnterActions>
                		</Trigger>
                		<Trigger Property="IsExpanded" Value="False">
                			<Trigger.EnterActions>
                				<BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
                			</Trigger.EnterActions>
                		</Trigger>-->
                        <Trigger Property="IsExpanded" Value="False"/>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="NodeIndicator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="Bd" Property="BorderThickness" Value="1" />
                            <Setter TargetName="Bd" Property="Margin" Value="1,0,0,0" />
                            <!--<Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />-->
                            <!--<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />-->
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="Bd" Property="BorderThickness" Value="1" />
                            <Setter TargetName="Bd" Property="Margin" Value="1,0,0,0" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DebugStateStyle" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource DebugTreeStyle}">
        <Setter Property="HorizontalContentAlignment"  Value="Stretch" />
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="0,0,0,2.5" />
        <Setter Property="Panel.Background" Value="White" />
        <Setter Property="AutomationProperties.AutomationId" Value="{Binding Content.Name}" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.HighlightSimulation, ElementName=DebugOutput}" Value="True" />
                    <Condition Binding="{Binding Content.IsSimulation}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.Background" Value="LightYellow" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.HighlightError, ElementName=DebugOutput}" Value="True" />
                    <Condition Binding="{Binding Content.HasError}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Border.Background" Value="{StaticResource ErrorBrush}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DebugStringStyle" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource DebugTreeStyle}">
        <Setter Property="HorizontalContentAlignment"  Value="Stretch" />
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="0,0,0,2.5" />
        <Setter Property="Panel.Background" Value="White" />
        <Setter Property="AutomationProperties.AutomationId" Value="{Binding Content}" />
    </Style>

    <Style x:Key="TreeStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <!--
                             Note that the following do not work, but I believe the top 2 should?!
                             <ToggleButton IsChecked="{TemplateBinding IsExpanded}" ClickMode="Press" Name="Expander">
                             <ToggleButton IsChecked="{TemplateBinding Property=IsExpanded}" ClickMode="Press" Name="Expander">
                             <ToggleButton IsChecked="{TemplateBinding Path=IsExpanded}" ClickMode="Press" Name="Expander">
                        -->
                            <ToggleButton IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" x:Name="Expander">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="Focusable" Value="false" />
                                        <Setter Property="Width" Value="16" />
                                        <Setter Property="Height" Value="16" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
                                                        <Path Fill="#00FFFFFF" Stroke="#FF989898" x:Name="ExpandPath">
                                                            <Path.Data>
                                                                <PathGeometry Figures="M0,0L0,6L6,0z" />
                                                            </Path.Data>
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF1BBBFA" />
                                                            <Setter TargetName="ExpandPath" Property="Fill" Value="#00FFFFFF" />
                                                        </Trigger>
                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="RenderTransform">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter TargetName="ExpandPath" Property="Fill" Value="#FF595959" />
                                                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF262626" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <Border x:Name="Bd"
                    HorizontalAlignment="Stretch"
                    BorderThickness="{TemplateBinding Border.BorderThickness}"
                    BorderBrush="{TemplateBinding Border.BorderBrush}"
                    Padding="{TemplateBinding Padding}"                    
                    SnapsToDevicePixels="True"
                    Grid.Column="1">
                                <ContentPresenter x:Name="PART_Header"
                                Content="{TemplateBinding HeaderedContentControl.Header}"
                                ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost"
                            Grid.Column="1"
                            Grid.Row="1" />
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                   Value="False">
                            <Setter TargetName="ItemsHost"
                    Property="Visibility"
                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems"
                   Value="False">
                            <Setter TargetName="Expander"
                    Property="Visibility"
                    Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsSelected"
                   Value="True">
                            <Setter TargetName="Bd"
                    Property="Panel.Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                         Value="True" />
                                <Condition Property="Selector.IsSelectionActive"
                         Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                    Property="Panel.Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                   Value="False">
                            <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridCellNotFocusable" TargetType="{x:Type DataGridCell}">
        <Setter Property="IsTabStop" Value="False"/>
    </Style>

    <Style x:Key="ContextMenuItemStyle">
        <Setter Property="HeaderedItemsControl.Header" Value="{Binding Text}"/>
        <Setter Property="MenuItem.Command" Value="{Binding Command}" />
    </Style>

    <Style TargetType="{x:Type Image}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Opacity" Value="1.0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextFontResizeAnimation">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
            				Duration="0:0:0.2"
            				Storyboard.TargetProperty="FontSize"
            				To="22" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
            				Duration="0:0:0.2"
            				Storyboard.TargetProperty="FontSize"
            				To="12" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconResizeAnimation">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Width"
            				To="50" Duration="0:0:5"/>
                        <DoubleAnimation Storyboard.TargetProperty="Height"
            				To="50" Duration="0:0:5"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Width"
            				To="16" Duration="0:0:5"/>
                        <DoubleAnimation Storyboard.TargetProperty="Height"
            				To="16" Duration="0:0:5"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>

    </Style>

    <VisualBrush x:Key="SearchHint" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0" HorizontalAlignment="Center" FontStyle="Italic" Foreground="Black" Opacity="0.3" Text="Filter"/>
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="DataListItemName" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0" HorizontalAlignment="Center" FontStyle="Italic" Foreground="Black" Opacity="0.3" Text="Name"/>
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="MultiAssignVariableName" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0" HorizontalAlignment="Center" FontStyle="Italic" Foreground="Black" Opacity="0.3" Text="[[Variable]]"/>
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="MultiAssignValue" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0" HorizontalAlignment="Center" FontStyle="Italic" Foreground="Black" Opacity="0.3" Text="Value"/>
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="DataListItemDescription" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0" HorizontalAlignment="Center" FontStyle="Italic" Foreground="Black" Opacity="0.3" Text="Notes"/>
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <!--<DataTemplate DataType="{x:Type bdsm:ActivityToolButtonModel}">
            <ribbon:RibbonButton ToolTip="{Binding Label}" Label="{Binding Label}" LargeImageSource="{Binding LargeImageSource}" />
    </DataTemplate>-->

    <DataTemplate DataType="{x:Type bdsm:OperatorType}">
        <StackPanel Orientation="Horizontal" Margin="10">
            <RadioButton GroupName="Test" IsChecked="{Binding Selected}" Margin="10" />
            <Label Content="Value Of" />
            <TextBox Text="{Binding TagName, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" MinWidth="100" />
            <Label Content="{Binding FriendlyName}" />
            <TextBox Text="{Binding Value, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" MinWidth="100">
                <TextBox.Style>

                    <Style TargetType="{x:Type TextBox}">

                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ShowEndValue}" Value="True">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ShowEndValue}" Value="False">
                                <Setter Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>
            </TextBox>
        </StackPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type bdsm:BetweenOperatorType}">
        <StackPanel Orientation="Horizontal" Margin="10">
            <RadioButton GroupName="Test" IsChecked="{Binding Selected}" Margin="10"   />
            <Label Content="Value Of" />
            <TextBox Text="{Binding TagName, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" MinWidth="100" />
            <Label Content="{Binding FriendlyName}" />
            <TextBox Text="{Binding Value, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" MinWidth="100" />
            <TextBlock Margin="5"><Run Text="And"/></TextBlock>
            <TextBox Text="{Binding EndValue, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" MinWidth="100" />

        </StackPanel>
    </DataTemplate>

    <!-- Expander Style -->
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels= "true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="15"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image x:Name="arrow" Source="../Images/closed.png"  Width="9"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="IsMouseOver" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Source" TargetName="arrow" Value="../Images/open.png"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Source" TargetName="arrow" Value="../Images/open_plasticwrap.png"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Source" TargetName="arrow" Value="../Images/closed_plasticwrap.png"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PlusMinusExpander" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <!--<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" Margin="{TemplateBinding Padding}" Visibility="Collapsed" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== Converter for XamDock ========== -->
    <converters:BoolToVisibilityConverter x:Key="BoolToVisConverter"/>

    <!-- ========== DockableTabItemTemplate ========== -->
    <ControlTemplate x:Key="{x:Static igDock:PaneTabItem.DockableTabItemTemplateKey}" TargetType="{x:Type igDock:PaneTabItem}">
        <Border x:Name="ctrlBorder" SnapsToDevicePixels="true" Height="22">
            <igWindows:CardPanel>
                <igWindows:CardPanel x:Name="Background">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <!-- AS 1/6/10 TFS25270 - TemplateBind the background and borderbrush instead of setting here and in triggers for base color. -->
                        <Border x:Name="Border" 
                                Margin="0,0,0,0" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="1,0,1,1" 
                                SnapsToDevicePixels="True"/>
                        <Rectangle x:Name="CurvedEdgesEffect" Margin="0,0,0,0" Fill="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveBottomCenterFillKey}}" VerticalAlignment="Top" Height="1" Visibility="Collapsed" SnapsToDevicePixels="True"/>
                        <Rectangle x:Name="firstTabCloseGap" Margin="0,-3,0,0" Stroke="{x:Null}" Width="1" Height="4" Fill="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveOuterBorderFillKey}}" HorizontalAlignment="Left" VerticalAlignment="Top"  Visibility="Collapsed" SnapsToDevicePixels="True"/>
                        <Border x:Name="HighlightBorder" 
								Margin="1,0,1,1"
                                BorderBrush="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveInnerBorderFillKey}}" 
                                BorderThickness="1,0,1,1"
                                SnapsToDevicePixels="True"/>
                    </Grid>
                </igWindows:CardPanel>
                <Border x:Name="Content"
					BorderThickness="{TemplateBinding BorderThickness}" 
					Padding="{TemplateBinding Padding}">
                    <DockPanel x:Name="contentPanel">
                        <igWindows:AutoDisabledImage x:Name="image"
                            Visibility="{Binding Pane.HasImage, Converter={StaticResource BoolToVisConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                            DockPanel.Dock="Left"
                            Margin="0,5,5,0"
                            Stretch="Uniform"
                            Source="{Binding Pane.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Height="16" Width="16" />
                        <ContentPresenter 
                            x:Name="contentHeader"
							ContentSource="Header" 
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							RecognizesAccessKey="true" 
							HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
							VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
						    igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
							igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type ContentControl}"
                            igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igDock:XamDockManager.ToolTipStyleKey}"
                            TextElement.Foreground="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTextFillKey}}"/>
                        <Button x:Name="closeBtn" DockPanel.Dock="Right"
                                Visibility="Collapsed"
                                Margin="3,5,0,3" Command="{x:Static igDock:ContentPaneCommands.Close}"
                                CommandTarget="{Binding Pane, RelativeSource={RelativeSource AncestorType={x:Type igDock:PaneTabItem}}}"
                    Style="{StaticResource {x:Static igDock:TabGroupPane.DocumentCloseButtonStyleKey}}" />
                    </DockPanel>
                </Border>
            </igWindows:CardPanel>
        </Border>
        <ControlTemplate.Triggers>
            <!-- To only show it for things in the DocumentContentHost: -->
            <Trigger Property="igDock:XamDockManager.PaneLocation" Value="Document">
                <Setter TargetName="closeBtn" Property="Visibility" Value="Visible" />
            </Trigger>

            <!-- To hide it from the menu items in the TabGroupPane's Files List menu: -->
            <!--<DataTrigger Binding="{Binding Path=Role, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" Value="SubmenuItem">
                <Setter TargetName="closeBtn" Property="Visibility" Value="Collapsed" />
            </DataTrigger>-->

            <!-- To only show it when the tab item is selected: -->
            <!--<DataTrigger Binding="{Binding Path=IsSelected, FallbackValue=true, RelativeSource={RelativeSource AncestorType={x:Type igDock:PaneTabItem}}}" Value="False">
                <Setter TargetName="closeBtn" Property="Visibility" Value="Collapsed" />
            </DataTrigger>-->

            <Trigger Property="TabStripPlacement" Value="Top">
                <Setter TargetName="ctrlBorder" Property="Margin" Value="0,2,0,0"/>
                <Setter Property="Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTextFillKey}}" />
                <Setter Property="Padding" Value="3,3,4,1" />
                <Setter Property="Margin" Value="0,0,-1,0" />
                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0"/>
                <!-- AS 1/6/10 TFS25270 Moved to style trigger
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTopCenterFillKey}}"/>-->
                <Setter TargetName="CurvedEdgesEffect" Property="VerticalAlignment" Value="Bottom"/>
                <Setter TargetName="HighlightBorder" Property="BorderThickness" Value="1,1,1,0"/>
                <Setter TargetName="HighlightBorder" Property="Margin" Value="1,1,1,0"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Bottom">
                <Setter TargetName="ctrlBorder" Property="Margin" Value="0,0,0,2"/>
                <Setter Property="Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTextFillKey}}" />
                <Setter Property="Padding" Value="3,1,4,3" />
                <Setter Property="Margin" Value="0,0,-1,0" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
                <Setter TargetName="ctrlBorder" Property="Margin" Value="2,0,0,0"/>
                <Setter Property="Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTextFillKey}}" />
                <Setter Property="Padding" Value="3,3,4,1" />
                <Setter Property="Margin" Value="0,-1,0,0" />
                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,1"/>
                <!-- AS 1/6/10 TFS25270 Moved to style trigger
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveLeftCenterFillKey}}"/>-->
                <Setter TargetName="CurvedEdgesEffect" Property="VerticalAlignment" Value="Stretch"/>
                <Setter TargetName="CurvedEdgesEffect" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="CurvedEdgesEffect" Property="Height" Value="Auto"/>
                <Setter TargetName="CurvedEdgesEffect" Property="Width" Value="1"/>
                <Setter TargetName="HighlightBorder" Property="BorderThickness" Value="1,1,0,1"/>
                <Setter TargetName="HighlightBorder" Property="Margin" Value="1,1,0,1"/>
                <Setter Property="LayoutTransform" TargetName="Content">
                    <Setter.Value>
                        <RotateTransform Angle="-90" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="TabStripPlacement" Value="Right">
                <Setter TargetName="ctrlBorder" Property="Margin" Value="0,0,2,0"/>
                <Setter Property="Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTextFillKey}}" />
                <Setter Property="Padding" Value="3,3,4,1" />
                <Setter Property="Margin" Value="0,0,0,-1" />
                <Setter TargetName="Border" Property="BorderThickness" Value="0,1,1,1"/>
                <!-- AS 1/6/10 TFS25270 Moved to style trigger
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveRightCenterFillKey}}"/>-->
                <Setter TargetName="CurvedEdgesEffect" Property="VerticalAlignment" Value="Stretch"/>
                <Setter TargetName="CurvedEdgesEffect" Property="HorizontalAlignment" Value="Left"/>
                <Setter TargetName="CurvedEdgesEffect" Property="Height" Value="Auto"/>
                <Setter TargetName="CurvedEdgesEffect" Property="Width" Value="1"/>
                <Setter TargetName="HighlightBorder" Property="BorderThickness" Value="0,1,1,1"/>
                <Setter TargetName="HighlightBorder" Property="Margin" Value="0,1,1,1"/>
                <Setter Property="LayoutTransform" TargetName="Content">
                    <Setter.Value>
                        <RotateTransform Angle="90" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsSelected" Value="true">
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveTextFillKey}}" />
                <Setter Property="Panel.ZIndex" Value="1" />
                <Setter Property="Visibility" TargetName="CurvedEdgesEffect" Value="Visible" />
                <Setter Property="Visibility" TargetName="HighlightBorder" Value="Collapsed" />
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveBottomCenterFillKey}}" />
                <Setter Property="BorderBrush" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveOuterBorderFillKey}}" />
            </Trigger>

            <!-- ==================== IsMouseOverTab + TabStripPlacement ==================== -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOverTab" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Bottom" />
                    <Condition Property="IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListHottrackBottomCenterFillKey}}" />
                <Setter Property="BorderBrush" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListHottrackOuterBorderFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOverTab" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Top" />
                    <Condition Property="IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListHottrackTopCenterFillKey}}" />
                <Setter Property="BorderBrush" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListHottrackOuterBorderFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOverTab" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Left" />
                    <Condition Property="IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListHottrackLeftCenterFillKey}}" />
                <Setter Property="BorderBrush" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListHottrackOuterBorderFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOverTab" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Right" />
                    <Condition Property="IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListHottrackRightCenterFillKey}}" />
                <Setter Property="BorderBrush" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListHottrackOuterBorderFillKey}}" />
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.GrayTextBrushKey}}" />
            </Trigger>


            <!-- ==================== IsSelected + TabStripPlacement ==================== -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Bottom" />
                </MultiTrigger.Conditions>
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveTextFillKey}}" />
                <Setter Property="Margin" Value="-1,-1,-2,-2" />
                <Setter Property="Padding" Value="4,0,5,0" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Top" />
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveTopCenterFillKey}}" />
                <Setter Property="Margin" Value="-1,-2,-2,-1" />
                <Setter Property="Padding" Value="4,3,5,0" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveLeftCenterFillKey}}" />
                <Setter Property="Margin" Value="-2,-2,-1,-1" />
                <Setter Property="Padding" Value="4,3,5,0" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Right" />
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveRightCenterFillKey}}" />
                <Setter Property="Margin" Value="-1,-1,-2,-2" />
                <Setter Property="Padding" Value="4,3,5,0" />
            </MultiTrigger>


            <!-- ========== If this is the First Tab in the series ========== -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igWindows:TabItemPanel.IsFirstTabInRow" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="3,1,5,3" />
                <Setter Property="Margin" Value="-2,0,-1,0" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="igWindows:TabItemPanel.IsFirstTabInRow" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Bottom" />
                </MultiTrigger.Conditions>
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTextFillKey}}" />
                <Setter Property="Padding" Value="3,1,5,3" />
                <Setter Property="Margin" Value="-2,0,-1,0" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="igWindows:TabItemPanel.IsFirstTabInRow" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Top" />
                </MultiTrigger.Conditions>
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTextFillKey}}" />
                <Setter Property="Padding" Value="3,3,5,1" />
                <Setter Property="Margin" Value="-2,0,-1,0" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="igWindows:TabItemPanel.IsFirstTabInRow" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTextFillKey}}" />
                <Setter Property="Padding" Value="3,3,5,0" />
                <Setter Property="Margin" Value="0,-1,0,-2" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="igWindows:TabItemPanel.IsFirstTabInRow" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Right" />
                </MultiTrigger.Conditions>
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTextFillKey}}" />
                <Setter Property="Padding" Value="3,3,5,0" />
                <Setter Property="Margin" Value="0,-2,0,-1" />
            </MultiTrigger>




            <!-- ========== If this is the First Tab and Selected in the series ========== -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="igWindows:TabItemPanel.IsFirstTabInRow" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Bottom" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="3,0,5,0" />
                <Setter Property="Margin" Value="-2,-1,-1,-2" />
                <Setter Property="Visibility" TargetName="firstTabCloseGap" Value="Visible" />
                <Setter Property="Visibility" TargetName="CurvedEdgesEffect" Value="Visible" />
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveTextFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="igWindows:TabItemPanel.IsFirstTabInRow" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Top" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="3,3,5,0" />
                <Setter Property="Margin" Value="-2,-2,-1,-1" />
                <Setter Property="Visibility" TargetName="firstTabCloseGap" Value="Visible" />
                <Setter Property="VerticalAlignment" TargetName="firstTabCloseGap" Value="Bottom" />
                <Setter Property="HorizontalAlignment" TargetName="firstTabCloseGap" Value="Left" />
                <Setter Property="Margin" TargetName="firstTabCloseGap" Value="0,0,0,-2" />
                <Setter Property="Width" TargetName="firstTabCloseGap" Value="1" />
                <Setter Property="Height" TargetName="firstTabCloseGap" Value="4" />
                <Setter Property="Visibility" TargetName="CurvedEdgesEffect" Value="Visible" />
                <Setter Property="VerticalAlignment" TargetName="CurvedEdgesEffect" Value="Bottom"/>
                <Setter Property="Margin" TargetName="CurvedEdgesEffect" Value="1,0,0,0"/>
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveTextFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="igWindows:TabItemPanel.IsFirstTabInRow" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="3,3,5,0" />
                <Setter Property="Margin" Value="-2,-1,-1,-2" />
                <Setter Property="Visibility" TargetName="firstTabCloseGap" Value="Visible" />
                <Setter Property="VerticalAlignment" TargetName="firstTabCloseGap" Value="Bottom" />
                <Setter Property="HorizontalAlignment" TargetName="firstTabCloseGap" Value="Right" />
                <Setter Property="Height" TargetName="firstTabCloseGap" Value="1" />
                <Setter Property="Width" TargetName="firstTabCloseGap" Value="3" />
                <Setter Property="Margin" TargetName="firstTabCloseGap" Value="0,0,-2,0" />
                <Setter Property="Margin" TargetName="CurvedEdgesEffect" Value="0,0,0,1"/>
                <Setter Property="Visibility" TargetName="CurvedEdgesEffect" Value="Visible" />
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveTextFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="igWindows:TabItemPanel.IsFirstTabInRow" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Right" />
                </MultiTrigger.Conditions>
                <Setter Property="Padding" Value="3,3,5,0" />
                <Setter Property="Margin" Value="-1,-2,-2,-1" />
                <Setter Property="Visibility" TargetName="firstTabCloseGap" Value="Visible" />
                <Setter Property="Margin" TargetName="firstTabCloseGap" Value="-2,0,0,0" />
                <Setter Property="VerticalAlignment" TargetName="firstTabCloseGap" Value="Top" />
                <Setter Property="HorizontalAlignment" TargetName="firstTabCloseGap" Value="Left" />
                <Setter Property="Height" TargetName="firstTabCloseGap" Value="1" />
                <Setter Property="Width" TargetName="firstTabCloseGap" Value="3" />
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListActiveTextFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOverTab" Value="True" />
                    <Condition Property="IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListHottrackTextFillKey}}" />
            </MultiTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ========== DocumentTabItemTemplateKey ========== -->
    <ControlTemplate x:Key="{x:Static igDock:PaneTabItem.DocumentTabItemTemplateKey}" TargetType="{x:Type igDock:PaneTabItem}">
        <Border x:Name="Background" Margin="0,0,-10,0" Height="22">
            <Grid x:Name="TabbedDocumentTab"
                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid x:Name="nonSelectedEnd">
                    <Path
                        Margin="0,2,0,0"
		                VerticalAlignment="Stretch"
		                Height="Auto"
		                Stretch="Fill"
		                Opacity="1"
		                Data="M 619,51 C619,51 616,51 616,51 608,51 606,54 606,54 606,54 594,66 594,66 594,66 619,66 619,66 619,66 619,51 619,51 z"
		                Fill="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentNotActiveOuterBorderFillKey}}" x:Name="nonSelectedOuterBorderSlice" />
                    <Path
		                Margin="1,3,0,0"
		                VerticalAlignment="Stretch"
		                Height="Auto"
		                Stretch="Fill"
		                Opacity="1"
		                Data="M 619,52 C619,52 617,52 617,52 609,52 607,55 607,55 607,55 596,66 596,66 596,66 619,66 619,66 619,66 619,52 619,52 z"
		                Fill="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentNotActiveInnerBorderFillKey}}" x:Name="nonSelectedInnerBorderSlice" />
                    <!-- AS 1/6/10 TFS25270 - TemplateBind to the background -->
                    <Path
		                Margin="2,3,0,0"
		                VerticalAlignment="Stretch"
		                Height="Auto"
		                Stretch="Fill"
		                Opacity="1"
		                Data="M 619,52 C619,52 618,52 618,52 610,52 608,55 608,55 608,55 597,66 597,66 597,66 619,66 619,66 619,66 619,52 619,52 z"
		                Fill="{TemplateBinding Background}" x:Name="nonSelectedCenterSlice" />
                </Grid>

                <!-- AS 3/5/09 TFS14746
                    selectedEnd was 1 pixel taller than the nonSelectedEnd so I added a negative margin to shift down and offset that pixel
                    I also adjusted the margins for the paths within since they were taller & wider than the non-selected end -->
                <Grid x:Name="selectedEnd" Visibility="Collapsed" Margin="0,0,0,-1">
                    <Path
                        x:Name="selectedOuterBorderSlice"
                        Stretch="Fill"
                        Data="M 490,65 C490,65 518,65 518,65 518,65 518,47 518,47 518,47 515,47 515,47 507,47 505,50 505,50 505,50 490,65 490,65 z"
                        Fill="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentActiveOuterBorderFillKey}}" SnapsToDevicePixels="True" 
                        Margin="0,0,-3,0"/>
                    <Path
                        x:Name="selectedInnerBorderSlice"
                        Stretch="Fill"
                        Data="M 518,48 C518,48 516,48 516,48 508,48 506,51 506,51 506,51 492,65 492,65 492,65 518,65 518,65 518,65 518,48 518,48 z"
                        Fill="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentActiveInnerBorderFillKey}}" SnapsToDevicePixels="True" 
                        Margin="1,1,-3,0"/>
                    <!-- AS 1/6/10 TFS25270 
                        TemplateBind to the background & changed margin from 0,1,-2,-2 to 0,1,-2,-1 since it was going too low -->
                    <Path
                        x:Name="selectedCenterSlice"
                        Stretch="Fill"
                        Data="M 492,66 C492,66 518,66 518,66 518,66 518,48 518,48 518,48 517,48 517,48 509,48 507,51 507,51 507,51 492,66 492,66 z" 
                        Fill="{TemplateBinding Background}" SnapsToDevicePixels="True"
                        Margin="0,1,-2,-1"
                        />
                </Grid>

                <Border x:Name="HighlightBorder" VerticalAlignment="Stretch" Grid.Column="1" Grid.ColumnSpan="1" 
                        Background="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentNotActiveInnerBorderFillKey}}" 
                        BorderBrush="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentNotActiveOuterBorderFillKey}}"
                        BorderThickness="0,1,1,0" CornerRadius="0,3,0,0" Margin="0,2,0,0"/>
                <!-- AS 1/6/10 TFS25270 - TemplateBind to the background -->
                <Border  x:Name="Border"  
                         Background="{TemplateBinding Background}" 
                         CornerRadius="0,1,0,0" Margin="0,3,2,0" VerticalAlignment="Stretch" Grid.Column="1"/>
                <Rectangle x:Name="activebrFiller" Grid.Column="1" Width="1" Height="1" 
                           VerticalAlignment="Bottom" HorizontalAlignment="Right" 
                           Fill="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentActiveInnerBorderFillKey}}" 
                           Margin="0,0,1,-1" 
                           Visibility="Collapsed"/>

                <Border x:Name="Content" Grid.Column="1"
							BorderThickness="{TemplateBinding BorderThickness}" >
                    <DockPanel x:Name="ContentDock" Margin="-8,1,6,0" VerticalAlignment="Bottom">
                        <igWindows:AutoDisabledImage Visibility="{Binding Pane.HasImage, Converter={StaticResource BoolToVisConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                DockPanel.Dock="Left"
                                Margin="0,5,5,0"
                                Stretch="Uniform"
                                Source="{Binding Pane.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Height="16" Width="16" />
                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="gdContent">
                            <ContentPresenter x:Name="NormalContent"
                        		ContentSource="Header" 
                        		SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                        		RecognizesAccessKey="true"                                       
                        		HorizontalAlignment="Center" 
                        		VerticalAlignment="Center"
                                igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
								igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type ContentControl}"
                                igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igDock:XamDockManager.ToolTipStyleKey}"
								/>

                            <ContentPresenter x:Name="NormalContentBold"
                        		ContentSource="Header" 
                        		SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                        		RecognizesAccessKey="true"                                       
                        		HorizontalAlignment="Center" 
                        		VerticalAlignment="Center"
                                igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
								igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type ContentControl}"
                                igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igDock:XamDockManager.ToolTipStyleKey}"
                                TextElement.FontWeight="Bold"
                                Margin="-4,0,-3,0"
                                Visibility="Hidden"/>
                        </Grid>

                        <Button x:Name="closeBtn" DockPanel.Dock="Right"
                                Visibility="Collapsed"
                                Margin="3,5,0,3" Command="{x:Static igDock:ContentPaneCommands.Close}"
                                CommandTarget="{Binding Pane, RelativeSource={RelativeSource AncestorType={x:Type igDock:PaneTabItem}}}"
                                Style="{StaticResource {x:Static igDock:TabGroupPane.DocumentCloseButtonStyleKey}}" />
                    </DockPanel>
                </Border>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- To only show it for things in the DocumentContentHost: -->
            <Trigger Property="igDock:XamDockManager.PaneLocation" Value="Document">
                <Setter TargetName="closeBtn" Property="Visibility" Value="Visible" />
            </Trigger>

            <!-- To hide it from the menu items in the TabGroupPane's Files List menu: -->
            <!--<DataTrigger Binding="{Binding Path=Role, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" Value="SubmenuItem">
                <Setter TargetName="closeBtn" Property="Visibility" Value="Collapsed" />
            </DataTrigger>-->

            <!-- To only show it when the tab item is selected: -->
            <DataTrigger Binding="{Binding IsSelected, FallbackValue=true, RelativeSource={RelativeSource AncestorType={x:Type igDock:PaneTabItem}}}" Value="False">
                <Setter TargetName="closeBtn" Property="Visibility" Value="Collapsed" />
            </DataTrigger>


            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.GrayTextBrushKey}}" />
            </Trigger>

            <Trigger Property="IsMouseOverTab" Value="true">
                <Setter Property="Fill" TargetName="nonSelectedOuterBorderSlice" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentHottrackOuterBorderFillKey}}" />
                <Setter Property="Fill" TargetName="nonSelectedInnerBorderSlice" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentHottrackInnerBorderFillKey}}" />
                <!-- AS 1/6/10 TFS25270
                    The center elements bind to the background so we need to change that.
                <Setter Property="Fill" TargetName="nonSelectedCenterSlice" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentHottrackCenterFillKey}}" />-->
                <Setter Property="BorderBrush" TargetName="HighlightBorder" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentHottrackOuterBorderFillKey}}"  />
                <Setter Property="Background" TargetName="HighlightBorder" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentHottrackInnerBorderFillKey}}"  />
                <!-- AS 1/6/10 TFS25270
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentHottrackCenterFillKey}}"  />-->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentHottrackCenterFillKey}}" />
            </Trigger>

            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Panel.ZIndex" Value="1" />
                <Setter Property="Visibility" TargetName="activebrFiller" Value="Visible"/>
                <Setter Property="Visibility" TargetName="selectedEnd" Value="Visible"/>
                <Setter Property="Visibility" TargetName="nonSelectedEnd" Value="Collapsed"/>
                <Setter Property="BorderBrush" TargetName="HighlightBorder" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentActiveOuterBorderFillKey}}"  />
                <Setter Property="Background" TargetName="HighlightBorder" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentActiveInnerBorderFillKey}}"  />
                <!-- AS 1/6/10 TFS25270
                    The center elements bind to the background so we need to change that.
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentActiveCenterFillKey}}"/>-->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentActiveCenterFillKey}}"/>
                <!-- AS 3/5/09 TFS14746
                    Since this element only is visible when selected we don't need to change the margin
                    so I moved this up into the margin property of the element and adjusted it with the other 
                    elements.
                <Setter Property="Margin" TargetName="selectedCenterSlice" Value="0,1,0,-2" />-->
                <Setter Property="Margin" TargetName="HighlightBorder" Value="-4,0,0,0" />
                <Setter Property="Margin" TargetName="Border" Value="-4,1,2,-2" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False"/>
                    <Condition Property="IsMouseOverTab" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedDocumentHottrackTextFillKey}}" />
            </MultiTrigger>

            <DataTrigger Binding="{Binding Pane.IsActiveDocument, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                <Setter Property="Visibility" TargetName="NormalContent" Value="Hidden" />
                <Setter Property="Visibility" TargetName="NormalContentBold" Value="Visible" />
            </DataTrigger>

            <!-- ========== TAB PLACEMENT : BOTTOM ========== -->
            <Trigger Property="TabStripPlacement" Value="Bottom">
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleY="-1" />
                    </Setter.Value>
                </Setter>
                <Setter Property="LayoutTransform" TargetName="ContentDock">
                    <Setter.Value>
                        <ScaleTransform ScaleY="-1" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!-- ========== TAB PLACEMENT : LEFT ========== -->
            <Trigger Property="TabStripPlacement" Value="Left">
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="-90"/>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!-- ========== TAB PLACEMENT : RIGHT ========== -->
            <Trigger Property="TabStripPlacement" Value="Right">
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="90" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ========== UnpinnedTabItemTemplateKey ========== -->
    <ControlTemplate x:Key="{x:Static igDock:PaneTabItem.UnpinnedTabItemTemplateKey}" TargetType="{x:Type igDock:PaneTabItem}">
        <Border SnapsToDevicePixels="true" Height="Auto">
            <igWindows:CardPanel>
                <igWindows:CardPanel x:Name="Background">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <!-- AS 1/6/10 TFS25270 - TemplateBind the background and borderbrush instead of setting here and in triggers for base color. -->
                        <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" BorderThickness="0,1,1,1"/>
                        <Border x:Name="InnerBorder" Margin="0,1,1,1" BorderThickness="0,1,1,1" BorderBrush="{StaticResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemHighlightFillKey}}" SnapsToDevicePixels="True"/>
                    </Grid>
                </igWindows:CardPanel>
                <Border x:Name="Content"
						BorderThickness="{TemplateBinding BorderThickness}" 
						Padding="{TemplateBinding Padding}">
                    <DockPanel>
                        <igWindows:AutoDisabledImage Visibility="{Binding Pane.HasImage, Converter={StaticResource BoolToVisConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                            DockPanel.Dock="Left"
                            Margin="0,5,5,0"
                            Stretch="Uniform"
                            Source="{Binding Pane.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Height="16" Width="16" />
                        <ContentPresenter
                            x:Name="contentHeader"
							ContentSource="Header" 
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							RecognizesAccessKey="true" 
							HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
							VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
							igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
							igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type ContentControl}"
                            igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igDock:XamDockManager.ToolTipStyleKey}"
                            TextElement.Foreground="{StaticResource {x:Static igDock:DockManagerBrushKeys.ThemeColorTextFillKey}}"
							/>
                        <Button x:Name="closeBtn" DockPanel.Dock="Right"
                                Visibility="Collapsed"
                                Margin="3,5,0,3" Command="{x:Static igDock:ContentPaneCommands.Close}"
                                CommandTarget="{Binding Pane, RelativeSource={RelativeSource AncestorType={x:Type igDock:PaneTabItem}}}"
                                Style="{StaticResource {x:Static igDock:TabGroupPane.DocumentCloseButtonStyleKey}}" />
                    </DockPanel>
                </Border>
            </igWindows:CardPanel>
        </Border>
        <ControlTemplate.Triggers>
            <!-- To only show it for things in the DocumentContentHost: -->
            <Trigger Property="igDock:XamDockManager.PaneLocation" Value="Document">
                <Setter TargetName="closeBtn" Property="Visibility" Value="Visible" />
            </Trigger>

            <!-- To hide it from the menu items in the TabGroupPane's Files List menu: -->
            <!--<DataTrigger Binding="{Binding Path=Role, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}}" Value="SubmenuItem">
                <Setter TargetName="closeBtn" Property="Visibility" Value="Collapsed" />
            </DataTrigger>-->

            <!-- To only show it when the tab item is selected: -->
            <DataTrigger Binding="{Binding IsSelected, FallbackValue=true, RelativeSource={RelativeSource AncestorType={x:Type igDock:PaneTabItem}}}" Value="False">
                <Setter TargetName="closeBtn" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <Trigger Property="IsMouseOverTab" Value="True">
                <!-- AS 1/6/10 TFS25270 Duplicate setter
                <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemHottrackOuterBorderFillKey}}" />-->
                <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemHottrackHighlightFillKey}}" />
                <!-- AS 1/6/10 TFS25270 Moved to style trigger
                <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemLeftHottrackCenterFillKey}}" />-->
                <Setter TargetName="contentHeader" Property="TextElement.Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.TabbedListNotActiveTextFillKey}}" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Top">
                <Setter Property="Padding" Value="3,4,4,3" />
                <Setter Property="Margin" Value="-1,0,0,0" />
                <!-- AS 1/6/10 TFS25270 Moved to style trigger
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemTopCenterFillKey}}" />-->
                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="1,1,1,0"/>
                <Setter TargetName="InnerBorder" Property="BorderThickness" Value="1,1,1,0"/>
                <Setter TargetName="InnerBorder" Property="Margin" Value="1,1,1,0"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Bottom">
                <Setter Property="Padding" Value="3,4,4,4" />
                <Setter Property="Margin" Value="-1,0,0,0" />
                <!-- AS 1/6/10 TFS25270 Moved to style trigger
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemBottomCenterFillKey}}" />-->
                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="1,0,1,1"/>
                <Setter TargetName="InnerBorder" Property="BorderThickness" Value="1,0,1,1"/>
                <Setter TargetName="InnerBorder" Property="Margin" Value="1,0,1,1"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
                <Setter Property="Padding" Value="4,5,4,3" />
                <Setter Property="Margin" Value="0,-1,0,0" />
                <!-- AS 1/6/10 TFS25270 Moved to style trigger
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemRightCenterFillKey}}" />-->
                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="1,1,0,1"/>
                <Setter TargetName="InnerBorder" Property="BorderThickness" Value="1,1,0,1"/>
                <Setter TargetName="InnerBorder" Property="Margin" Value="1,1,0,1"/>
                <Setter Property="LayoutTransform" TargetName="Content">
                    <Setter.Value>
                        <RotateTransform Angle="90" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
                <Setter Property="Padding" Value="4,5,4,3" />
                <Setter Property="Margin" Value="0,-1,0,0" />
                <Setter Property="LayoutTransform" TargetName="Content">
                    <Setter.Value>
                        <RotateTransform Angle="90" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.GrayTextBrushKey}}" />
            </Trigger>


            <!-- Hottrack for UnpinnedTabItems -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="TabStripPlacement" Value="Top"/>
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemTopHottrackCenterFillKey}}" />
                <Setter Property="BorderBrush" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemHottrackOuterBorderFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="TabStripPlacement" Value="Bottom"/>
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemBottomHottrackCenterFillKey}}" />
                <Setter Property="BorderBrush" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemHottrackOuterBorderFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="TabStripPlacement" Value="Left"/>
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemRightHottrackCenterFillKey}}" />
                <Setter Property="BorderBrush" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemHottrackOuterBorderFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="TabStripPlacement" Value="Right"/>
                </MultiTrigger.Conditions>
                <!-- AS 1/6/10 TFS25270 Removed TargetName="Border" so we use the template properties -->
                <Setter Property="Background" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemLeftHottrackCenterFillKey}}" />
                <Setter Property="BorderBrush" Value="{StaticResource {x:Static igDock:DockManagerBrushKeys.UnpinnedTabItemHottrackOuterBorderFillKey}}" />
            </MultiTrigger>

            <!-- Hottrack for UnpinnedTabItems -->

            <!-- IsFirstInGroup = True -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igDock:UnpinnedTabItemPanel.IsFirstInGroup" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Bottom" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" Value="15,0,0,0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igDock:UnpinnedTabItemPanel.IsFirstInGroup" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Top" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" Value="15,0,0,0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igDock:UnpinnedTabItemPanel.IsFirstInGroup" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" Value="0,15,0,0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igDock:UnpinnedTabItemPanel.IsFirstInGroup" Value="True" />
                    <Condition Property="TabStripPlacement" Value="Right" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" Value="0,15,0,0" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>      
</ResourceDictionary>
