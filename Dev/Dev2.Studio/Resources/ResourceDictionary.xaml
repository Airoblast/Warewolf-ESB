<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:bdsm="clr-namespace:Dev2.Studio.Core.Models;assembly=Dev2.Studio.Core" 
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:local="clr-namespace:Dev2.Studio.Core.AppResources.Behaviors;assembly=Dev2.Studio.Core"
                    xmlns:customControls="clr-namespace:Dev2.CustomControls;assembly=Dev2.CustomControls"
                    xmlns:ui="clr-namespace:Dev2.UI;assembly=Dev2.Intellisense">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Warewolf Studio;component/Resources/SplitterExpansionButton.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Warewolf Studio;component/Resources/SplitterPanel.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Warewolf Studio;component/Resources/Brushes.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Warewolf Studio;component/Themes/DataTemplatesIntellisense.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Warewolf Studio;component/Themes/ActivityStyles.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <!--Fix For the annoying binding issue that would cause studio to hang in debug, it has to be here to apply to menu items globally-->
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>


    <SolidColorBrush x:Key="DebugItemLabelBrush" Color="Black" />
    <SolidColorBrush x:Key="DebugItemValueBrush" Color="#009900" />
    <SolidColorBrush x:Key="DebugItemVariableBrush" Color="#7F1769" />

    <Storyboard x:Key="FlashingAnimationStoryBoard">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         From="0"
                                                         To="1"
                                                         RepeatBehavior="Forever"
                                                         AutoReverse="True"
                                                         Duration="0:0:1"/>
    </Storyboard>

    <Style x:Key="ImageTickStyle" TargetType="{x:Type Image}">
        <Setter Property="Height" Value="15" />
        <Setter Property="Width" Value="15" />
        <Setter Property="Source" Value="/Images/ActionSuccessful-16.png" />
    </Style>

    <Style x:Key="FlashingFrameworkElement" TargetType="{x:Type FrameworkElement}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard Storyboard="{StaticResource FlashingAnimationStoryBoard}" />
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BottomRightResizeThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Cursor" Value="SizeNWSE" />
        <Setter Property="Width" Value="8"/>
        <Setter Property="Height" Value="8"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Image Source="/Images/Resize_Grip.png" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DesignSurfaceDataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="Background" Value="White"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Padding" Value="2"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridCell}">
                    <Setter Property="IsTabStop" Value="False"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ActivityDataGridStyle" TargetType="{x:Type DataGrid}">
        <Setter Property="HeadersVisibility" Value="None"/>
        <Setter Property="Height" Value="53"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="GridLinesVisibility" Value="None" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="VerticalScrollBarVisibility" Value="Visible"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Visible"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border Background="{TemplateBinding Background}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="{TemplateBinding BorderThickness}"
					        Padding="{TemplateBinding Padding}"
					        SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Button Width="{Binding CellsPanelHorizontalOffset,
										                        RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
										        Command="{x:Static DataGrid.SelectAllCommand}"
										        Focusable="false"
										        Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
										                                                      TypeInTargetAssembly={x:Type DataGrid}}}"
										        Visibility="{Binding HeadersVisibility,
										                             ConverterParameter={x:Static DataGridHeadersVisibility.All},
										                             Converter={x:Static DataGrid.HeadersVisibilityConverter},
										                             RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
										                                Grid.Column="1"
										                                Visibility="{Binding HeadersVisibility,
										                                                     ConverterParameter={x:Static DataGridHeadersVisibility.Column},
										                                                     Converter={x:Static DataGrid.HeadersVisibilityConverter},
										                                                     RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
										                        Grid.Row="1"
										                        Grid.ColumnSpan="2"
										                        CanContentScroll="{TemplateBinding CanContentScroll}" />
                                        <ScrollBar x:Name="PART_VerticalScrollBar"
										           Grid.Row="1"
										           Grid.Column="2"
										           Maximum="{TemplateBinding ScrollableHeight}"
										           Orientation="Vertical"
										           ViewportSize="{TemplateBinding ViewportHeight}"
										           Visibility="{TemplateBinding VerticalScrollBarVisibility}"
										           Value="{Binding VerticalOffset,
										                           Mode=OneWay,
										                           RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Grid Grid.Row="2" Grid.Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar"
											           Grid.Column="1"
											           Maximum="{TemplateBinding ScrollableWidth}"
											           Orientation="Horizontal"
											           ViewportSize="{TemplateBinding ViewportWidth}"
											           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
											           Value="{Binding HorizontalOffset,
											                           Mode=OneWay,
											                           RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter Margin="0,1,0,-1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
      
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridCell}">
                    <Setter Property="IsTabStop" Value="False"/>
                    <Setter Property="Height" Value="25"/>
                    <Setter Property="BorderBrush" Value="{StaticResource BrushMouseOver}"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Dev2TextboxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="1"/>
        <Setter Property="Height" Value="21"/>
    </Style>

    <Style x:Key="Dev2HeadingLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="FontStretch" Value="Medium"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="{StaticResource DefaultFontSize}"/>
        <Setter Property="Foreground" Value="Gray"/>
    </Style>

    <Style x:Key="BlueHeadingStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="#00509F"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock Text="{TemplateBinding Content}" Background="{TemplateBinding Background}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="LightBlue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        </Style>

    <Style x:Key="LinkButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{StaticResource BrushAccentColor}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock Text="{TemplateBinding Content}" Background="{TemplateBinding Background}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="LightBlue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContentLinkButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ContentControl Content="{TemplateBinding Content}" Background="{TemplateBinding Background}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="LightBlue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="DefaultErrorTemplate">
        <DockPanel DataContext="{Binding AdornedElement.(Validation.Errors)/ErrorContent, ElementName=adorner}">
            <Ellipse x:Name="Ellipse" DockPanel.Dock="Right" Margin="2,0,2,0" Width="14" Height="14"                             VerticalAlignment="Center" 
                            Stroke="#40000000" StrokeThickness="2" Fill="Red">
                <Ellipse.ToolTip>
                    <Border MaxWidth="350">
                        <ContentControl FontSize="{StaticResource DefaultFontSize}" Content="{Binding}"/>
                    </Border>
                </Ellipse.ToolTip>
            </Ellipse>
            <Border BorderBrush="#40FFAF00" BorderThickness="2" IsHitTestVisible="False">
                <Border.Background>
                    <SolidColorBrush Color="Red" Opacity="0.2"/>
                </Border.Background>
                <AdornedElementPlaceholder Margin="-2" x:Name="adorner"/>
            </Border>
        </DockPanel>
    </ControlTemplate>

    <Style x:Key="DebugTreeStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel x:Name="stackPanel">
                        <i:Interaction.Behaviors>
                            <local:PreventHorizontalScrollWhenFocusedTreeViewItemBehavior/>
                        </i:Interaction.Behaviors>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates"/>
                            <VisualStateGroup x:Name="FocusStates"/>
                            <VisualStateGroup x:Name="SelectionStates"/>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Expanded"/>
                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="HasItemsStates"/>
                            <VisualStateGroup x:Name="ValidationStates"/>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="LightGray" BorderThickness="0,0,0,1" Margin="0,2.5,0,2.5" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="30" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>

                            <Border x:Name="Bd" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True"
                                BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" />

                            <TextBlock x:Name="NodeIndicator" Text="-" Visibility="Hidden" VerticalAlignment="Top" HorizontalAlignment="Center" />
                            <ToggleButton IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" x:Name="Expander">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="VerticalAlignment" Value="Top" />
                                        <Setter Property="Focusable" Value="false" />
                                        <Setter Property="Width" Value="16" />
                                        <Setter Property="Height" Value="16" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
                                                        <Path Fill="#00FFFFFF" Stroke="#FF989898" x:Name="ExpandPath">
                                                            <Path.Data>
                                                                <PathGeometry Figures="M0,0L0,6L6,0z" />
                                                            </Path.Data>
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF1BBBFA" />
                                                            <Setter TargetName="ExpandPath" Property="Fill" Value="#00FFFFFF" />
                                                        </Trigger>
                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="RenderTransform">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter TargetName="ExpandPath" Property="Fill" Value="#FF595959" />
                                                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF262626" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>

                            <Border HorizontalAlignment="Stretch" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True" Grid.Column="1" Background="Transparent">
                                <ContentPresenter x:Name="PART_Header" Content="{TemplateBinding HeaderedContentControl.Header}" ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
                        </Grid>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsExpanded" Value="True">
                			<Trigger.EnterActions>
                				<BeginStoryboard x:Name="Storyboard2_BeginStoryboard" Storyboard="{StaticResource Storyboard2}"/>
                			</Trigger.EnterActions>
                		</Trigger>
                		<Trigger Property="IsExpanded" Value="False">
                			<Trigger.EnterActions>
                				<BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
                			</Trigger.EnterActions>
                		</Trigger>-->
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="NodeIndicator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="Bd" Property="BorderThickness" Value="1" />
                            <Setter TargetName="Bd" Property="Margin" Value="1,0,0,0" />
                            <!--<Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />-->
                            <!--<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />-->
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="Bd" Property="BorderThickness" Value="1" />
                            <Setter TargetName="Bd" Property="Margin" Value="1,0,0,0" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DebugStateStyle" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource DebugTreeStyle}">
        <Setter Property="HorizontalContentAlignment"  Value="Stretch" />
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="0,2,0,2" />
        <Setter Property="Panel.Background" Value="White" />
        <Setter Property="Border.BorderThickness" Value="2" />
        <Setter Property="Border.Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="AutomationProperties.AutomationId" Value="{Binding Content.Name}" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.HighlightSimulation, ElementName=DebugOutput}" Value="True" />
                    <Condition Binding="{Binding Content.IsSimulation}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.Background" Value="LightYellow" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.HighlightError, ElementName=DebugOutput}" Value="True" />
                    <Condition Binding="{Binding Content.HasError}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Border.BorderBrush" Value="{StaticResource ValidationErrorElement}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DebugStringStyle" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource DebugTreeStyle}">
        <Setter Property="HorizontalContentAlignment"  Value="Stretch" />
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="0,0,0,2.5" />
        <Setter Property="Panel.Background" Value="White" />
        <Setter Property="AutomationProperties.AutomationId" Value="{Binding Content}" />
    </Style>

    <Style x:Key="TreeStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <!--
                             Note that the following do not work, but I believe the top 2 should?!
                             <ToggleButton IsChecked="{TemplateBinding IsExpanded}" ClickMode="Press" Name="Expander">
                             <ToggleButton IsChecked="{TemplateBinding Property=IsExpanded}" ClickMode="Press" Name="Expander">
                             <ToggleButton IsChecked="{TemplateBinding Path=IsExpanded}" ClickMode="Press" Name="Expander">
                        -->
                            <ToggleButton IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" x:Name="Expander">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="Focusable" Value="false" />
                                        <Setter Property="Width" Value="16" />
                                        <Setter Property="Height" Value="16" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
                                                        <Path Fill="#00FFFFFF" Stroke="#FF989898" x:Name="ExpandPath">
                                                            <Path.Data>
                                                                <PathGeometry Figures="M0,0L0,6L6,0z" />
                                                            </Path.Data>
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF1BBBFA" />
                                                            <Setter TargetName="ExpandPath" Property="Fill" Value="#00FFFFFF" />
                                                        </Trigger>
                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="RenderTransform">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter TargetName="ExpandPath" Property="Fill" Value="#FF595959" />
                                                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF262626" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <Border x:Name="Bd"
                    HorizontalAlignment="Stretch"
                    BorderThickness="{TemplateBinding Border.BorderThickness}"
                    BorderBrush="{TemplateBinding Border.BorderBrush}"
                    Padding="{TemplateBinding Padding}"                    
                    SnapsToDevicePixels="True"
                    Grid.Column="1">
                                <ContentPresenter x:Name="PART_Header"
                                Content="{TemplateBinding HeaderedContentControl.Header}"
                                ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost"
                            Grid.Column="1"
                            Grid.Row="1" />
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                   Value="False">
                            <Setter TargetName="ItemsHost"
                    Property="Visibility"
                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems"
                   Value="False">
                            <Setter TargetName="Expander"
                    Property="Visibility"
                    Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsSelected"
                   Value="True">
                            <Setter TargetName="Bd"
                    Property="Panel.Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                         Value="True" />
                                <Condition Property="Selector.IsSelectionActive"
                         Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                    Property="Panel.Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                   Value="False">
                            <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridCellNotFocusable" TargetType="{x:Type DataGridCell}">
        <Setter Property="IsTabStop" Value="False"/>
    </Style>

    <Style x:Key="ContextMenuItemStyle">
        <Setter Property="HeaderedItemsControl.Header" Value="{Binding Text}"/>
        <Setter Property="MenuItem.Command" Value="{Binding Command}" />
    </Style>

    <Style TargetType="{x:Type Image}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Opacity" Value="1.0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextFontResizeAnimation">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
            				Duration="0:0:0.2"
            				Storyboard.TargetProperty="FontSize"
            				To="22" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
            				Duration="0:0:0.2"
            				Storyboard.TargetProperty="FontSize"
            				To="{StaticResource DefaultFontSize}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconResizeAnimation">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Width"
            				To="50" Duration="0:0:5"/>
                        <DoubleAnimation Storyboard.TargetProperty="Height"
            				To="50" Duration="0:0:5"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Width"
            				To="16" Duration="0:0:5"/>
                        <DoubleAnimation Storyboard.TargetProperty="Height"
            				To="16" Duration="0:0:5"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>

    </Style>

    <VisualBrush x:Key="SearchHint" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0" HorizontalAlignment="Center" FontStyle="Italic" Foreground="Black" Opacity="0.3" Text="Filter"/>
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="DataListItemName" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0" HorizontalAlignment="Center" FontStyle="Italic" Foreground="Black" Opacity="0.3" Text="Name"/>
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="MultiAssignVariableName" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0" HorizontalAlignment="Center" FontStyle="Italic" Foreground="Black" Opacity="0.3" Text="[[Variable]]"/>
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="MultiAssignValue" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0" HorizontalAlignment="Center" FontStyle="Italic" Foreground="Black" Opacity="0.3" Text="Value"/>
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="DataListItemDescription" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0" HorizontalAlignment="Center" FontStyle="Italic" Foreground="Black" Opacity="0.3" Text="Notes"/>
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <DataTemplate DataType="{x:Type bdsm:OperatorType}">
        <StackPanel Orientation="Horizontal" Margin="10">
            <RadioButton GroupName="Test" IsChecked="{Binding Selected}" Margin="10" />
            <Label Content="Value Of" />
            <TextBox Text="{Binding TagName, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" MinWidth="100" />
            <Label Content="{Binding FriendlyName}" />
            <TextBox Text="{Binding Value, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" MinWidth="100">
                <TextBox.Style>

                    <Style TargetType="{x:Type TextBox}">

                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ShowEndValue}" Value="True">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ShowEndValue}" Value="False">
                                <Setter Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>
            </TextBox>
        </StackPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type bdsm:BetweenOperatorType}">
        <StackPanel Orientation="Horizontal" Margin="10">
            <RadioButton GroupName="Test" IsChecked="{Binding Selected}" Margin="10"   />
            <Label Content="Value Of" />
            <TextBox Text="{Binding TagName, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" MinWidth="100" />
            <Label Content="{Binding FriendlyName}" />
            <TextBox Text="{Binding Value, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" MinWidth="100" />
            <TextBlock Margin="5"><Run Text="And"/></TextBlock>
            <TextBox Text="{Binding EndValue, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" MinWidth="100" />

        </StackPanel>
    </DataTemplate>

    <!-- Expander Style -->
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels= "true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="15"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image x:Name="arrow" Source="../Images/GroupExpander-16.png"  Width="9"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="IsMouseOver" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Source" TargetName="arrow" Value="../Images/GroupCollapser-16.png"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Source" TargetName="arrow" Value="../Images/GroupCollapser-16.png"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Source" TargetName="arrow" Value="../Images/GroupExpander-16.png"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="PlusMinusExpander" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" 
                                          DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" 
                                          FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" 
                                          FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" 
                                          FontFamily="{TemplateBinding FontFamily}" 
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" 
                                          Style="{StaticResource ExpanderDownHeaderStyle}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" Margin="{TemplateBinding Padding}" 
                                              Visibility="Collapsed" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="customControls:FilterTextBox">
        <Setter Property="SearchText" Value=""/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Margin="2">
                        <Grid ShowGridLines="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                            </Grid.ColumnDefinitions>

                            <TextBox x:Name="TheTextBox"                                      
                                 Grid.Column="0"                                                                  
                                 Text="{Binding Path=SearchText,Mode=TwoWay, 
                                 UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}"    
                                 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 AutomationProperties.AutomationId="UI_DataListSearchtxt_AutoID">
                                <TextBox.Style>
                                    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                                        <Style.Triggers>
                                            <Trigger Property="Text" Value="">
                                                <Setter Property="Background" Value="{StaticResource SearchHint}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                            <Button x:Name="FilterButton"
                                Grid.Column="1"                                
                                HorizontalAlignment="Right" VerticalAlignment="Center"
                                IsEnabled="{Binding ElementName=TheTextBox,Path=Text,Converter={StaticResource FilterStringToBoolConverter}}">
                                <Image Source="/images/ClearFilter-32.png" Height="15" Width="15"></Image>
                            </Button>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="OneLineIntellisenseBoxStyle"  TargetType="{x:Type ui:IntellisenseTextBox}" 
           BasedOn="{StaticResource {x:Type ui:IntellisenseTextBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:IntellisenseTextBox}">
                    <Grid x:Name="MainGrid">

                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="1" Background="{TemplateBinding Background}" />
                        <Border x:Name="MouseOverVisual" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{StaticResource TextBoxHoverBorderBrush}" 
                                Background="{StaticResource TextBoxHoverBackgroundBrush}"
                                CornerRadius="1" />
                        <Border x:Name="FocusVisual" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{StaticResource TextBoxFocusedBrush}" CornerRadius="1" />
                        <Grid>
                            <TextBlock x:Name="PART_CalculateModePrefix" Text="fx" 
                                       VerticalAlignment="Top" Height="23" Padding="2,3,0,3" 
                                       Visibility="Collapsed" Foreground="Gray" FontStyle="Italic"/>
                            <ScrollViewer x:Name="PART_ContentHost" 
                                          Style="{StaticResource OneLineScrollViewerStyle}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <ContentPresenter x:Name="PART_DefaultTextHost"
                                          AllowDrop="{TemplateBinding AllowDrop}"
                                          Height="{TemplateBinding Height}"
                                          MinWidth="{TemplateBinding MinWidth}"
                                          MaxWidth="{TemplateBinding MaxWidth}"
                                    Content="{TemplateBinding DefaultText}"
                                    ContentTemplate="{TemplateBinding DefaultTextTemplate}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    IsHitTestVisible="False"
                                    Margin="{TemplateBinding Padding}"
                                    Visibility="Collapsed" />

                        <Popup x:Name="PART_Popup" 
                               HorizontalOffset="1"
                               VerticalOffset="1"
                               AllowsTransparency="True"
                               StaysOpen="False"
                               Placement="Bottom"
                               Focusable="False"
                               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               IsOpen="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                            <Grid MinWidth="{Binding ActualWidth, ElementName=MainGrid}" MaxHeight="200">
                                <Border x:Name="DropDownBorder" 
                                             BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" 
                                             BorderThickness="1" 
                                             Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                    <ListBox x:Name="PART_ItemList" Grid.IsSharedSizeScope="True"
                                                                    VirtualizingStackPanel.IsVirtualizing="False"
                                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                    VerticalContentAlignment="Stretch"
                                                                    HorizontalContentAlignment="Stretch"
                                                                    ItemsSource="{TemplateBinding ItemsSource}"
                                                                    ItemsPanel="{TemplateBinding ItemsPanel}"
                                                                    ItemTemplate="{TemplateBinding ItemTemplate}"
                                                                    ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                                    DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                                                    SelectionMode="{TemplateBinding SelectionMode}"
                                                                    SelectedValue="{TemplateBinding SelectedValue}"
                                                                    SelectedItem="{TemplateBinding SelectedItem}"
                                                                    SelectedIndex="{TemplateBinding SelectedIndex}"
                                                                    Foreground="{TemplateBinding Foreground}"/>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" TargetName="PART_DefaultTextHost" Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="AllowUserCalculateMode" Value="True" />
                                <Condition Property="IsInCalculateMode" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" TargetName="PART_CalculateModePrefix" Value="Visible" />
                                <Setter Property="Margin" TargetName="PART_ContentHost" Value="10,0,0,0" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MouseOverVisual" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="FocusVisual" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border"  Property="BorderBrush" Value="{StaticResource BrushDisabledForeground}" />
                            <Setter TargetName="Border"  Property="Background" Value="{StaticResource DisabledVisualElement}" />
                            <Setter Property="Foreground" Value="{StaticResource BrushDisabledForeground}" />
                        </Trigger>
                        <Trigger Property="HasError" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource ValidationErrorElement}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ActivityOneLineIntellisenseTextBoxStyle" TargetType="{x:Type ui:IntellisenseTextBox}" 
           BasedOn="{StaticResource OneLineIntellisenseBoxStyle}">
        <!--<Setter Property="attachedProperties:WizardEngineAttachedProperties.DontOpenWizard" Value="true"/>-->
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="MaxHeight" Value="25"/>
        <Setter Property="Height" Value="25"/>
    </Style>

</ResourceDictionary>
