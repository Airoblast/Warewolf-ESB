using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Controls;
using System.Windows;
using System.ComponentModel;
using Infragistics.Windows.Selection;
using System.Windows.Input;
using Infragistics.Windows.Helpers;
using System.Diagnostics;

using System.Windows.Automation.Peers;
using Infragistics.Windows.Automation.Peers.Editors;
using Infragistics.Windows.Themes;
using Infragistics.Windows.Internal;


namespace Infragistics.Windows.Editors
{
	
#region Infragistics Source Cleanup (Region)





#endregion // Infragistics Source Cleanup (Region)

	/// <summary>
	/// Represents an item within the <see cref="CalendarItemGroup"/>
	/// </summary>
	/// <remarks>
	/// <p class="body">A <b>CalendarItem</b> will represent either a day within a month, a month 
    /// within a year, a year within a decade or a decade within a century. CalendarItems are dynamically 
    /// generated by a <see cref="CalendarItemArea"/> based on the range of dates for the <see cref="CalendarItemGroup"/> 
    /// that contains the item area.</p>
    /// <p class="body">The control exposes a number of read-only properties that may be used to control the appearance 
    /// of the item.</p>
	/// </remarks>
    //[System.ComponentModel.ToolboxItem(false)]

    // JJD 4/15/10 - NA2010 Vol 2 - Added support for VisualStateManager
    [TemplateVisualState(Name = VisualStateUtilities.StateNormal,              GroupName = VisualStateUtilities.GroupCommon)]
    [TemplateVisualState(Name = VisualStateUtilities.StateMouseOver,           GroupName = VisualStateUtilities.GroupCommon)]
    [TemplateVisualState(Name = VisualStateUtilities.StateDisabled,            GroupName = VisualStateUtilities.GroupCommon)]

    [TemplateVisualState(Name = VisualStateUtilities.StateDay,                 GroupName = VisualStateUtilities.GroupCalendar)]
    [TemplateVisualState(Name = VisualStateUtilities.StateMonth,               GroupName = VisualStateUtilities.GroupCalendar)]
    [TemplateVisualState(Name = VisualStateUtilities.StateYear,                GroupName = VisualStateUtilities.GroupCalendar)]
    [TemplateVisualState(Name = VisualStateUtilities.StateDecade,              GroupName = VisualStateUtilities.GroupCalendar)]
    [TemplateVisualState(Name = VisualStateUtilities.StateCentury,             GroupName = VisualStateUtilities.GroupCalendar)]

    [TemplateVisualState(Name = VisualStateUtilities.StateFocused,             GroupName = VisualStateUtilities.GroupFocus)]
    [TemplateVisualState(Name = VisualStateUtilities.StateUnfocused,           GroupName = VisualStateUtilities.GroupFocus)]

    [TemplateVisualState(Name = VisualStateUtilities.StateActive,              GroupName = VisualStateUtilities.GroupActive)]
    [TemplateVisualState(Name = VisualStateUtilities.StateInactive,            GroupName = VisualStateUtilities.GroupActive)]

    [TemplateVisualState(Name = VisualStateUtilities.StateRegularDay,          GroupName = VisualStateUtilities.GroupDay)]
    [TemplateVisualState(Name = VisualStateUtilities.StateToday,               GroupName = VisualStateUtilities.GroupDay)]

    [TemplateVisualState(Name = VisualStateUtilities.StateSelected,            GroupName = VisualStateUtilities.GroupSelection)]
    [TemplateVisualState(Name = VisualStateUtilities.StateUnselected,          GroupName = VisualStateUtilities.GroupSelection)]
	// JJD 4/10/12 - Added SelectedUnfocused state
    [TemplateVisualState(Name = VisualStateUtilities.StateSelectedUnfocused,   GroupName = VisualStateUtilities.GroupSelection)]

	[DesignTimeVisible(false)]	// JM 02-18-10 - DO NOT MOVE TO DESIGN ASSEMBLY!!!
	public class CalendarItem : ContentControl,
		ISelectableElement,
		ISelectableItem
	{
		#region Member Variables

		private CalendarItemGroup _group;


        // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
        private bool _hasVisualStateGroups;


		#endregion //Member Variables

		#region Constructor

		static CalendarItem()
		{
			FrameworkElement.DefaultStyleKeyProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(typeof(CalendarItem)));
			KeyboardNavigation.DirectionalNavigationProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KeyboardNavigationMode.None));
			KeyboardNavigation.IsTabStopProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.FalseBox));
            FrameworkElement.HorizontalAlignmentProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.HorizontalAlignmentStretchBox));
            FrameworkElement.VerticalAlignmentProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.VerticalAlignmentStretchBox));
            Control.HorizontalContentAlignmentProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.HorizontalAlignmentCenterBox));
            Control.VerticalContentAlignmentProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.VerticalAlignmentCenterBox));

			// I was going to use a class input binding for this but when we are at the minimum calendarmode
			// and the command was not enabled (because we want to do regular selection), the framework was 
			// still handling the mouse message and so it was not bubbling up to the control
			//CommandManager.RegisterClassInputBinding(typeof(CalendarItem), new InputBinding(MonthCalendarCommands.DecreaseCalendarMode, new MouseGesture(MouseAction.LeftClick, ModifierKeys.None)));

			// This will manage FocusWithinManager.IsFocusWithin property for this type.
			// 
			FocusWithinManager.RegisterType(typeof(CalendarItem), new PropertyChangedCallback(OnIsFocusWithinChanged));


            // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
            UIElement.IsEnabledProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(new PropertyChangedCallback(OnVisualStatePropertyChanged)));

            XamMonthCalendar.IsSelectionActiveProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(new PropertyChangedCallback(OnVisualStatePropertyChanged)), XamMonthCalendar.IsSelectionActivePropertyKey);

        }

		/// <summary>
		/// Initializes a new <see cref="CalendarItem"/>
		/// </summary>
		/// <remarks>
		/// <p class="note"><b>Note:</b> This constructor is only used for styling purposes. At runtime, the controls are automatically generated.</p>
		/// </remarks>
		public CalendarItem() : this(DateTime.Today, DateTime.Today, null)
		{
		}

		internal CalendarItem(DateTime startDate, DateTime endDate, CalendarItemGroup group)
		{
			this.SetValue(StartDatePropertyKey, startDate);
			this.SetValue(EndDatePropertyKey, endDate);
			this._group = group;
		}
		#endregion //Constructor

        #region ResourceKeys

        #region CornerRadiusKey

        /// <summary>
        /// The key used to identify the <see cref="CornerRadius"/> used for the <see cref="CalendarItem"/>.
        /// </summary>
        public static readonly ResourceKey CornerRadiusKey = new StaticPropertyResourceKey(typeof(CalendarItem), "CornerRadiusKey");

        #endregion //CornerRadiusKey

        #endregion //ResourceKeys

		#region Properties

		#region Public Properties

        #region ContainsSelectedDates

        internal static readonly DependencyPropertyKey ContainsSelectedDatesPropertyKey =
            DependencyProperty.RegisterReadOnly("ContainsSelectedDates",
            typeof(bool), typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.FalseBox));

        /// <summary>
        /// Identifies the <see cref="ContainsSelectedDates"/> dependency property
        /// </summary>
        public static readonly DependencyProperty ContainsSelectedDatesProperty =
            ContainsSelectedDatesPropertyKey.DependencyProperty;

        /// <summary>
        /// Returns a boolean indicating whether the date contains at least one selected date.
        /// </summary>
        /// <remarks>
        /// <p class="body">When the CalendarItem represents an item in the <see cref="XamMonthCalendar.MinCalendarMode"/>, 
        /// the value of this property is equal to that of the <see cref="IsSelected"/>. This property is primarily 
        /// intended to allow the control to display some indication to the end user that there are one or more dates within 
        /// the item that are currently selected when they are in navigation mode.</p>
        /// </remarks>
        /// <seealso cref="ContainsSelectedDatesProperty"/>
        /// <seealso cref="IsSelected"/>
        /// <seealso cref="XamMonthCalendar.SelectedDate"/>
        /// <seealso cref="XamMonthCalendar.SelectedDates"/>
        //[Description("Returns a boolean indicating whether the date contains at least one selected date.")]
        //[Category("MonthCalendar Properties")] // Behavior
        [Bindable(true)]
        [ReadOnly(true)]
        public bool ContainsSelectedDates
        {
            get
            {
                return (bool)this.GetValue(CalendarItem.ContainsSelectedDatesProperty);
            }
        }

        #endregion //ContainsSelectedDates

        #region ContainsToday

        internal static readonly DependencyPropertyKey ContainsTodayPropertyKey =
            DependencyProperty.RegisterReadOnly("ContainsToday",
            typeof(bool), typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.FalseBox));

        /// <summary>
        /// Identifies the <see cref="ContainsToday"/> dependency property
        /// </summary>
        public static readonly DependencyProperty ContainsTodayProperty =
            ContainsTodayPropertyKey.DependencyProperty;

        /// <summary>
        /// Returns a boolean indicating if the item contains the current date.
        /// </summary>
        /// <remarks>
        /// <p class="body">When the CalendarItem represents a date in the <see cref="XamMonthCalendar.MinCalendarMode"/>, 
        /// this property is equivalent to the <see cref="IsToday"/>. This property is primarily intended to allow providing 
        /// an indication to the end user during navigation mode, which item contains the calendar item that 
        /// represents the current date.</p>
        /// </remarks>
        /// <seealso cref="ContainsTodayProperty"/>
        //[Description("Returns a boolean indicating if the item contains the current date.")]
        //[Category("MonthCalendar Properties")] // Behavior
        [Bindable(true)]
        [ReadOnly(true)]
        public bool ContainsToday
        {
            get
            {
                return (bool)this.GetValue(CalendarItem.ContainsTodayProperty);
            }
        }

        #endregion //ContainsToday

		#region EndDate

		private static readonly DependencyPropertyKey EndDatePropertyKey =
			DependencyProperty.RegisterReadOnly("EndDate",
			typeof(DateTime), typeof(CalendarItem), new FrameworkPropertyMetadata(DateTime.MinValue));

		/// <summary>
		/// Identifies the <see cref="EndDate"/> dependency property
		/// </summary>
		public static readonly DependencyProperty EndDateProperty =
			EndDatePropertyKey.DependencyProperty;

		/// <summary>
		/// Returns the ending date for the calendar item.
		/// </summary>
        /// <remarks>
        /// <p class="body">The <see cref="StartDate"/> and EndDate indicate the range of dates that the 
        /// item represents. When the <see cref="CalendarItemGroup.GetCurrentCalendarMode(DependencyObject)"/> is <b>Days</b>, 
        /// a <see cref="CalendarDay"/> instance will be used and its StartDate and EndDate will be equal.</p>
        /// </remarks>
		/// <seealso cref="EndDateProperty"/>
        /// <seealso cref="StartDate"/>
        /// <seealso cref="CalendarDay"/>
        //[Description("Returns the ending date for the calendar item.")]
		//[Category("MonthCalendar Properties")] // Behavior
		[Bindable(true)]
		[ReadOnly(true)]
		public DateTime EndDate
		{
			get
			{
				return (DateTime)this.GetValue(CalendarItem.EndDateProperty);
			}
		}

		#endregion //EndDate

		#region IsActive

		internal static readonly DependencyPropertyKey IsActivePropertyKey =
			DependencyProperty.RegisterReadOnly("IsActive",
			typeof(bool), typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.FalseBox

            // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
            , new PropertyChangedCallback(OnVisualStatePropertyChanged)

));

		/// <summary>
		/// Identifies the <see cref="IsActive"/> dependency property
		/// </summary>
		public static readonly DependencyProperty IsActiveProperty =
			IsActivePropertyKey.DependencyProperty;

		/// <summary>
		/// Returns a boolean indicating if the day represents the <see cref="XamMonthCalendar.ActiveDate"/>
		/// </summary>
        /// <remarks>
        /// <p class="body">A CalendarItem is considered active when the <see cref="XamMonthCalendar.ActiveDate"/> 
        /// is within the item's <see cref="StartDate"/> and <see cref="EndDate"/>.</p>
        /// </remarks>
        /// <see cref="XamMonthCalendar.ActiveDate"/>
		/// <seealso cref="IsActiveProperty"/>
		//[Description("Returns a boolean indicating if the day represents the 'ActiveDay' of the containing XamMonthCalendar.")]
		//[Category("MonthCalendar Properties")] // Data
		[Bindable(true)]
		[ReadOnly(true)]
		public bool IsActive
		{
			get
			{
				return (bool)this.GetValue(CalendarItem.IsActiveProperty);
			}
		}

		#endregion //IsActive

        #region IsLeadingOrTrailingItem

        internal static readonly DependencyPropertyKey IsLeadingOrTrailingItemPropertyKey =
            DependencyProperty.RegisterReadOnly("IsLeadingOrTrailingItem", 
            typeof(bool), typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.FalseBox

            // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
            , new PropertyChangedCallback(OnVisualStatePropertyChanged)

        ));

        /// <summary>
        /// Identifies the <see cref="IsLeadingOrTrailingItem"/> dependency property
        /// </summary>
        public static readonly DependencyProperty IsLeadingOrTrailingItemProperty = IsLeadingOrTrailingItemPropertyKey.DependencyProperty;

        /// <summary>
        /// Returns a boolean indicating if the CalendarItem is a leading or trailing date in the containing <see cref="CalendarItemGroup"/>
        /// </summary>
        /// <remarks>
        /// <p class="body">Leading and trailing dates are dates displayed within a <see cref="CalendarItemGroup"/> that 
        /// do not fall within its <see cref="CalendarItemGroup.FirstDateOfGroup"/> and <see cref="CalendarItemGroup.LastDateOfGroup"/>. 
        /// Leading and trailing items are only displayed when the <see cref="CalendarItemGroup.ShowLeadingDates"/> and/or 
        /// <see cref="CalendarItemGroup.ShowTrailingDates"/> is true.</p>
        /// </remarks>
        /// <seealso cref="IsLeadingOrTrailingItemProperty"/>
        /// <seealso cref="CalendarItemGroup.ShowLeadingDates"/>
        /// <seealso cref="CalendarItemGroup.ShowTrailingDates"/>
        /// <seealso cref="XamMonthCalendar.ShowLeadingAndTrailingDates"/>
        //[Description("Returns a boolean indicating if the CalendarItem is a leading or trailing date in the containing CalendarItemGroup")]
        //[Category("MonthCalendar Properties")] // Behavior
        [Bindable(true)]
        public bool IsLeadingOrTrailingItem
        {
            get
            {
                return (bool)this.GetValue(CalendarItem.IsLeadingOrTrailingItemProperty);
            }
            set
            {
                this.SetValue(CalendarItem.IsLeadingOrTrailingItemProperty, value);
            }
        }

        #endregion //IsLeadingOrTrailingItem

		#region IsSelected

        
#region Infragistics Source Cleanup (Region)






















































#endregion // Infragistics Source Cleanup (Region)

        internal static readonly DependencyPropertyKey IsSelectedPropertyKey = DependencyProperty.RegisterReadOnly("IsSelected",
            typeof(bool), typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.FalseBox

            // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
            , new PropertyChangedCallback(OnVisualStatePropertyChanged)

        ));

        /// <summary>
        /// Identifies the <see cref="IsSelected"/> dependency property
        /// </summary>
        public static readonly DependencyProperty IsSelectedProperty = IsSelectedPropertyKey.DependencyProperty;

        /// <summary>
        /// Returns a boolean indicating if the date is selected.
        /// </summary>
        /// <remarks>
        /// <p class="body">When the CalendarItem represents an item in the <see cref="XamMonthCalendar.MinCalendarMode"/>, 
        /// the value of this property is based on whether the date that the item represents has been selected. When in navigation 
        /// mode, this value is based on whether the item is active since selection can only be modified in the user interface 
        /// when the <see cref="XamMonthCalendar.CurrentCalendarMode"/> equals the MinCalendarMode.</p>
        /// </remarks>
        /// <seealso cref="IsSelectedProperty"/>
        /// <seealso cref="ContainsSelectedDates"/>
        /// <seealso cref="XamMonthCalendar.SelectedDate"/>
        /// <seealso cref="XamMonthCalendar.SelectedDates"/>
        /// <seealso cref="XamMonthCalendar.SelectionType"/>
        /// <seealso cref="XamMonthCalendar.SelectedDatesChanged"/>
        //[Description("Returns a boolean indicating if the date is selected.")]
        //[Category("MonthCalendar Properties")] // Behavior
        [ReadOnly(true)]
        public bool IsSelected
        {
            get
            {
                return (bool)this.GetValue(CalendarItem.IsSelectedProperty);
            }
        }
        #endregion //IsSelected

        // AS 9/24/08 TFS7577
        #region IsSelectionActive

        /// <summary>
        /// IsSelectionActive Read-Only Dependency Property
        /// </summary>
        /// <seealso cref="CalendarItem.IsSelectionActive"/>
        public static readonly DependencyProperty IsSelectionActiveProperty = XamMonthCalendar.IsSelectionActiveProperty.AddOwner(typeof(CalendarItem));

        /// <summary>
        /// Returns a boolean indicating indicating whether the containing XamMonthCalendar has keyboard focus.
        /// </summary>
        /// <remarks>
        /// <p class="body">The IsSelectionActive is used to indicate if keyboard focus is within the containing <see cref="XamMonthCalendar"/>. This 
        /// is often used to alter the appearance of a selected item when the control does not have keyboard focus (e.g. changing the selection color to 
        /// gray when focus is outside the control).</p>
        /// </remarks>
        /// <seealso cref="CalendarItem.IsSelected"/>
        /// <seealso cref="XamMonthCalendar.GetIsSelectionActive(DependencyObject)"/>
        //[Description("Returns a boolean indicating whether the containing XamMonthCalendar has keyboard focus.")]
        //[Category("MonthCalendar Properties")] // Behavior
        [Bindable(true)]
        [ReadOnly(true)]
        public bool IsSelectionActive
        {
            get
            {
                return (bool)this.GetValue(CalendarItem.IsSelectionActiveProperty);
            }
        }

        #endregion //IsSelectionActive

        #region IsToday

        internal static readonly DependencyPropertyKey IsTodayPropertyKey =
            DependencyProperty.RegisterReadOnly("IsToday",
            typeof(bool), typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.FalseBox

            // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
            , new PropertyChangedCallback(OnVisualStatePropertyChanged)

        ));

        /// <summary>
        /// Identifies the <see cref="IsToday"/> dependency property
        /// </summary>
        public static readonly DependencyProperty IsTodayProperty =
            IsTodayPropertyKey.DependencyProperty;

        /// <summary>
        /// Returns a boolean indicating whether the element is an item in the <see cref="XamMonthCalendar.MinCalendarMode"/> and represents the current date.
        /// </summary>
        /// <remarks>
        /// <p class="body">The IsToday property is similar to the <see cref="ContainsToday"/> property except that it will 
        /// only be true when not in navigation mode (i.e. when the <see cref="XamMonthCalendar.MinCalendarMode"/> equals the 
        /// <see cref="XamMonthCalendar.CurrentCalendarMode"/>). It is used to identify the CalendarItem that represents the 
        /// current date.</p>
        /// </remarks>
        /// <seealso cref="IsTodayProperty"/>
        /// <seealso cref="ContainsToday"/>
        //[Description("Returns a boolean indicating whether the element is an item in the MinCalendarMode of the containing XamMonthCalendar and represents the current date.")]
        //[Category("MonthCalendar Properties")] // Behavior
        [Bindable(true)]
        [ReadOnly(true)]
        public bool IsToday
        {
            get
            {
                return (bool)this.GetValue(CalendarDay.IsTodayProperty);
            }
        }

        #endregion //IsToday

        #region StartDate

		private static readonly DependencyPropertyKey StartDatePropertyKey =
			DependencyProperty.RegisterReadOnly("StartDate",
			typeof(DateTime), typeof(CalendarItem), new FrameworkPropertyMetadata(DateTime.MinValue));

		/// <summary>
		/// Identifies the <see cref="StartDate"/> dependency property
		/// </summary>
		public static readonly DependencyProperty StartDateProperty =
			StartDatePropertyKey.DependencyProperty;

		/// <summary>
		/// Returns the starting date for the calendar item.
		/// </summary>
        /// <remarks>
        /// <p class="body">The StartDate and <see cref="EndDate"/> indicate the range of dates that the 
        /// item represents. When the <see cref="CalendarItemGroup.GetCurrentCalendarMode(DependencyObject)"/> is <b>Days</b>, 
        /// a <see cref="CalendarDay"/> instance will be used and its StartDate and EndDate will be equal.</p>
        /// </remarks>
        /// <seealso cref="EndDate"/>
        /// <seealso cref="CalendarDay"/>
        /// <seealso cref="StartDateProperty"/>
		//[Description("Returns the starting date for the calendar item.")]
		//[Category("MonthCalendar Properties")] // Behavior
		[Bindable(true)]
		[ReadOnly(true)]
		public DateTime StartDate
		{
			get
			{
				return (DateTime)this.GetValue(CalendarItem.StartDateProperty);
			}
		}

		#endregion //StartDate

		#endregion //Public Properties

        #region Internal Properties

		#region Group

		internal CalendarItemGroup Group
		{
			get { return this._group; }
		}

		#endregion //Group

	    #endregion //Internal Properties

		#region Private

		#region CalendarManager
		internal CalendarManager CalendarManager
		{
			get { return this.Group == null ? CalendarManager.CurrentCulture : this.Group.CalendarManager; }
		}
		#endregion //CalendarManager

		#endregion //Private

		#endregion //Properties

		#region Methods
		
		#region Internal Methods

        #region CompareTo
        internal int CompareTo(DateTime date)
        {
            if (date < this.StartDate)
                return 1;

            if (date > this.EndDate)
                return -1;

            return 0;
        } 
        #endregion //CompareTo

		#region ContainsDate
		internal bool ContainsDate(DateTime date)
		{
			return date >= this.StartDate && date <= this.EndDate;
		}
		#endregion //ContainsDate

        #region Recycle
        internal virtual void Recycle(DateTime start, DateTime end)
        {
            Debug.Assert(start <= end);
            this.SetValue(StartDatePropertyKey, start);
            this.SetValue(EndDatePropertyKey, end);

            this.ClearValue(IsTodayPropertyKey);
            this.ClearValue(ContainsTodayPropertyKey);
            this.ClearValue(IsSelectedPropertyKey);
            this.ClearValue(ContainsSelectedDatesPropertyKey);
            this.ClearValue(IsEnabledProperty);
            this.ClearValue(IsLeadingOrTrailingItemPropertyKey);
            this.ClearValue(IsActivePropertyKey);
        } 
        #endregion //Recycle
        
        #region VisualState... Methods


        // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
        /// <summary>
        /// Called to set the VisualStates of the editor
        /// </summary>
        /// <param name="useTransitions">Determines whether transitions should be used.</param>
        protected virtual void SetVisualState(bool useTransitions)
        {

            // Set Common states
            if (this.IsEnabled == false)
                VisualStateManager.GoToState(this, VisualStateUtilities.StateDisabled, useTransitions);
            else if (this.IsMouseOver)
                VisualStateUtilities.GoToState(this, useTransitions, VisualStateUtilities.StateMouseOver, VisualStateUtilities.StateNormal);
            else
                VisualStateManager.GoToState(this, VisualStateUtilities.StateNormal, useTransitions);

            bool isFocused = this.IsKeyboardFocusWithin;

            // Set Focus states
            if (isFocused)
                VisualStateUtilities.GoToState(this, useTransitions, VisualStateUtilities.StateFocused, VisualStateUtilities.StateUnfocused);
            else
                VisualStateManager.GoToState(this, VisualStateUtilities.StateUnfocused, useTransitions);

            // Set Calendar states
            CalendarItemGroup.GoToCalendarState(this, useTransitions);

            // Set Selection states
			// JJD 4/10/12 - Added SelectedUnfocused state
			//if (this.IsSelectionActive && this.IsSelected)
			if (this.IsSelected)
			{
				if (this.IsSelectionActive)
					VisualStateManager.GoToState(this, VisualStateUtilities.StateSelected, useTransitions);
				else
					VisualStateManager.GoToState(this, VisualStateUtilities.StateSelectedUnfocused, useTransitions);
			}
			else
                VisualStateManager.GoToState(this, VisualStateUtilities.StateUnselected, useTransitions);

            // Set Active states
            if ( this.IsActive )
                VisualStateManager.GoToState(this, VisualStateUtilities.StateActive, useTransitions);
            else
                VisualStateManager.GoToState(this, VisualStateUtilities.StateInactive, useTransitions);

            if ( this.IsToday )
                VisualStateManager.GoToState(this, VisualStateUtilities.StateToday, useTransitions);
            else
                VisualStateManager.GoToState(this, VisualStateUtilities.StateRegularDay, useTransitions);

        }

        // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
        internal static void OnVisualStatePropertyChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
        {
            CalendarItem calItem = target as CalendarItem;

            if (calItem != null)
                calItem.UpdateVisualStates();
        }

        // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
        /// <summary>
        /// Called to set the visual states of the control
        /// </summary>
        protected void UpdateVisualStates()
        {
            this.UpdateVisualStates(true);
        }

        /// <summary>
        /// Called to set the visual states of the control
        /// </summary>
        /// <param name="useTransitions">Determines whether transitions should be used.</param>
        protected void UpdateVisualStates(bool useTransitions)
        {
            if (false == this._hasVisualStateGroups)
                return;

            if (!this.IsLoaded)
                useTransitions = false;

            this.SetVisualState(useTransitions);
        }



        #endregion //VisualState... Methods	

		#endregion //Internal Methods

		#region Private Methods

		#region OnIsFocusWithinChanged
		private static void OnIsFocusWithinChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
		{
			if (KnownBoxes.TrueBox.Equals(e.NewValue))
			{
                CalendarItem item = (CalendarItem)d;
                XamMonthCalendar calendar = XamMonthCalendar.GetMonthCalendar(item);

				if (null != calendar)
                    calendar.ActiveDate = item.StartDate;
			}
		}
		#endregion //OnIsFocusWithinChanged

		#endregion //Private Methods

		#endregion //Methods

        #region Base class overrides

        #region OnApplyTemplate

        /// <summary>
        /// Called when the template is applied.
        /// </summary>
        /// <remarks>
        /// <p class="body">
        /// OnApplyTemplate is a .NET framework method exposed by the FrameworkElement. This class overrides
        /// it to get the focus site from the control template whenever template gets applied to the control.
        /// </p>
        /// </remarks>
        public override void OnApplyTemplate()
        {
            base.OnApplyTemplate();

            // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
            this._hasVisualStateGroups = VisualStateUtilities.GetHasVisualStateGroups(this);

            this.UpdateVisualStates(false);

        }

        #endregion //OnApplyTemplate
	
        #region OnCreateAutomationPeer

        /// <summary>
        /// Returns <see cref="CalendarItem"/> Automation Peer Class <see cref="CalendarItemAutomationPeer"/>
        /// </summary>
        /// <returns>AutomationPeer</returns>
        protected override AutomationPeer OnCreateAutomationPeer()
        {
            return new CalendarItemAutomationPeer(this);
        }

        #endregion //OnCreateAutomationPeer

        #region OnIsKeyboardFocusedChanged

        /// <summary>
        /// Called when the IsKeyboardFocusWithin property changes
        /// </summary>
        /// <param name="e"></param>
        protected override void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e)
        {
            base.OnIsKeyboardFocusWithinChanged(e);

            // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
            this.UpdateVisualStates();

        }

        #endregion //OnIsKeyboardFocusedChanged	
    
        #region OnMouseEnter
        /// <summary>
        /// Invoked when the mouse is moved within the bounds of the element.
        /// </summary>
        /// <param name="e">Provides information about the mouse position.</param>
        protected override void OnMouseEnter(MouseEventArgs e)
        {
            base.OnMouseEnter(e);

            // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
            this.UpdateVisualStates();

        }
        #endregion //OnMouseEnter

        #region OnMouseLeave
        /// <summary>
        /// Invoked when the mouse is moved outside the bounds of the element.
        /// </summary>
        /// <param name="e">Provides information about the mouse position.</param>
        protected override void OnMouseLeave(MouseEventArgs e)
        {
            base.OnMouseLeave(e);

            // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
            this.UpdateVisualStates();

        }
        #endregion //OnMouseLeave
    
        #region ToString

        /// <summary>
		/// Overriden. Returns the date range that the item represents
		/// </summary>
		/// <returns>A string containing the <see cref="StartDate"/> and <see cref="EndDate"/>.</returns>
		public override string ToString()
		{
			return string.Format(this.CalendarManager.DateTimeFormat, "CalendarItem {0:d}-{1:d}", this.StartDate, this.EndDate);
		}
		#endregion //ToString

		#endregion //Base class overrides

		#region ISelectableElement Members

		ISelectableItem ISelectableElement.SelectableItem
		{
			get { return this; }
		}

		#endregion //ISelectableElement

		#region ISelectableItem Members

		bool ISelectableItem.IsDraggable
		{
			get { return false; }
		}

		bool ISelectableItem.IsSelectable
		{
			get { return this.IsEnabled; }
		}

		bool ISelectableItem.IsSelected
		{
			get { return this.IsSelected; }
		}

		bool ISelectableItem.IsTabStop
		{
			get { return this.IsEnabled; }
		}

		#endregion // ISelectableItem
	}
}

#region Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved
/* ---------------------------------------------------------------------*
*                           Infragistics, Inc.                          *
*              Copyright (c) 2001-2012 All Rights reserved               *
*                                                                       *
*                                                                       *
* This file and its contents are protected by United States and         *
* International copyright laws.  Unauthorized reproduction and/or       *
* distribution of all or any portion of the code contained herein       *
* is strictly prohibited and will result in severe civil and criminal   *
* penalties.  Any violations of this copyright will be prosecuted       *
* to the fullest extent possible under law.                             *
*                                                                       *
* THE SOURCE CODE CONTAINED HEREIN AND IN RELATED FILES IS PROVIDED     *
* TO THE REGISTERED DEVELOPER FOR THE PURPOSES OF EDUCATION AND         *
* TROUBLESHOOTING. UNDER NO CIRCUMSTANCES MAY ANY PORTION OF THE SOURCE *
* CODE BE DISTRIBUTED, DISCLOSED OR OTHERWISE MADE AVAILABLE TO ANY     *
* THIRD PARTY WITHOUT THE EXPRESS WRITTEN CONSENT OF INFRAGISTICS, INC. *
*                                                                       *
* UNDER NO CIRCUMSTANCES MAY THE SOURCE CODE BE USED IN WHOLE OR IN     *
* PART, AS THE BASIS FOR CREATING A PRODUCT THAT PROVIDES THE SAME, OR  *
* SUBSTANTIALLY THE SAME, FUNCTIONALITY AS ANY INFRAGISTICS PRODUCT.    *
*                                                                       *
* THE REGISTERED DEVELOPER ACKNOWLEDGES THAT THIS SOURCE CODE           *
* CONTAINS VALUABLE AND PROPRIETARY TRADE SECRETS OF INFRAGISTICS,      *
* INC.  THE REGISTERED DEVELOPER AGREES TO EXPEND EVERY EFFORT TO       *
* INSURE ITS CONFIDENTIALITY.                                           *
*                                                                       *
* THE END USER LICENSE AGREEMENT (EULA) ACCOMPANYING THE PRODUCT        *
* PERMITS THE REGISTERED DEVELOPER TO REDISTRIBUTE THE PRODUCT IN       *
* EXECUTABLE FORM ONLY IN SUPPORT OF APPLICATIONS WRITTEN USING         *
* THE PRODUCT.  IT DOES NOT PROVIDE ANY RIGHTS REGARDING THE            *
* SOURCE CODE CONTAINED HEREIN.                                         *
*                                                                       *
* THIS COPYRIGHT NOTICE MAY NOT BE REMOVED FROM THIS FILE.              *
* --------------------------------------------------------------------- *
*/
#endregion Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved