using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Infragistics.Controls.Grids
{
	/// <summary>
	/// Class used by Conditional Formatting to hold derived information about Percentile formulated
	/// data and allow access to it.
	/// </summary>
	public abstract class PercentileData
	{
		#region GetValueType
		/// <summary>
		/// Returns the underlying ValueType of Nullable ValueType.  Returns null otherwise.
		/// </summary>
		/// <param name="dataType"></param>
		/// <returns></returns>
		protected internal static Type GetValueType(Type dataType)
		{
			if (dataType != null)
			{
				if (dataType.IsGenericType && dataType.GetGenericTypeDefinition().Equals(typeof(Nullable<>)))
				{
					Type newType = Nullable.GetUnderlyingType(dataType);

					if (newType.IsValueType)
						return newType;

				}
			}
			return null;
		}
		#endregion // GetValueType

		#region Members

		IList _originalSortedList;

		#endregion // Members

		#region Properties

		#region CalculatedValuesDictionary

		/// <summary>
		/// Gets / sets an <see cref="IDictionary"/> which contains previously calculated and cached values.
		/// </summary>
		protected IDictionary CalculatedValuesDictionary { get;  set; }

		#endregion // CalculatedValuesDictionary

		#region OriginalSortedList

		/// <summary>
		/// Gets the original list that was generated by the Context operation.
		/// </summary>
		protected IList OriginalSortedList
		{
			get
			{
				return this._originalSortedList;
			}
			set
			{
				this._originalSortedList = value;
				this.OnOriginalSortedListSet();
			}
		}

		#endregion // OriginalSortedList

		#region CachedCastedList
		/// <summary>
		/// Gets / sets the <see cref="IList"/> of data casted to the <see cref="IQueryable"/> which is needed for later actions.
		/// </summary>
		protected IQueryable CachedCastedList
		{
			get;
			set;
		}
		#endregion // CachedCastedList

		#region ItemCount
		/// <summary>
		/// Gets / sets a count of how many items are in the processed list.
		/// </summary>
		protected int ItemCount
		{
			get;
			set;
		}
		#endregion // ItemCount

		#endregion // Properties

		#region Methods

		#region Static

		#region CreatePercentileData
		/// <summary>
		/// Creates a new <see cref="PercentileData"/> object from the inputted data.
		/// </summary>
		/// <param name="objectDataType"></param>
		/// <param name="key"></param>
		/// <param name="isDateColumn"></param>
		/// <param name="query"></param>
		/// <returns></returns>
        public static PercentileData CreateGenericPercentileData(CachedTypedInfo objectDataType, string key, bool isDateColumn, IQueryable query)
		{
			Type specificPercentileData = null;

			Type fieldType = DataManagerBase.ResolvePropertyTypeFromPropertyName(key, objectDataType);

			if (fieldType.GetInterface("IComparable", true) != null)
			{
				specificPercentileData = typeof(PercentileData<>).MakeGenericType(
				new System.Type[] { fieldType });
			}
			else
			{
				Type nonNullableType = GetValueType(fieldType);

				specificPercentileData = typeof(PercentileData<,>).MakeGenericType(
								new System.Type[] { fieldType, nonNullableType });
			}

			PercentileData data = (PercentileData)Activator.CreateInstance(specificPercentileData, new object[] { });

			InformationContext context = InformationContext.CreateGenericInformationContext(objectDataType, key, true, false, null, isDateColumn);

			data.OriginalSortedList = context.GetCompleteValuesList(query);

			return data;
		}

		#endregion // CreatePercentileData

		#endregion // Static

		#region GetPercentileValue
		/// <summary>
		/// Determines the percentile value that the inputted value will fall into.
		/// </summary>
		/// <param name="dataValue"></param>
		/// <returns></returns>
		public abstract double GetPercentileValue(object dataValue);
		#endregion // GetPercentileValue

		#region GetValueJustUnderPercentile

		/// <summary>
		/// Attempts to find the last object in a given percentile range.
		/// </summary>
		/// <param name="percentile"></param>
		/// <returns></returns>
		protected internal abstract double GetValueJustUnderPercentile(double percentile);

		#endregion // GetValueJustUnderPercentile

		#region GetValueJustOverPercentile

		/// <summary>
		/// Attempts to find the first object in a given percentile range.
		/// </summary>
		/// <param name="percentile"></param>
		/// <returns></returns>
		protected internal abstract double GetValueJustOverPercentile(double percentile);
		
		#endregion // GetValueJustOverPercentile

		#region CalculatedMinimumValue
		/// <summary>
		/// Gets the lowest value from the list of value.
		/// </summary>
		protected internal double CalculatedMinimumPercentileValue
		{
			get
			{
				double value = 0;
				if (this.OriginalSortedList.Count > 0)
				{
					value = this.GetPercentileValue(this.OriginalSortedList[0]);
				}
				return value;
			}
		}
		#endregion // CalculatedMinimumValue

		#region CalculatedMaximumPercentileValue
		/// <summary>
		/// Gets the highest value from the list of value.
		/// </summary>
		protected internal double CalculatedMaximumPercentileValue
		{
			get
			{
				double value = 0;
				int count = this.OriginalSortedList.Count;
				if (count > 0)
				{
					value = this.GetPercentileValue(this.OriginalSortedList[count - 1]);
				}
				return value;
			}
		}
		#endregion // CalculatedMaximumValue

		#region OnOriginalSortedListSet
		/// <summary>
		/// Method called when the <see cref="OriginalSortedList"/> is set so that any calcualations that need to be done can be.
		/// </summary>
		protected abstract void OnOriginalSortedListSet();
		#endregion // OnOriginalSortedListSet

		#endregion  // Methods
	}

	/// <summary>
	/// Class used by Conditional Formatting to hold derived information about Percentile formulated
	/// data and allow access to it.
	/// </summary>
	public class PercentileData<T> : PercentileData where T : IComparable
	{
		#region Overrides

		#region GetPercentileValue
		/// <summary>
		/// Determines the percentile value that the inputted value will fall into.
		/// </summary>
		/// <param name="dataValue"></param>
		/// <returns></returns>
		public override double GetPercentileValue(object dataValue)
		{
			T value = (T)dataValue;			

			if (this.CalculatedValuesDictionary.Contains(value))
			{
				return (double)this.CalculatedValuesDictionary[value];
			}

			return CalculatePercentile(value);
		}
		#endregion // GetPercentileValue

		#endregion // Overrides

		#region Methods

		#region Private

		private double CalculatePercentile(T value)
		{
			IQueryable<T> q = (IQueryable<T>)this.CachedCastedList;

			double lowerCount = Convert.ToDouble(q.Count(a => (a == null ? false : a.CompareTo(value) < 0)));

			double higherCount = Convert.ToDouble(q.Count(a => (a == null ? false : a.CompareTo(value) > 0)));

			double percentile = (lowerCount / (lowerCount + higherCount)) * 100;

			this.CalculatedValuesDictionary.Add(value, percentile);

			return percentile;
		}
		#endregion // Private

		#endregion // Methods

		#region OnOriginalSortedListSet
		/// <summary>
		/// Method called when the <see cref="PercentileData.OriginalSortedList"/> is set so that any calcualations that need to be done can be.
		/// </summary>
		protected override void OnOriginalSortedListSet()
		{
			this.CalculatedValuesDictionary = new Dictionary<T, double>();

			this.CachedCastedList = null;

			if (this.OriginalSortedList != null)
			{
				this.CachedCastedList = this.OriginalSortedList.AsQueryable().Cast<T>();

				this.ItemCount = this.OriginalSortedList.Count;
			}
		}
		#endregion // OnOriginalSortedListSet

        #region GetValueJustUnderPercentile

        /// <summary>
        /// Attempts to find the last object in a given percentile range.
        /// </summary>
        /// <param name="percentile"></param>
        /// <returns></returns>
        protected internal override double GetValueJustUnderPercentile(double percentile)
		{           
			double value = 0.0;

			if (this.ItemCount > 0)
			{
				int itemAtSpot = Convert.ToInt32(Math.Floor((percentile / 100) * this.ItemCount));

                if (itemAtSpot >= this.OriginalSortedList.Count)
                    itemAtSpot = this.OriginalSortedList.Count - 1;

				value = Convert.ToDouble(this.OriginalSortedList[itemAtSpot]);
			}
			return value;
		}

        #endregion // GetValueJustUnderPercentile

        #region GetValueJustOverPercentile

        /// <summary>
        /// Attempts to find the first object in a given percentile range.
        /// </summary>
        /// <param name="percentile"></param>
        /// <returns></returns>
        protected internal override double GetValueJustOverPercentile(double percentile)
		{
			double value = 0.0;
			if (this.ItemCount > 0)
			{
				int itemAtSpot = Convert.ToInt32(Math.Ceiling((percentile / 100) * this.ItemCount));

				value = Convert.ToDouble(this.OriginalSortedList[itemAtSpot]);
			}
			return value;
        }
        #endregion // GetValueJustOverPercentile
    }

	/// <summary>
	/// Class used by Conditional Formatting to hold derived information about Percentile formulated
	/// data and allow access to it.
	/// </summary>
	public class PercentileData<T, TRoot> : PercentileData where TRoot : IComparable
	{
		#region Properties

		IQueryable<TRoot> SlimmedCachedList { get; set; }

		#endregion // Properties

		#region Overrides

		#region GetPercentileValue
		/// <summary>
		/// Determines the percentile value that the inputted value will fall into.
		/// </summary>
		/// <param name="dataValue"></param>
		/// <returns></returns>
		public override double GetPercentileValue(object dataValue)
		{
			TRoot value = default(TRoot);

			if (dataValue != null)
			{
				value = (TRoot)dataValue;

				if (this.CalculatedValuesDictionary.Contains(value))
				{
					return (double)this.CalculatedValuesDictionary[value];
				}
			}

			double lowerCount = Convert.ToDouble(this.SlimmedCachedList.Count(a => a.CompareTo(value) < 0));

			double higherCount = Convert.ToDouble(this.SlimmedCachedList.Count(a => a.CompareTo(value) > 0));

			double percentile = (lowerCount / (lowerCount + higherCount)) * 100;

			this.CalculatedValuesDictionary.Add(value, percentile);

			return percentile;

		}
		#endregion //GetPercentileValue

		#region OnOriginalSortedListSet
		/// <summary>
		/// Method called when the <see cref="PercentileData.OriginalSortedList"/> is set so that any calcualations that need to be done can be.
		/// </summary>
		protected override void OnOriginalSortedListSet()
		{
			this.CalculatedValuesDictionary = new Dictionary<TRoot, double>();

			this.CachedCastedList = null;

			this.SlimmedCachedList = null;

			if (this.OriginalSortedList != null)
			{
				this.CachedCastedList = this.OriginalSortedList.AsQueryable().Cast<T>();

				IQueryable<T> q = (IQueryable<T>)this.CachedCastedList;

				this.SlimmedCachedList = q.OfType<TRoot>();

				this.ItemCount = this.SlimmedCachedList.Count();
			}
		}

		#endregion // OnOriginalSortedListSet

		#endregion // Overrides

		#region Methods

		#region Private

		#endregion // Private

		#endregion // Methods

        #region GetValueJustUnderPercentile

        /// <summary>
        /// Attempts to find the last object in a given percentile range.
        /// </summary>
        /// <param name="percentile"></param>
        /// <returns></returns>
		protected internal override double GetValueJustUnderPercentile(double percentile)
		{
			double value = 0.0;
			if (this.ItemCount > 0)
			{
				int itemAtSpot = Convert.ToInt32(Math.Floor((percentile / 100) * this.ItemCount));

				value = Convert.ToDouble(this.SlimmedCachedList.ElementAt(itemAtSpot));
			}
			return value;
		}

        #endregion // GetValueJustUnderPercentile

        #region GetValueJustOverPercentile

        /// <summary>
        /// Attempts to find the first object in a given percentile range.
        /// </summary>
        /// <param name="percentile"></param>
        /// <returns></returns>
		protected internal override double GetValueJustOverPercentile(double percentile)
		{
			double value = 0.0;
			if (this.ItemCount > 0)
			{
				int itemAtSpot = Convert.ToInt32(Math.Ceiling((percentile / 100) * this.ItemCount));

				value = Convert.ToDouble(this.SlimmedCachedList.ElementAt(itemAtSpot));
			}
			return value;
        }
        #endregion // GetValueJustOverPercentile
    }
}

#region Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved
/* ---------------------------------------------------------------------*
*                           Infragistics, Inc.                          *
*              Copyright (c) 2001-2012 All Rights reserved               *
*                                                                       *
*                                                                       *
* This file and its contents are protected by United States and         *
* International copyright laws.  Unauthorized reproduction and/or       *
* distribution of all or any portion of the code contained herein       *
* is strictly prohibited and will result in severe civil and criminal   *
* penalties.  Any violations of this copyright will be prosecuted       *
* to the fullest extent possible under law.                             *
*                                                                       *
* THE SOURCE CODE CONTAINED HEREIN AND IN RELATED FILES IS PROVIDED     *
* TO THE REGISTERED DEVELOPER FOR THE PURPOSES OF EDUCATION AND         *
* TROUBLESHOOTING. UNDER NO CIRCUMSTANCES MAY ANY PORTION OF THE SOURCE *
* CODE BE DISTRIBUTED, DISCLOSED OR OTHERWISE MADE AVAILABLE TO ANY     *
* THIRD PARTY WITHOUT THE EXPRESS WRITTEN CONSENT OF INFRAGISTICS, INC. *
*                                                                       *
* UNDER NO CIRCUMSTANCES MAY THE SOURCE CODE BE USED IN WHOLE OR IN     *
* PART, AS THE BASIS FOR CREATING A PRODUCT THAT PROVIDES THE SAME, OR  *
* SUBSTANTIALLY THE SAME, FUNCTIONALITY AS ANY INFRAGISTICS PRODUCT.    *
*                                                                       *
* THE REGISTERED DEVELOPER ACKNOWLEDGES THAT THIS SOURCE CODE           *
* CONTAINS VALUABLE AND PROPRIETARY TRADE SECRETS OF INFRAGISTICS,      *
* INC.  THE REGISTERED DEVELOPER AGREES TO EXPEND EVERY EFFORT TO       *
* INSURE ITS CONFIDENTIALITY.                                           *
*                                                                       *
* THE END USER LICENSE AGREEMENT (EULA) ACCOMPANYING THE PRODUCT        *
* PERMITS THE REGISTERED DEVELOPER TO REDISTRIBUTE THE PRODUCT IN       *
* EXECUTABLE FORM ONLY IN SUPPORT OF APPLICATIONS WRITTEN USING         *
* THE PRODUCT.  IT DOES NOT PROVIDE ANY RIGHTS REGARDING THE            *
* SOURCE CODE CONTAINED HEREIN.                                         *
*                                                                       *
* THIS COPYRIGHT NOTICE MAY NOT BE REMOVED FROM THIS FILE.              *
* --------------------------------------------------------------------- *
*/
#endregion Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved