using System;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.ComponentModel;
using System.Windows.Data;

namespace Infragistics.Controls.Grids
{
    #region UnboundColumnDataContext

    /// <summary>
    /// An object used by the <see cref="Infragistics.Controls.Grids.UnboundColumn"/> to hold the DataContext for a <see cref="Infragistics.Controls.Grids.Primitives.UnboundCell"/>.
    /// </summary>
    public class UnboundColumnDataContext : INotifyPropertyChanged
    {
        #region Members

        private object _rowData;
        private object _value;
        private string _columnKey;

        #endregion // Members

        #region RowData

        /// <summary>
        /// The data object associated with the row of data.
        /// </summary>
        public object RowData
        {
            get
            {
                return this._rowData;
            }

            protected internal set
            {
                if (this._rowData != value)
                {
                    this._rowData = value;
                    this.OnPropertyChanged("RowData");
                }
            }
        }

        #endregion // RowData

        #region Value

        /// <summary>
        /// The value generated by the ValueConverter.
        /// </summary>
        public object Value
        {
            get
            {
                return this._value;
            }

            protected internal set
            {
                if (this._value != value)
                {
                    this._value = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }

        #endregion // Value

        #region ColumnKey

        /// <summary>
        /// The column key of the associate <see cref="Infragistics.Controls.Grids.Column"/>.
        /// </summary>
        public string ColumnKey
        {
            get
            {
                return this._columnKey;
            }

            protected internal set
            {
                if (this._columnKey != value)
                {
                    this._columnKey = value;
                    this.OnPropertyChanged("ColumnKey");
                }
            }
        }

        #endregion // ColumnKey

        #region INotifyPropertyChanged

        /// <summary>
        /// Occurs when a property value changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises the <see cref="PropertyChanged"/> event.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        protected virtual void OnPropertyChanged(string propertyName)
        {
            var handler = this.PropertyChanged;

            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion // INotifyPropertyChanged
    }

    #endregion // UnboundColumnDataContext
}

namespace Infragistics.Controls.Grids.Primitives
{
    /// <summary>
    /// An object that provides content to <see cref="Cell"/> objects that belong to a <see cref="UnboundColumn"/>
    /// </summary>
    public class UnboundColumnContentProvider : ColumnContentProviderBase
    {
        #region Members
        FrameworkElement _content;
        FrameworkElement _editor;
        int _templateFlag;
        TextBlock _textBlock;
        Infragistics.Controls.Grids.Cell.CellValueObject _cellValueObj;
        bool _isFilterRow;

        UnboundCell _attachedUnboundCell;
        #endregion // Members

        #region Constructor

        /// <summary>
        /// Instantiates a new instance of the <see cref="UnboundColumnContentProvider"/>.
        /// </summary>
        public UnboundColumnContentProvider()
        {
            this._cellValueObj = new Cell.CellValueObject();
        }

        #endregion // Constructor

        #region Properties

        #region RemovePaddingDuringEditing

        /// <summary>
        /// Gets/Sets whether the padding of a <see cref="Cell"/> should be removed before putting an editor into edit mode. 
        /// </summary>
        /// <remarks>
        /// This property will determine the availableHeight and availableWidth parameters of the ResolveEditorControl method.
        /// </remarks>
        public override bool RemovePaddingDuringEditing
        {
            get { return true; }
        }

        #endregion // RemovePaddingDuringEditing

        #region CanResolveValueFromEditor

        /// <summary>
        /// Gets a value indicating whether the <see cref="UnboundColumnContentProvider"/> can resolve value from editor using the <see cref="ResolveValueFromEditor"/> method.
        /// </summary>
        protected internal override bool CanResolveValueFromEditor
        {
            get
            {
                return false;
            }
        }

        #endregion // CanResolveValueFromEditor

        #endregion // Properties

        #region ResolveEditorControl
        /// <summary>
        /// Sets up the edtior control that will be displayed in a <see cref="Cell"/> when the the cell is in edit mode.
        /// </summary>
        /// <param propertyName="cell">The <see cref="Cell"/> entering edit mode.</param>
        /// <param propertyName="editorValue">The value that should be put in the editor.</param>
        /// <param propertyName="availableWidth">The amount of horizontal space available.</param>
        /// <param propertyName="availableHeight">The amound of vertical space available.</param>
        /// <param propertyName="editorBinding">Provides a <see cref="Binding"/> that can be used for setting up the editor.</param>
        /// <returns></returns>
        protected override FrameworkElement ResolveEditorControl(Cell cell, object editorValue, double availableWidth, double availableHeight, Binding editorBinding)
        {
            UnboundColumn column = (UnboundColumn)cell.Column;

            bool isFilterRow = cell.Row.RowType == RowType.FilterRow;
            bool isAddNewRow = cell.Row.RowType==RowType.AddNewRow;

            if (column.EditorTemplateDirtyFlag != this._templateFlag || this._editor == null)
            {                
                if (isFilterRow && column.FilterEditorTemplate != null && this._editor == null)
                {
                    this._editor = column.FilterEditorTemplate.LoadContent() as FrameworkElement;
                }
                else if (isAddNewRow && column.AddNewRowEditorTemplate != null && this._editor == null)
                {
                    this._editor = column.AddNewRowEditorTemplate.LoadContent() as FrameworkElement;
                }
                else if (this._editor == null && column.EditorTemplate != null)
                {
                    this._editor = column.EditorTemplate.LoadContent() as FrameworkElement;
                }
                else
                    this._editor = null;

                this._templateFlag = column.EditorTemplateDirtyFlag;
            }

            if (this._editor != null)
            {
                if (isFilterRow && column.FilterEditorTemplate != null)
                {
                    FilterRowCell frc = (FilterRowCell)cell;
                    FilteringDataContext fdc = new FilteringDataContext(frc);
                    this._editor.DataContext = fdc;
                }
                else
                {
                    UnboundColumnDataContext dataContext = new UnboundColumnDataContext();
                    dataContext.ColumnKey = cell.Column.Key;
                    dataContext.RowData = cell.Row.Data;
                    dataContext.Value = cell.Value;

                    cell.Control.DataContext = dataContext;
                    ColumnContentProviderBase.SetControlStyle(this._editor, cell.EditorStyleResolved);
                }
            }

            return this._editor;
        }
        #endregion // ResolveEditorControl

        #region ResolveValueFromEditor

        /// <summary>
        /// Resolves the value of the editor control, so that the cell's underlying data can be updated. 
        /// </summary>
        /// <param propertyName="cell">The <see cref="Cell"/> that the editor id being displayed in.</param>
        /// <returns>The value that should be displayed in the cell.</returns>
        public override object ResolveValueFromEditor(Cell cell)
        {
            return null;
        }
        #endregion // ResolveValueFromEditor

        #region ResolveDisplayElement

        /// <summary>
        /// Sets up the element that will be displayed in a <see cref="Cell"/>, when the cell is not in edit mode. 
        /// </summary>
        /// <param propertyName="cell">The cell that the display element will be displayed in.</param>
        /// <param propertyName="cellBinding">A <see cref="Binding"/> object that can be applied to the cell. Note: this binding can be null.</param>
        /// <returns>The element that should be displayed.</returns>
        public override FrameworkElement ResolveDisplayElement(Cell cell, System.Windows.Data.Binding cellBinding)
        {
            UnboundColumn uc = cell.Column as UnboundColumn;

            if (this._textBlock == null)
            {
                this._textBlock = new TextBlock();
            }

            if (cell.Row.RowType == RowType.FilterRow && uc.FilterItemTemplate != null && this._content == null)
            {
                this._content = uc.FilterItemTemplate.LoadContent() as FrameworkElement;
            }
            else if (cell.Row.RowType == RowType.AddNewRow && uc.AddNewRowItemTemplate != null && this._content == null)
            {
                this._content = uc.AddNewRowItemTemplate.LoadContent() as FrameworkElement;
            }
            else if (uc.ItemTemplate != null && this._content == null)
            {
                this._content = uc.ItemTemplate.LoadContent() as FrameworkElement;
            }

            if (cellBinding != null)
            {
                if (this._content != null && !this.IsToolTip)
                {
                    this._cellValueObj.SetBinding(Infragistics.Controls.Grids.Cell.CellValueObject.ValueProperty, cellBinding);
                }
                else if (this._textBlock != null)
                {
                    this._textBlock.SetBinding(TextBlock.TextProperty, cellBinding);
                }
            }

            if (!this.IsToolTip)
            {
                if (cell.Row.RowType == RowType.FilterRow)
                {
                    this._isFilterRow = true;
                }
                if (this._content != null)
                {
                    return this._content;
                }
            }
            else
            {
                if (this._content != null)
                {
                    UnboundColumnDataContext dataContext = new UnboundColumnDataContext();
                    dataContext.ColumnKey = cell.Column.Key;
                    dataContext.RowData = cell.Row.Data;
                    if (cell.Row.RowType == RowType.FilterRow)
                    {
                        dataContext.Value = ((FilterRowCell)cell).FilterCellValueResolved;
                    }
                    else
                    {
                        dataContext.Value = cell.Value;
                    }

                    this._content.DataContext = dataContext;

                    return this._content;
                }
            }
            this._textBlock.SetBinding(TextBlock.TextProperty, cellBinding);
            return this._textBlock;
        }

        #endregion // ResolveDisplayElement

        #region AdjustDisplayElement

        /// <summary>
        /// Called during EnsureContent to allow the provider a chance to modify it's display based on the current conditions.
        /// </summary>
        /// <param name="cell"></param>
        public override void AdjustDisplayElement(Cell cell)
        {            
            UnboundCell unboundCell = cell as UnboundCell;
            if (unboundCell != null)
            {
                if (_attachedUnboundCell != null && _attachedUnboundCell == unboundCell)
                {
                    CellControlBase ccb = cell.Control;
                    if(ccb != null && (ccb.DataContext is UnboundColumnDataContext || ccb.DataContext is FilteringDataContext))
                        return;
                }
            }

            FilterRowCell filterRowCell = cell as FilterRowCell;
            object dataContextObject = null;
            UnboundColumnDataContext dataContext = new UnboundColumnDataContext();
            dataContextObject = dataContext;
            dataContext.ColumnKey = cell.Column.Key;
            dataContext.RowData = cell.Row.Data;
            if (cell.Row.RowType == RowType.FilterRow)
            {
                dataContext.Value = filterRowCell.FilterCellValueResolved;
            }
            else
            {
                dataContext.Value = cell.Value;
            }

            dataContextObject = dataContext;

            this._cellValueObj.DataContext = dataContext;

            _attachedUnboundCell = unboundCell;

            
#region Infragistics Source Cleanup (Region)



#endregion // Infragistics Source Cleanup (Region)

            //UnboundColumn uc = (UnboundColumn)cell.Column;
            //if (uc.ItemTemplate == null && cell.Row.RowType != RowType.FilterRow)
            //{
            //    dataContextObject = cell.Row.Data;                
            //}
            //else
            //{
            //    // Make sure that we only set the DataContext if the context actually changed, as this method gets called a lot.
            //    UnboundColumnDataContext ucd = this._cellObj.DataContext as UnboundColumnDataContext;
            //    if (ucd == null || ucd.RowData != dataContext.RowData)
            //    {
            //        this._cellObj.DataContext = cell.Row.Data;
            //    }
            //}

            if (this._isFilterRow)
            {
                if (((UnboundColumn)cell.Column).FilterItemTemplate != null)
                {                    
                    FilteringDataContext fdc = new FilteringDataContext(filterRowCell);
                    this._content.DataContext = fdc;
                }
            }

            if (cell.Control != null && !cell.IsEditing)
                cell.Control.DataContext = dataContextObject;            

            base.AdjustDisplayElement(cell);
        }
        #endregion // AdjustDisplayElement

        #region ResolveBinding
        /// <summary>
        /// Builds the binding that will be used for a <see cref="Cell"/>
        /// </summary>
        /// <returns>If a binding cannot be created, null will be returned.</returns>
        protected internal override Binding ResolveBinding(Cell cell)
        {
            Binding binding = null;

            if (cell.Column.Key != null && cell.Column.DataType != null)
            {
                binding = new Binding();
                binding.Mode = BindingMode.OneWay;
                if (!this.IsToolTip)
                {
                    binding.Path = new PropertyPath("RowData");
                    

                    binding.ConverterParameter = cell.Control;
                    binding.Converter = cell.CreateCellBindingConverter();
                }
                else
                {
                    binding.ConverterParameter = cell.Column.ValueConverterParameter;
                    binding.Converter = cell.Column.ValueConverter;
                }
            }

            return binding;
        }
        #endregion // ResolveBinding

        #region ResolveEditorBinding
        /// <summary>
        /// Creates a <see cref="Binding"/> that can be applied to an editor.
        /// </summary>
        /// <returns></returns>
        protected internal override Binding ResolveEditorBinding(Cell cell)
        {
            return null;
        }
        #endregion // ResolveEditorBinding

        #region ResetContent

        /// <summary>
        /// Raised when the cell is recycling to allow the provider a chance to clear any internal members.
        /// </summary>
        public override void ResetContent()
        {
            




            base.ResetContent();
            if (this._cellValueObj != null)
                this._cellValueObj.DataContext = null;
        }

        #endregion // ResetContent

        #region FocusEditor

        /// <summary>
        /// Calls the ContentProvider to Attempt to Focus the underlying editor control
        /// </summary>
        protected internal override void FocusEditor()
        {
            var control = this._editor as Control;
            if (control != null)
                control.Focus();
        }

        #endregion

    }
}

#region Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved
/* ---------------------------------------------------------------------*
*                           Infragistics, Inc.                          *
*              Copyright (c) 2001-2012 All Rights reserved               *
*                                                                       *
*                                                                       *
* This file and its contents are protected by United States and         *
* International copyright laws.  Unauthorized reproduction and/or       *
* distribution of all or any portion of the code contained herein       *
* is strictly prohibited and will result in severe civil and criminal   *
* penalties.  Any violations of this copyright will be prosecuted       *
* to the fullest extent possible under law.                             *
*                                                                       *
* THE SOURCE CODE CONTAINED HEREIN AND IN RELATED FILES IS PROVIDED     *
* TO THE REGISTERED DEVELOPER FOR THE PURPOSES OF EDUCATION AND         *
* TROUBLESHOOTING. UNDER NO CIRCUMSTANCES MAY ANY PORTION OF THE SOURCE *
* CODE BE DISTRIBUTED, DISCLOSED OR OTHERWISE MADE AVAILABLE TO ANY     *
* THIRD PARTY WITHOUT THE EXPRESS WRITTEN CONSENT OF INFRAGISTICS, INC. *
*                                                                       *
* UNDER NO CIRCUMSTANCES MAY THE SOURCE CODE BE USED IN WHOLE OR IN     *
* PART, AS THE BASIS FOR CREATING A PRODUCT THAT PROVIDES THE SAME, OR  *
* SUBSTANTIALLY THE SAME, FUNCTIONALITY AS ANY INFRAGISTICS PRODUCT.    *
*                                                                       *
* THE REGISTERED DEVELOPER ACKNOWLEDGES THAT THIS SOURCE CODE           *
* CONTAINS VALUABLE AND PROPRIETARY TRADE SECRETS OF INFRAGISTICS,      *
* INC.  THE REGISTERED DEVELOPER AGREES TO EXPEND EVERY EFFORT TO       *
* INSURE ITS CONFIDENTIALITY.                                           *
*                                                                       *
* THE END USER LICENSE AGREEMENT (EULA) ACCOMPANYING THE PRODUCT        *
* PERMITS THE REGISTERED DEVELOPER TO REDISTRIBUTE THE PRODUCT IN       *
* EXECUTABLE FORM ONLY IN SUPPORT OF APPLICATIONS WRITTEN USING         *
* THE PRODUCT.  IT DOES NOT PROVIDE ANY RIGHTS REGARDING THE            *
* SOURCE CODE CONTAINED HEREIN.                                         *
*                                                                       *
* THIS COPYRIGHT NOTICE MAY NOT BE REMOVED FROM THIS FILE.              *
* --------------------------------------------------------------------- *
*/
#endregion Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved