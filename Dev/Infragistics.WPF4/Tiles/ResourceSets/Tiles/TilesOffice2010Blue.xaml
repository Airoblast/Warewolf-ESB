<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:igTiles="clr-namespace:Infragistics.Windows.Tiles"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:igThemes="http://infragistics.com/Themes">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="TilesGeneric.xaml"/>
        <ResourceDictionary Source="../TilesBrushes/TilesOffice2010Blue_Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--
	Difference between Office splitter and others:
	In office themes, the Background of Splitter is a gradient brush, thus needs
	to change to a different brush (one with a vertical gradient) based on orientation.
	-->
    <Style TargetType="{x:Type igTiles:TileAreaSplitter}"  BasedOn="{x:Static igThemes:TilesGeneric.TileAreaSplitter}">
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MinWidth" Value="6"/>
                <Setter Property="Cursor" Value="{x:Static igTiles:TileAreaSplitter.VerticalSplitterCursor}"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinHeight" Value="6"/>
                <Setter Property="Cursor" Value="{x:Static igTiles:TileAreaSplitter.HorizontalSplitterCursor}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static igTiles:TileBrushKeys.TileAreaSplitterHorizontalBackgroundFillKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>



	<!-- ================================ -->
	<!--       TileHeaderPresenter        -->
	<!-- ================================ -->
	<Style TargetType="{x:Type igTiles:TileHeaderPresenter}">
		<Setter Property="BorderThickness" Value="0"/>
	</Style>



	<!-- ================================ -->
	<!--          Tile				      -->
	<!-- ================================ -->
	<Style TargetType="{x:Type igTiles:Tile}">
		<Setter Property="Background" Value="{DynamicResource {x:Static igTiles:TileBrushKeys.TileChromeFillKey}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igTiles:TileBrushKeys.TileBorderBrushFillKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igTiles:Tile}">
					<Border Name="Border"
					     BorderBrush="{TemplateBinding BorderBrush}"
					     BorderThickness="{TemplateBinding BorderThickness}"
					     Background="{TemplateBinding Background}"
					     CornerRadius="2,2,1,1"
					     SnapsToDevicePixels="True">
						<igWindows:CardPanel>
							<Rectangle Stroke="{DynamicResource {x:Static igTiles:TileBrushKeys.TileCaptionInnerBorderFillKey}}" StrokeThickness="1" RadiusX="1" RadiusY="1"/>
							<DockPanel Margin="{TemplateBinding Padding}">
								<igTiles:TileHeaderPresenter 
                                        x:Name="TileHeader"
                                        AutomationProperties.AutomationId="TileHeader"
                                        DockPanel.Dock="Top"
                                        Content="{TemplateBinding Header}"
                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                        ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                        Tile="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                       />
								<Border Background="{DynamicResource {x:Static igTiles:TileBrushKeys.TileContentBackgroundFillKey}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="2,0,2,2">
									<ContentPresenter Visibility="{TemplateBinding ContentVisibility}"/>
								</Border>
							</DockPanel>
							<Rectangle x:Name="Overlay" RadiusX="1" RadiusY="1"/>
						</igWindows:CardPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDragging" Value="True">
							<Setter TargetName="Border" Property="Opacity" Value="0.75"/>
						</Trigger>
						<Trigger Property="IsSwapTarget" Value="True">
							<Setter TargetName="Overlay" Property="Fill" Value="{DynamicResource {x:Static igTiles:TileBrushKeys.TileSwapTargetBgBrushFillKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>