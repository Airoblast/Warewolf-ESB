<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--      Microsoft ResX Schema           Version 2.0          The primary goals of this format is to allow a simple XML format      that is mostly human readable. The generation and parsing of the      various data types are done through the TypeConverter classes      associated with the data types.          Example:          ... ado.net/XML headers & schema ...     <resheader name="resmimetype">text/microsoft-resx</resheader>     <resheader name="version">2.0</resheader>     <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>     <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>     <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>     <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>     <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">         <value>[base64 mime encoded serialized .NET Framework object]</value>     </data>     <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">         <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>         <comment>This is a comment</comment>     </data>                      There are any number of "resheader" rows that contain simple      name/value pairs.          Each data row contains a name, and value. The row also contains a      type or mimetype. Type corresponds to a .NET class that support      text/value conversion through the TypeConverter architecture.      Classes that don't support this are serialized and stored with the      mimetype set.          The mimetype is used for serialized objects, and tells the      ResXResourceReader how to depersist the object. This is currently not      extensible. For a given mimetype the value must be set accordingly:          Note - application/x-microsoft.net.object.binary.base64 is the format      that the ResXResourceWriter will generate, however the reader can      read any of the formats listed below.          mimetype: application/x-microsoft.net.object.binary.base64     value   : The object must be serialized with              : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter             : and then encoded with base64 encoding.          mimetype: application/x-microsoft.net.object.soap.base64     value   : The object must be serialized with              : System.Runtime.Serialization.Formatters.Soap.SoapFormatter             : and then encoded with base64 encoding.      mimetype: application/x-microsoft.net.object.bytearray.base64     value   : The object must be serialized into a byte array              : using a System.ComponentModel.TypeConverter             : and then encoded with base64 encoding.     -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DataObjectTypeMismatchException" xml:space="preserve">
    <value>Le Type de l&apos;objet envoyé ne correspond pas au Type géré par le DataManager.</value>
  </data>
  <data name="DataSourceDoesNotSupportIListException" xml:space="preserve">
    <value>La DataSource du DataManager ne prend pas en charge l&apos;IList ou l&apos;IEditableCollectionView et ne peut pas exécuter cette action.</value>
  </data>
  <data name="InvalidEnumeratorException" xml:space="preserve">
    <value>La méthode GetEnumerator de l&apos;IEnumerable assigné a renvoyé une valeur nulle.</value>
  </data>
  <data name="InvalidEventName" xml:space="preserve">
    <value>&quot;L&apos;événement {0} ne peut pas être trouvé sur un élément de type {1}&quot;</value>
  </data>
  <data name="InvalidPropertyPathException" xml:space="preserve">
    <value>Indexeur spécifié non valide: {0}</value>
  </data>
  <data name="PropertyNotFound" xml:space="preserve">
    <value>Propriété non trouvée</value>
  </data>
  <data name="RequireEmptyConstructorException" xml:space="preserve">
    <value>Le DataManager a essayé de créer une instance d&apos;une classe qui n&apos;a pas de liste de paramètres vide.   </value>
  </data>
  <data name="RequireEmptyConstructorExceptionWithType" xml:space="preserve">
    <value>Le DataManager a essayé de créer une instance du type ‘{0}’ qui n&apos;a pas de liste de paramètres vide.</value>
  </data>
  <data name="Provider_InvalidResource" xml:space="preserve">
    <value>La ressource avec une clé de {0} lors de la vérification du ResourceDictionary de {1} n&apos;est pas valide. Elle doit être autre que {2}.</value>
  </data>
  <data name="Provider_MissingResource" xml:space="preserve">
    <value>Aucune ressource n&apos;a été trouvée pour la clé: {0}.</value>
  </data>
  <data name="Provider_TypeNotEnum" xml:space="preserve">
    <value>T doit être un type enum, la classe ne prend pas en charge le type: {0}.</value>
  </data>
  <data name="Provider_EnumEmpty" xml:space="preserve">
    <value>Type: {0} doit avoir au moins une valeur.</value>
  </data>
  <data name="Provider_SparseEnumValues" xml:space="preserve">
    <value>Type: {0} valeurs enum doivent être consécutives en commençant par 0.</value>
  </data>
  <data name="Provider_KeyNotFound" xml:space="preserve">
    <value>Type: {0} ne contient pas la valeur de: {1}.</value>
  </data>
  <data name="TrialVersion" xml:space="preserve">
    <value>ESSAI</value>
  </data>
</root>