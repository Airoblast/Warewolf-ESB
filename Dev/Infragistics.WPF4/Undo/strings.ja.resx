<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LE_RemoveAllFailedVersion" xml:space="preserve">
    <value>コレクションは RemoveAll への呼び出し中に変更されました。</value>
  </data>
  <data name="LE_EnumFailedVersion" xml:space="preserve">
    <value>コレクションは列挙子の開始後に変更されました。</value>
  </data>
  <data name="LE_EnumNotStarted" xml:space="preserve">
    <value>列挙子は開始されませんでした。MoveNext を呼び出します。</value>
  </data>
  <data name="LE_EnumEnded" xml:space="preserve">
    <value>列挙が完了しました。</value>
  </data>
  <data name="LE_ReferenceNotRegistered" xml:space="preserve">
    <value>指定した参照 '{0}' は UndoManager インスタンスに登録されていません。 
RegisterReference メソッドを使用して UndoManager と参照を登録します。または、UndoManager.Current thread 静的/共有インスタンスを使用するために参照として null を渡します。</value>
  </data>
  <data name="LE_UndoManagerAsReference" xml:space="preserve">
    <value>'UndoManager' インスタンスは参照にできません。</value>
  </data>
  <data name="LE_ReferenceRegisteredToOther" xml:space="preserve">
    <value>指定した参照 '{0}' は、異なるUndoManager インスタンスで登録されます。</value>
  </data>
  <data name="LE_NewTransactionWhileSuspended" xml:space="preserve">
    <value>UndoManager が中断している間はトランザクションを開始できません。</value>
  </data>
  <data name="LE_FactoryNullTransaction" xml:space="preserve">
    <value>UndoUnitFactory は null Undo トランザクションを返します。</value>
  </data>
  <data name="LE_UndoRedoInUndoRedo" xml:space="preserve">
    <value>Undo/Redo 処理中は Undo/Redo を実行できません。</value>
  </data>
  <data name="LE_UndoRedoInRollback" xml:space="preserve">
    <value>Rollback 処理中は Undo/Redo を実行できません。</value>
  </data>
  <data name="LE_UndoRedoWhileSuspended" xml:space="preserve">
    <value>UndoManager 処理中は Undo/Redo を実行できません。</value>
  </data>
  <data name="LE_UndoRedoInTransaction" xml:space="preserve">
    <value>トランザクションが開いているときは Undo/Redo を実行できません。</value>
  </data>
  <data name="LE_EndTransactionWhileSuspended" xml:space="preserve">
    <value>UndoManager が中断している間はトランザクションを閉じることはできません。</value>
  </data>
  <data name="LE_AddOpenTransaction" xml:space="preserve">
    <value>開かれたことがない、または開いている UndoTransaction は追加できません。</value>
  </data>
  <data name="LE_AddTransactionDirect" xml:space="preserve">
    <value>UndoTransaction は追加できません。RootTransaction は自動的に Commit に追加されます。</value>
  </data>
  <data name="LE_ChangeHistoryInMerge" xml:space="preserve">
    <value>Merge が呼び出されている間は Undo/Redo 履歴を変更できません。</value>
  </data>
  <data name="LE_ChangeHistoryInRemoveAll" xml:space="preserve">
    <value>RemoveAll が呼び出されている間は Undo/Redo 履歴を変更できません。</value>
  </data>
  <data name="LE_HasOpenTransaction" xml:space="preserve">
    <value>トランザクションはすでに開いています。</value>
  </data>
  <data name="LE_TransactionNotOpened" xml:space="preserve">
    <value>指定したトランザクション '{0}' は開いていません。</value>
  </data>
  <data name="LE_InvalidTransactionOwner" xml:space="preserve">
    <value>指定したトランザクションの Owner はこのオブジェクトではありません。</value>
  </data>
  <data name="LE_ClosingOtherTransaction" xml:space="preserve">
    <value>指定したトランザクション '{0}' は現在開いているトランザクション '{1}' ではありません。 </value>
  </data>
  <data name="LE_CannotExecuteOpenTransaction" xml:space="preserve">
    <value>トランザクション '{0}' が開いている間に Execute を呼び出すことはできません。</value>
  </data>
  <data name="LE_TransactionNotStarted" xml:space="preserve">
    <value>トランザクションは開始されるまで変更できません。</value>
  </data>
  <data name="LE_TransactionClosed" xml:space="preserve">
    <value>トランザクションは閉じられるまで変更できません。</value>
  </data>
  <data name="LE_AddUnitWhileTransactionOpen" xml:space="preserve">
    <value>トランザクションが入れ子になった開いているトランザクション '{0}' を含む場合、UndoUnit を追加できません。</value>
  </data>
  <data name="LE_TransactionAlreadyOpened" xml:space="preserve">
    <value>トランザクションはすでに開いています。</value>
  </data>
  <data name="LE_ChildTransactionNotInUnits" xml:space="preserve">
    <value>指定した子トランザクション '{0}' は、このトランザクション ユニットの一部ではありません。</value>
  </data>
  <data name="LE_TargetCollectionIsReadOnly" xml:space="preserve">
    <value>指定したコレクション '{0}' は読み取り専用です。</value>
  </data>
  <data name="LE_RangeCollectionAction" xml:space="preserve">
    <value>Range アクションはサポートされません。</value>
  </data>
  <data name="LE_ResetCollectionAction" xml:space="preserve">
    <value>Reset アクションはサポートされません。</value>
  </data>
  <data name="LE_NeedAddRemoveAction" xml:space="preserve">
    <value>指定するアクションは 'Add' or 'Remove' にしてください。</value>
  </data>
  <data name="LE_ArgumentIsNegative" xml:space="preserve">
    <value> '{0}' は 0 以上である必要があります。現在値: '{1}'</value>
  </data>
  <data name="PropertyChangeDescription" xml:space="preserve">
    <value>'{1}' の '{0}' を変更</value>
  </data>
  <data name="PropertyChangeDescriptionDetailed" xml:space="preserve">
    <value>'{1}' の '{0}' を '{3}' へ変更</value>
  </data>
  <data name="ReplaceItemDescription" xml:space="preserve">
    <value>'{1}' の置き換え</value>
  </data>
  <data name="ReplaceItemDescriptionDetailed" xml:space="preserve">
    <value>'{1}' を '{2}' と置き換える</value>
  </data>
  <data name="MoveItemDescription" xml:space="preserve">
    <value>項目の移動</value>
  </data>
  <data name="MoveItemDescriptionDetailed" xml:space="preserve">
    <value>'{1}' を '{2}' から '{3}' へ移動する</value>
  </data>
  <data name="AddRangeDescription" xml:space="preserve">
    <value>Add {1} {2}(s)</value>
  </data>
  <data name="AddRangeDescriptionDetailed" xml:space="preserve">
    <value>Add {1} {2}(s)</value>
  </data>
  <data name="RemoveRangeDescription" xml:space="preserve">
    <value>{1} {2} の削除</value>
  </data>
  <data name="RemoveRangeDescriptionDetailed" xml:space="preserve">
    <value>{1} {2} の削除</value>
  </data>
  <data name="FallbackTransactionDescription" xml:space="preserve">
    <value />
  </data>
  <data name="AddItemDescription" xml:space="preserve">
    <value>'{1}' の追加</value>
  </data>
  <data name="AddItemDescriptionDetailed" xml:space="preserve">
    <value>'{1}' の追加</value>
  </data>
  <data name="RemoveItemDescription" xml:space="preserve">
    <value>'{1}' の移動</value>
  </data>
  <data name="RemoveItemDescriptionDetailed" xml:space="preserve">
    <value>'{1}' の削除</value>
  </data>
  <data name="ReinitializeCollectionDescription" xml:space="preserve">
    <value>'{2}' の一括変更</value>
  </data>
  <data name="ReinitializeCollectionDescriptionDetailed" xml:space="preserve">
    <value>'{2}' の一括変更</value>
  </data>
  <data name="LE_HistoryItemNotInCurrentHistory" xml:space="preserve">
    <value>UndoManager で、関連づけられた元に戻すまたはやり直しの履歴内にUndoHistoryItem が存在しません。</value>
  </data>
</root>