using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Controls;
using System.Windows;
using System.ComponentModel;
using System.Windows.Input;
using System.Diagnostics;

using System.Windows.Automation.Peers;
using Infragistics.AutomationPeers;
using Infragistics.Controls.Primitives;
using System.Windows.Media;
using System.Globalization;


namespace Infragistics.Controls.Editors.Primitives
{
	
#region Infragistics Source Cleanup (Region)





#endregion // Infragistics Source Cleanup (Region)

	/// <summary>
	/// Represents an item within the <see cref="CalendarItemGroup"/>
	/// </summary>
	/// <remarks>
	/// <p class="body">A <b>CalendarItem</b> will represent either a day within a month, a month 
    /// within a year, a year within a decade or a decade within a century. CalendarItems are dynamically 
    /// generated by a <see cref="CalendarItemArea"/> based on the range of dates for the <see cref="CalendarItemGroup"/> 
    /// that contains the item area.</p>
    /// <p class="body">The control exposes a number of read-only properties that may be used to control the appearance 
    /// of the item.</p>
	/// </remarks>
    //[System.ComponentModel.ToolboxItem(false)]
    [TemplateVisualState(Name = VisualStateUtilities.StateNormal,              GroupName = VisualStateUtilities.GroupCommon)]
    [TemplateVisualState(Name = VisualStateUtilities.StateMouseOver,           GroupName = VisualStateUtilities.GroupCommon)]
    [TemplateVisualState(Name = VisualStateUtilities.StateDisabled,            GroupName = VisualStateUtilities.GroupCommon)]

    [TemplateVisualState(Name = VisualStateUtilities.StateIsHighlighted,		GroupName = VisualStateUtilities.GroupHighlight)]
    [TemplateVisualState(Name = VisualStateUtilities.StateIsNotHighlighted,		GroupName = VisualStateUtilities.GroupHighlight)]

	// JJD 02/28/12 - Added IsLeadingOrTrailing VSM states
    [TemplateVisualState(Name = VisualStateUtilities.StateIsLeadingOrTrailing,		GroupName = VisualStateUtilities.GroupLeadingOrTrailing)]
    [TemplateVisualState(Name = VisualStateUtilities.StateIsNotLeadingOrTrailing,	GroupName = VisualStateUtilities.GroupLeadingOrTrailing)]
    
    [TemplateVisualState(Name = VisualStateUtilities.StateDay,                 GroupName = VisualStateUtilities.GroupCalendar)]
    [TemplateVisualState(Name = VisualStateUtilities.StateMonth,               GroupName = VisualStateUtilities.GroupCalendar)]
    [TemplateVisualState(Name = VisualStateUtilities.StateYear,                GroupName = VisualStateUtilities.GroupCalendar)]
    [TemplateVisualState(Name = VisualStateUtilities.StateDecade,              GroupName = VisualStateUtilities.GroupCalendar)]
    [TemplateVisualState(Name = VisualStateUtilities.StateCentury,             GroupName = VisualStateUtilities.GroupCalendar)]

    [TemplateVisualState(Name = VisualStateUtilities.StateFocused,             GroupName = VisualStateUtilities.GroupFocus)]
    [TemplateVisualState(Name = VisualStateUtilities.StateUnfocused,           GroupName = VisualStateUtilities.GroupFocus)]

    [TemplateVisualState(Name = VisualStateUtilities.StateActive,              GroupName = VisualStateUtilities.GroupActive)]
    [TemplateVisualState(Name = VisualStateUtilities.StateInactive,            GroupName = VisualStateUtilities.GroupActive)]

    [TemplateVisualState(Name = VisualStateUtilities.StateRegularDay,          GroupName = VisualStateUtilities.GroupDay)]
    [TemplateVisualState(Name = VisualStateUtilities.StateToday,               GroupName = VisualStateUtilities.GroupDay)]

    [TemplateVisualState(Name = VisualStateUtilities.StateSelected,            GroupName = VisualStateUtilities.GroupSelection)]
    [TemplateVisualState(Name = VisualStateUtilities.StateUnselected,          GroupName = VisualStateUtilities.GroupSelection)]
	// JJD 4/10/12 - Added SelectedUnfocused state
    [TemplateVisualState(Name = VisualStateUtilities.StateSelectedUnfocused,   GroupName = VisualStateUtilities.GroupSelection)]

	[DesignTimeVisible(false)]	// JM 02-18-10 - DO NOT MOVE TO DESIGN ASSEMBLY!!!

	public class CalendarItem : ContentControl,
		Infragistics.Controls.Primitives.ISelectableElement,
		Infragistics.Controls.Primitives.ISelectableItem,
		IResourceProviderClient



	{
		#region Member Variables

		private CalendarItemGroup _group;

		private PropFlags _propFlags = PropFlags.VisualStateDirty;

		#endregion //Member Variables

		#region Constructor

		static CalendarItem()
		{

			FrameworkElement.DefaultStyleKeyProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(typeof(CalendarItem)));
			KeyboardNavigation.DirectionalNavigationProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KeyboardNavigationMode.None));
			//KeyboardNavigation.IsTabStopProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.FalseBox));
			//FrameworkElement.HorizontalAlignmentProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.HorizontalAlignmentStretchBox));
			//FrameworkElement.VerticalAlignmentProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.VerticalAlignmentStretchBox));
			//Control.HorizontalContentAlignmentProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.HorizontalAlignmentCenterBox));
			//Control.VerticalContentAlignmentProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(KnownBoxes.VerticalAlignmentCenterBox));

			// I was going to use a class input binding for this but when we are at the minimum calendarmode
			// and the command was not enabled (because we want to do regular selection), the framework was 
			// still handling the mouse message and so it was not bubbling up to the control
			//CommandManager.RegisterClassInputBinding(typeof(CalendarItem), new InputBinding(CalendarCommands.DecreaseCalendarMode, new MouseGesture(MouseAction.LeftClick, ModifierKeys.None)));

			// This will manage FocusWithinManager.IsFocusWithin property for this type.
			// 
			
			//FocusWithinManager.RegisterType(typeof(CalendarItem), new PropertyChangedCallback(OnIsFocusWithinChanged));

            UIElement.IsEnabledProperty.OverrideMetadata(typeof(CalendarItem), new FrameworkPropertyMetadata(new PropertyChangedCallback(OnVisualStatePropertyChanged)));

        }

		/// <summary>
		/// Initializes a new <see cref="CalendarItem"/>
		/// </summary>
		/// <remarks>
		/// <p class="note"><b>Note:</b> This constructor is only used for styling purposes. At runtime, the controls are automatically generated.</p>
		/// </remarks>
		public CalendarItem() : this(DateTime.Today, DateTime.Today, null)
		{
		}

		internal CalendarItem(DateTime startDate, DateTime endDate, CalendarItemGroup group)
		{



			this.SetValue(StartDatePropertyKey, startDate);
			this.SetValue(EndDatePropertyKey, endDate);
			this._group = group;
		}
		#endregion //Constructor

		#region Properties

		#region Public Properties

		#region ComputedBackground

		private static readonly DependencyPropertyKey ComputedBackgroundPropertyKey = DependencyPropertyUtilities.RegisterReadOnly("ComputedBackground",
			typeof(Brush), typeof(CalendarItem), new SolidColorBrush(Colors.Transparent), null);

		/// <summary>
		/// Identifies the read-only <see cref="ComputedBackground"/> dependency property
		/// </summary>
		public static readonly DependencyProperty ComputedBackgroundProperty = ComputedBackgroundPropertyKey.DependencyProperty;

		/// <summary>
		/// Returns the brush to use for the background based on the element's state.
		/// </summary>
		/// <seealso cref="ComputedBackgroundProperty"/>
		public Brush ComputedBackground
		{
			get
			{
				return (Brush)this.GetValue(CalendarItem.ComputedBackgroundProperty);
			}
			internal set
			{
				this.SetValue(CalendarItem.ComputedBackgroundPropertyKey, value);
			}
		}

		#endregion //ComputedBackground

		#region ComputedBorderBrush

		private static readonly DependencyPropertyKey ComputedBorderBrushPropertyKey = DependencyPropertyUtilities.RegisterReadOnly("ComputedBorderBrush",
			typeof(Brush), typeof(CalendarItem), new SolidColorBrush(Colors.Transparent), null);

		/// <summary>
		/// Identifies the read-only <see cref="ComputedBorderBrush"/> dependency property
		/// </summary>
		public static readonly DependencyProperty ComputedBorderBrushProperty = ComputedBorderBrushPropertyKey.DependencyProperty;

		/// <summary>
		/// Returns the brush to use for the BorderBrush based on the element's state
		/// </summary>
		/// <seealso cref="ComputedBorderBrushProperty"/>
		public Brush ComputedBorderBrush
		{
			get
			{
				return (Brush)this.GetValue(CalendarItem.ComputedBorderBrushProperty);
			}
			internal set
			{
				this.SetValue(CalendarItem.ComputedBorderBrushPropertyKey, value);
			}
		}

		#endregion //ComputedBorderBrush

		#region ComputedForeground

		private static readonly DependencyPropertyKey ComputedForegroundPropertyKey = DependencyPropertyUtilities.RegisterReadOnly("ComputedForeground",
			typeof(Brush), typeof(CalendarItem), new SolidColorBrush(Colors.Black), null);

		/// <summary>
		/// Identifies the read-only <see cref="ComputedForeground"/> dependency property
		/// </summary>
		public static readonly DependencyProperty ComputedForegroundProperty = ComputedForegroundPropertyKey.DependencyProperty;

		/// <summary>
		/// Returns the brush to use for the Foreground based on the element's state
		/// </summary>
		/// <seealso cref="ComputedForegroundProperty"/>
		public Brush ComputedForeground
		{
			get
			{
				return (Brush)this.GetValue(CalendarItem.ComputedForegroundProperty);
			}
			internal set
			{
				this.SetValue(CalendarItem.ComputedForegroundPropertyKey, value);
			}
		}

		#endregion //ComputedForeground

		#region ComputedInnerBorderBrush

		private static readonly DependencyPropertyKey ComputedInnerBorderBrushPropertyKey = DependencyPropertyUtilities.RegisterReadOnly("ComputedInnerBorderBrush",
			typeof(Brush), typeof(CalendarItem), new SolidColorBrush(Colors.Transparent), null);

		/// <summary>
		/// Identifies the read-only <see cref="ComputedInnerBorderBrush"/> dependency property
		/// </summary>
		public static readonly DependencyProperty ComputedInnerBorderBrushProperty = ComputedInnerBorderBrushPropertyKey.DependencyProperty;

		/// <summary>
		/// Returns the brush to use for the InnerBorderBrush based on the element's state
		/// </summary>
		/// <seealso cref="ComputedInnerBorderBrushProperty"/>
		public Brush ComputedInnerBorderBrush
		{
			get
			{
				return (Brush)this.GetValue(CalendarItem.ComputedInnerBorderBrushProperty);
			}
			internal set
			{
				this.SetValue(CalendarItem.ComputedInnerBorderBrushPropertyKey, value);
			}
		}

		#endregion //ComputedInnerBorderBrush

		#region ContainsSelectedDates

		internal static readonly DependencyPropertyKey ContainsSelectedDatesPropertyKey = DependencyPropertyUtilities.RegisterReadOnly("ContainsSelectedDates",
			typeof(bool), typeof(CalendarItem), KnownBoxes.FalseBox, OnContainsSelectedDatesChanged);

		private static void OnContainsSelectedDatesChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
		{
			CalendarItem instance = target as CalendarItem;

			instance.InternalSetPropValue(PropFlags.ContainsSelectedDates, (bool)e.NewValue);
			instance.UpdateVisualStates();
		}

		/// <summary>
		/// Identifies the read-only <see cref="ContainsSelectedDates"/> dependency property
		/// </summary>
		public static readonly DependencyProperty ContainsSelectedDatesProperty = ContainsSelectedDatesPropertyKey.DependencyProperty;

        /// <summary>
        /// Returns a boolean indicating whether the date contains at least one selected date.
        /// </summary>
        /// <remarks>
		/// <p class="body">When the CalendarItem represents an item in the <see cref="XamCalendar.MinCalendarMode"/>, 
        /// the value of this property is equal to that of the <see cref="IsSelected"/>. This property is primarily 
        /// intended to allow the control to display some indication to the end user that there are one or more dates within 
        /// the item that are currently selected when they are in navigation mode.</p>
        /// </remarks>
        /// <seealso cref="ContainsSelectedDatesProperty"/>
        /// <seealso cref="IsSelected"/>
        /// <seealso cref="CalendarBase.SelectedDate"/>
        /// <seealso cref="CalendarBase.SelectedDates"/>
        //[Description("Returns a boolean indicating whether the date contains at least one selected date.")]
        //[Category("MonthCalendar Properties")] // Behavior
        [Bindable(true)]
        [ReadOnly(true)]
		public bool ContainsSelectedDates
		{
			get
			{
				return this.InternalGetPropValue(PropFlags.ContainsSelectedDates);
			}
			internal set
			{
				this.SetValue(CalendarItem.ContainsSelectedDatesPropertyKey, value);
			}
		}

		#endregion //ContainsSelectedDates

		#region ContainsToday

		internal static readonly DependencyPropertyKey ContainsTodayPropertyKey = DependencyPropertyUtilities.RegisterReadOnly("ContainsToday",
			typeof(bool), typeof(CalendarItem), KnownBoxes.FalseBox, OnContainsTodayChanged);

		private static void OnContainsTodayChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
		{
			CalendarItem instance = target as CalendarItem;

			instance.InternalSetPropValue(PropFlags.ContainsToday, (bool)e.NewValue);
			instance.UpdateVisualStates();
		}

		/// <summary>
		/// Identifies the read-only <see cref="ContainsToday"/> dependency property
		/// </summary>
		public static readonly DependencyProperty ContainsTodayProperty = ContainsTodayPropertyKey.DependencyProperty;


        /// <summary>
        /// Returns a boolean indicating if the item contains the current date.
        /// </summary>
        /// <remarks>
		/// <p class="body">When the CalendarItem represents a date in the <see cref="XamCalendar.MinCalendarMode"/>, 
        /// this property is equivalent to the <see cref="IsToday"/>. This property is primarily intended to allow providing 
        /// an indication to the end user during navigation mode, which item contains the calendar item that 
        /// represents the current date.</p>
        /// </remarks>
        /// <seealso cref="ContainsTodayProperty"/>
        //[Description("Returns a boolean indicating if the item contains the current date.")]
        //[Category("MonthCalendar Properties")] // Behavior
        [Bindable(true)]
        [ReadOnly(true)]
		public bool ContainsToday
		{
			get
			{
				return this.InternalGetPropValue(PropFlags.ContainsToday);
			}
			internal set
			{
				this.SetValue(CalendarItem.ContainsTodayPropertyKey, value);
			}
		}

		#endregion //ContainsToday

		#region EndDate

		private static readonly DependencyPropertyKey EndDatePropertyKey = DependencyPropertyUtilities.RegisterReadOnly("EndDate",
			typeof(DateTime), typeof(CalendarItem), DateTime.MinValue, OnEndDateChanged);

		private static void OnEndDateChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
		{
			CalendarItem instance = target as CalendarItem;

			instance.FormatContent();
		}

		/// <summary>
		/// Identifies the read-only <see cref="EndDate"/> dependency property
		/// </summary>
		public static readonly DependencyProperty EndDateProperty = EndDatePropertyKey.DependencyProperty;

		/// <summary>
		/// Returns the ending date for the calendar item.
		/// </summary>
        /// <remarks>
        /// <p class="body">The <see cref="StartDate"/> and EndDate indicate the range of dates that the 
        /// item represents. When the <see cref="CalendarItemGroup.GetCurrentMode(DependencyObject)"/> is <b>Days</b>, 
        /// a <see cref="CalendarDay"/> instance will be used and its StartDate and EndDate will be equal.</p>
        /// </remarks>
		/// <seealso cref="EndDateProperty"/>
        /// <seealso cref="StartDate"/>
        /// <seealso cref="CalendarDay"/>
        //[Description("Returns the ending date for the calendar item.")]
		//[Category("MonthCalendar Properties")] // Behavior
		[Bindable(true)]
		[ReadOnly(true)]
		public DateTime EndDate
		{
			get
			{
				return (DateTime)this.GetValue(CalendarItem.EndDateProperty);
			}
			internal set
			{
				this.SetValue(CalendarItem.EndDatePropertyKey, value);
			}
		}

		#endregion //EndDate

		#region IsActive

		internal static readonly DependencyPropertyKey IsActivePropertyKey = DependencyPropertyUtilities.RegisterReadOnly("IsActive",
			typeof(bool), typeof(CalendarItem), KnownBoxes.FalseBox, OnIsActivePropertyChanged);
		
		internal static void OnIsActivePropertyChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
		{
			CalendarItem calItem = target as CalendarItem;

			if (calItem != null)
			{
				calItem.InternalSetPropValue(PropFlags.IsActive, (bool)e.NewValue);
				calItem.UpdateVisualStates();
				//calItem.InvalidateMeasure();
			}
		}

		/// <summary>
		/// Identifies the read-only <see cref="IsActive"/> dependency property
		/// </summary>
		public static readonly DependencyProperty IsActiveProperty = IsActivePropertyKey.DependencyProperty;

		/// <summary>
		/// Returns a boolean indicating if the day represents the <see cref="CalendarBase.ActiveDate"/>
		/// </summary>
		/// <remarks>
		/// <p class="body">A CalendarItem is considered active when the <see cref="CalendarBase.ActiveDate"/> 
		/// is within the item's <see cref="StartDate"/> and <see cref="EndDate"/>.</p>
		/// </remarks>
		/// <see cref="CalendarBase.ActiveDate"/>
		/// <seealso cref="IsActiveProperty"/>
		//[Description("Returns a boolean indicating if the day represents the 'ActiveDay' of the containing CalendarBase.")]
		//[Category("MonthCalendar Properties")] // Data
		[Bindable(true)]
		[ReadOnly(true)]
		public bool IsActive
		{
			get
			{
				return this.InternalGetPropValue(PropFlags.IsActive);
			}
			internal set
			{
				this.SetValue(CalendarItem.IsActivePropertyKey, value);
			}
		}

		#endregion //IsActive

		#region IsHighlighted

		internal static readonly DependencyPropertyKey IsHighlightedPropertyKey = DependencyPropertyUtilities.RegisterReadOnly("IsHighlighted",
			typeof(bool), typeof(CalendarItem), KnownBoxes.FalseBox, OnIsHighlightedChanged);

		private static void OnIsHighlightedChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
		{
			CalendarItem instance = target as CalendarItem;

			instance.InternalSetPropValue(PropFlags.IsHighlighted, (bool)e.NewValue);
			instance.UpdateVisualStates();
		}

		/// <summary>
		/// Identifies the read-only <see cref="IsHighlighted"/> dependency property
		/// </summary>
		public static readonly DependencyProperty IsHighlightedProperty = IsHighlightedPropertyKey.DependencyProperty;

		/// <summary>
		/// Returns true if this day should be highlighted (read-only).
		/// </summary>
		/// <seealso cref="IsHighlightedProperty"/>
		public bool IsHighlighted
		{
			get
			{
				return this.InternalGetPropValue(PropFlags.IsHighlighted);
			}
			internal set
			{
				this.SetValue(CalendarItem.IsHighlightedPropertyKey, value);
			}
		}

		#endregion //IsHighlighted

		#region IsLeadingOrTrailingItem

		internal static readonly DependencyPropertyKey IsLeadingOrTrailingItemPropertyKey = DependencyPropertyUtilities.RegisterReadOnly("IsLeadingOrTrailingItem",
			typeof(bool), typeof(CalendarItem), KnownBoxes.FalseBox, OnIsLeadingOrTrailingItemChanged);

		private static void OnIsLeadingOrTrailingItemChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
		{
			CalendarItem instance = target as CalendarItem;

			instance.InternalSetPropValue(PropFlags.IsLeadingOrTrailingItem, (bool)e.NewValue);
			instance.UpdateVisualStates();
		}

		/// <summary>
		/// Identifies the read-only <see cref="IsLeadingOrTrailingItem"/> dependency property
		/// </summary>
		public static readonly DependencyProperty IsLeadingOrTrailingItemProperty = IsLeadingOrTrailingItemPropertyKey.DependencyProperty;

		/// <summary>
		/// Returns a boolean indicating if the CalendarItem is a leading or trailing date in the containing <see cref="CalendarItemGroup"/>
		/// </summary>
		/// <remarks>
		/// <p class="body">Leading and trailing dates are dates displayed within a <see cref="CalendarItemGroup"/> that 
		/// do not fall within its <see cref="CalendarItemGroup.FirstDateOfGroup"/> and <see cref="CalendarItemGroup.LastDateOfGroup"/>. 
		/// Leading and trailing items are only displayed when the <see cref="CalendarItemGroup.ShowLeadingDates"/> and/or 
		/// <see cref="CalendarItemGroup.ShowTrailingDates"/> is true.</p>
		/// </remarks>
		/// <seealso cref="IsLeadingOrTrailingItemProperty"/>
		/// <seealso cref="CalendarItemGroup.ShowLeadingDates"/>
		/// <seealso cref="CalendarItemGroup.ShowTrailingDates"/>
		/// <seealso cref="CalendarBase.LeadingAndTrailingDatesVisibility"/>
		//[Description("Returns a boolean indicating if the CalendarItem is a leading or trailing date in the containing CalendarItemGroup")]
		//[Category("MonthCalendar Properties")] // Behavior
		[Bindable(true)]
		[ReadOnly(true)]
		public bool IsLeadingOrTrailingItem
		{
			get
			{
				return this.InternalGetPropValue(PropFlags.IsLeadingOrTrailingItem);
			}
			internal set
			{
				this.SetValue(CalendarItem.IsLeadingOrTrailingItemPropertyKey, value);
			}
		}

        #endregion //IsLeadingOrTrailingItem

		#region IsSelected

		internal static readonly DependencyPropertyKey IsSelectedPropertyKey = DependencyPropertyUtilities.RegisterReadOnly("IsSelected",
			typeof(bool), typeof(CalendarItem), KnownBoxes.FalseBox, OnIsSelectedChanged);

		private static void OnIsSelectedChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
		{
			CalendarItem instance = target as CalendarItem;

			instance.InternalSetPropValue(PropFlags.IsSelected, (bool)e.NewValue);
			instance.UpdateVisualStates();
		}

		/// <summary>
		/// Identifies the read-only <see cref="IsSelected"/> dependency property
		/// </summary>
		public static readonly DependencyProperty IsSelectedProperty = IsSelectedPropertyKey.DependencyProperty;

		/// <summary>
		/// Returns a boolean indicating if the date is selected.
		/// </summary>
		/// <remarks>
		/// <p class="body">When the CalendarItem represents an item in the <see cref="XamCalendar.MinCalendarMode"/>, 
		/// the value of this property is based on whether the date that the item represents has been selected. When in navigation 
		/// mode, this value is based on whether the item is active since selection can only be modified in the user interface 
		/// when the <see cref="CalendarBase.CurrentMode"/> equals the MinCalendarMode.</p>
		/// </remarks>
		/// <seealso cref="IsSelectedProperty"/>
		/// <seealso cref="ContainsSelectedDates"/>
		/// <seealso cref="CalendarBase.SelectedDate"/>
		/// <seealso cref="CalendarBase.SelectedDates"/>
		/// <seealso cref="XamCalendar.SelectionMode"/>
		/// <seealso cref="CalendarBase.SelectedDatesChanged"/>
		//[Description("Returns a boolean indicating if the date is selected.")]
		//[Category("MonthCalendar Properties")] // Behavior
		[ReadOnly(true)]
		public bool IsSelected
		{
			get
			{
				return this.InternalGetPropValue(PropFlags.IsSelected);
			}
			internal set
			{
				this.SetValue(CalendarItem.IsSelectedPropertyKey, value);
			}
		}

        #endregion //IsSelected

		#region IsSelectionActive

		internal static readonly DependencyPropertyKey IsSelectionActivePropertyKey = DependencyPropertyUtilities.RegisterReadOnly("IsSelectionActive",
			typeof(bool), typeof(CalendarItem),
			KnownBoxes.FalseBox,
			OnIsSelectionActiveChanged
			);

		private static void OnIsSelectionActiveChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
		{
			CalendarItem instance = target as CalendarItem;

			instance.InternalSetPropValue(PropFlags.IsSelectionActive, (bool)e.NewValue);
			instance.UpdateVisualStates();
		}

		/// <summary>
		/// Identifies the read-only <see cref="IsSelectionActive"/> dependency property
		/// </summary>
		public static readonly DependencyProperty IsSelectionActiveProperty = IsSelectionActivePropertyKey.DependencyProperty;

		/// <summary>
		/// Returns a boolean indicating indicating whether the containing CalendarBase has keyboard focus.
		/// </summary>
		/// <remarks>
		/// <p class="body">The IsSelectionActive is used to indicate if keyboard focus is within the containing <see cref="CalendarBase"/>. This 
		/// is often used to alter the appearance of a selected item when the control does not have keyboard focus (e.g. changing the selection color to 
		/// gray when focus is outside the control).</p>
		/// </remarks>
		/// <seealso cref="CalendarItem.IsSelected"/>
		/// <seealso cref="CalendarBase.IsSelectionActive"/>
		//[Description("Returns a boolean indicating whether the containing CalendarBase has keyboard focus.")]
		//[Category("MonthCalendar Properties")] // Behavior
		[Bindable(true)]
		[ReadOnly(true)]
		public bool IsSelectionActive
		{
			get
			{
				return this.InternalGetPropValue(PropFlags.IsSelectionActive);
			}
			internal set
			{
				this.SetValue(CalendarItem.IsSelectionActivePropertyKey, value);
			}
		}

        #endregion //IsSelectionActive

		#region IsToday

		internal static readonly DependencyPropertyKey IsTodayPropertyKey = DependencyPropertyUtilities.RegisterReadOnly("IsToday",
			typeof(bool), typeof(CalendarItem), KnownBoxes.FalseBox, OnIsTodayChanged);

		private static void OnIsTodayChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
		{
			CalendarItem instance = target as CalendarItem;

			instance.InternalSetPropValue(PropFlags.IsToday, (bool)e.NewValue);
			instance.UpdateVisualStates();
		}

		/// <summary>
		/// Identifies the read-only <see cref="IsToday"/> dependency property
		/// </summary>
		public static readonly DependencyProperty IsTodayProperty = IsTodayPropertyKey.DependencyProperty;

		/// <summary>
		/// Returns a boolean indicating whether the element is an item in the <see cref="XamCalendar.MinCalendarMode"/> and represents the current date.
		/// </summary>
		/// <remarks>
		/// <p class="body">The IsToday property is similar to the <see cref="ContainsToday"/> property except that it will 
		/// only be true when not in navigation mode (i.e. when the <see cref="XamCalendar.MinCalendarMode"/> equals the 
		/// <see cref="CalendarBase.CurrentMode"/>). It is used to identify the CalendarItem that represents the 
		/// current date.</p>
		/// </remarks>
		/// <seealso cref="IsTodayProperty"/>
		/// <seealso cref="ContainsToday"/>
		//[Description("Returns a boolean indicating whether the element is an item in the MinCalendarMode of the containing CalendarBase and represents the current date.")]
		//[Category("MonthCalendar Properties")] // Behavior
		[Bindable(true)]
		[ReadOnly(true)]
		public bool IsToday
		{
			get
			{
				return this.InternalGetPropValue(PropFlags.IsToday);
			}
			internal set
			{
				this.SetValue(CalendarItem.IsTodayPropertyKey, value);
			}
		}

        #endregion //IsToday

		#region StartDate

		private static readonly DependencyPropertyKey StartDatePropertyKey = DependencyPropertyUtilities.RegisterReadOnly("StartDate",
			typeof(DateTime), typeof(CalendarItem), DateTime.MinValue, OnStartDateChanged);

		private static void OnStartDateChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
		{
			CalendarItem instance = target as CalendarItem;

			instance.FormatContent();
		}

		/// <summary>
		/// Identifies the read-only <see cref="StartDate"/> dependency property
		/// </summary>
		public static readonly DependencyProperty StartDateProperty = StartDatePropertyKey.DependencyProperty;

		/// <summary>
		/// Returns the starting date for the calendar item.
		/// </summary>
		/// <remarks>
		/// <p class="body">The StartDate and <see cref="EndDate"/> indicate the range of dates that the 
		/// item represents. When the <see cref="CalendarItemGroup.GetCurrentMode(DependencyObject)"/> is <b>Days</b>, 
		/// a <see cref="CalendarDay"/> instance will be used and its StartDate and EndDate will be equal.</p>
		/// </remarks>
		/// <seealso cref="EndDate"/>
		/// <seealso cref="CalendarDay"/>
		/// <seealso cref="StartDateProperty"/>
		//[Description("Returns the starting date for the calendar item.")]
		//[Category("MonthCalendar Properties")] // Behavior
		[Bindable(true)]
		[ReadOnly(true)]
		public DateTime StartDate
		{
			get
			{
				return (DateTime)this.GetValue(CalendarItem.StartDateProperty);
			}
			internal set
			{
				this.SetValue(CalendarItem.StartDatePropertyKey, value);
			}
		}

		#endregion //StartDate

		#endregion //Public Properties

        #region Internal Properties

		#region Group

		internal CalendarItemGroup Group
		{
			get { return this._group; }
		}

		#endregion //Group

	    #endregion //Internal Properties

		#region Private

		#region CalendarManager
		internal CalendarManager CalendarManager
		{
			get { return this.Group == null ? CalendarManager.CurrentCulture : this.Group.CalendarManager; }
		}
		#endregion //CalendarManager

		#endregion //Private

		#endregion //Properties

		#region Methods
		
		#region Internal Methods

        #region CompareTo
        internal int CompareTo(DateTime date)
        {
            if (date < this.StartDate)
                return 1;

            if (date > this.EndDate)
                return -1;

            return 0;
        } 
        #endregion //CompareTo

		#region ContainsDate
		internal bool ContainsDate(DateTime date)
		{
			return date >= this.StartDate && date <= this.EndDate;
		}
		#endregion //ContainsDate

		#region InternalGetPropValue

		internal bool InternalGetPropValue(PropFlags prop)
		{
			return (_propFlags & prop) != 0;
		}

		#endregion //InternalGetPropValue	
    
		#region InternalSetPropValue

		internal void InternalSetPropValue(PropFlags prop, bool value)
		{
			if (value)
				_propFlags |= prop;
			else
			{
				_propFlags &= ~prop;

				// if isIntilizing is being set to false then call UpdateVisualStates
				if (prop == PropFlags.IsInitializing)
				{
					if (this.InternalGetPropValue(PropFlags.FormattedContentDirty))
						this.FormatContent();

					if (this.InternalGetPropValue(PropFlags.VisualStateDirty))
						this.UpdateVisualStates();
				}
			}
		}

		#endregion //InternalSetPropValue	
    
		#region OnCurrentModeChanged
		internal void OnCurrentModeChanged(CalendarZoomMode newMode, CalendarZoomMode oldMode)
		{
			this.FormatContent();
		}
		#endregion //OnCurrentModeChanged

        #region Recycle
        internal virtual void Recycle(DateTime start, DateTime end)
        {
            Debug.Assert(start <= end);
            this.SetValue(StartDatePropertyKey, start);
            this.SetValue(EndDatePropertyKey, end);

			//if ( this.IsToday)
			//    this.ClearValue(IsTodayPropertyKey);

			//if ( this.ContainsToday)
			//    this.ClearValue(ContainsTodayPropertyKey);

			//if ( this.IsSelected )
			//    this.ClearValue(IsSelectedPropertyKey);

			//if ( this.ContainsSelectedDates )
			//    this.ClearValue(ContainsSelectedDatesPropertyKey);

			//if (!this.IsEnabled )
			//    this.ClearValue(IsEnabledProperty);

			//if ( this.IsLeadingOrTrailingItem )
			//    this.ClearValue(IsLeadingOrTrailingItemPropertyKey);

			//if ( this.IsActive )
			//    this.ClearValue(IsActivePropertyKey);
        } 
        #endregion //Recycle

		// JJD 11/9/11 - TFS85551 - added
		#region SetIsEnabled

		internal void SetIsEnabled(bool isEnabled, bool isRecycled)
		{
			bool valueChanged = false;
			if (false == isEnabled)
			{
				this.SetValue(IsEnabledProperty, KnownBoxes.FalseBox);
				valueChanged = true;
			}
			else
				if (isRecycled && this.IsEnabled == false)
				{
					valueChanged = true;
					this.ClearValue(IsEnabledProperty);
				}

			if (valueChanged)
			{





			}
		}

		#endregion //SetIsEnabled	
    
		#region SetProviderBrushes

		internal virtual void SetProviderBrushes()
		{
			CalendarBase cal = CalendarBase.GetCalendar(this);

			if (cal == null)
				return;

			CalendarResourceProvider rp = cal.ResourceProviderResolved;

			if (rp == null)
				return;

			bool isToday = this.IsToday;
			bool isSelected = this.IsSelected;
			bool isSelectionActive = this.IsSelectionActive;
			bool isEnabled = this.IsEnabled;

			CalendarResourceId idBackground;
			CalendarResourceId idForeground;
			CalendarResourceId idBorder;
			CalendarResourceId idInnerBorder;

			if (isSelected == true)
			{
				if (isSelectionActive == true)
				{
					idBackground = CalendarResourceId.SelectedFocusedItemBackgroundBrush;
					idBorder = CalendarResourceId.SelectedFocusedItemBorderBrush;
					idForeground = CalendarResourceId.SelectedFocusedItemForegroundBrush;
					idInnerBorder = CalendarResourceId.SelectedFocusedItemInnerBorderBrush;
				}
				else
				{
					idBackground = CalendarResourceId.SelectedItemBackgroundBrush;
					idBorder = CalendarResourceId.SelectedItemBorderBrush;
					idForeground = CalendarResourceId.SelectedItemForegroundBrush;
					idInnerBorder = CalendarResourceId.SelectedItemInnerBorderBrush;
				}
			}
			else
			{
				if (this.InternalGetPropValue(PropFlags.IsMouseOver) == true)
				{
					idBackground = CalendarResourceId.MouseOverItemBackgroundBrush;
					idBorder = CalendarResourceId.MouseOverItemBorderBrush;
					idForeground = CalendarResourceId.MouseOverItemForegroundBrush;
					idInnerBorder = CalendarResourceId.MouseOverItemInnerBorderBrush;
				}
				else
				{
					idBackground = CalendarResourceId.ItemBackgroundBrush;
					idBorder = CalendarResourceId.ItemBorderBrush;
					idForeground = CalendarResourceId.ItemForegroundBrush;
					idInnerBorder = CalendarResourceId.ItemInnerBorderBrush;

					if (isToday)
					{
						idBackground = CalendarResourceId.TodayBackgroundBrush;

						if (isSelected == false && isEnabled)
							idForeground = CalendarResourceId.TodayForegroundBrush;
					}
				}
			}

			if (isToday)
			{
				idBorder = CalendarResourceId.TodayBorderBrush;
				idInnerBorder = CalendarResourceId.ItemInnerBorderBrush;
			}

			// JJD 8/26/11 - TFS85067
			// if the item is disabled then use disabled foreground and background brushes
			if (!isEnabled)
			{
				idBackground = CalendarResourceId.DisabledItemBackgroundBrush;
				idForeground = CalendarResourceId.DisabledItemForegroundBrush;
			}
			else
			{
				if (IsLeadingOrTrailingItem)
					idForeground = CalendarResourceId.LeadingOrTrailingItemForegroundBrush;
			}

			this.ComputedBackground = rp[idBackground] as Brush;
			this.ComputedBorderBrush = rp[idBorder] as Brush;
			this.ComputedForeground = rp[idForeground] as Brush;
			this.ComputedInnerBorderBrush = rp[idInnerBorder] as Brush;

		}

		#endregion //SetProviderBrushes
        
        #region VisualState... Methods

        /// <summary>
        /// Called to set the VisualStates of the editor
        /// </summary>
        /// <param name="useTransitions">Determines whether transitions should be used.</param>
        protected virtual void SetVisualState(bool useTransitions)
        {

            // Set Common states
            if (this.IsEnabled == false)
                VisualStateManager.GoToState(this, VisualStateUtilities.StateDisabled, useTransitions);
            else if ( this.InternalGetPropValue(PropFlags.IsMouseOver) )
                VisualStateUtilities.GoToState(this, useTransitions, VisualStateUtilities.StateMouseOver, VisualStateUtilities.StateNormal);
            else
                VisualStateManager.GoToState(this, VisualStateUtilities.StateNormal, useTransitions);

			CalendarBase cal = CalendarBase.GetCalendar(_group != null ? (DependencyObject)_group : this);

            bool isFocused = cal != null && this.IsActive && cal.IsKeyboardFocusWithin;


#region Infragistics Source Cleanup (Region)


#endregion // Infragistics Source Cleanup (Region)


			// Set Focus states
            if (isFocused)
                VisualStateUtilities.GoToState(this, useTransitions, VisualStateUtilities.StateFocused, VisualStateUtilities.StateUnfocused);
            else
                VisualStateManager.GoToState(this, VisualStateUtilities.StateUnfocused, useTransitions);

            // Set Calendar states
            CalendarItemGroup.GoToCalendarState(this, useTransitions);

            // Set Selection states
			// JJD 4/10/12 - Added SelectedUnfocused state
			//if (this.IsSelectionActive && this.IsSelected)
			if (this.IsSelected)
			{
				if (this.IsSelectionActive)
					VisualStateManager.GoToState(this, VisualStateUtilities.StateSelected, useTransitions);
				else
					VisualStateManager.GoToState(this, VisualStateUtilities.StateSelectedUnfocused, useTransitions);
			}
			else
				VisualStateManager.GoToState(this, VisualStateUtilities.StateUnselected, useTransitions);

            // Set Active states
            if ( this.IsActive )
                VisualStateManager.GoToState(this, VisualStateUtilities.StateActive, useTransitions);
            else
                VisualStateManager.GoToState(this, VisualStateUtilities.StateInactive, useTransitions);

            if ( this.IsToday )
                VisualStateManager.GoToState(this, VisualStateUtilities.StateToday, useTransitions);
            else
                VisualStateManager.GoToState(this, VisualStateUtilities.StateRegularDay, useTransitions);

			// Set Highlight states
			if (this.IsHighlighted)
				VisualStateManager.GoToState(this, VisualStateUtilities.StateIsHighlighted, useTransitions);
			else
				VisualStateManager.GoToState(this, VisualStateUtilities.StateIsNotHighlighted, useTransitions);
			
			// JJD 02/28/12 - Added IsLeadingOrTrailing VSM states
			if (this.IsLeadingOrTrailingItem)
				VisualStateManager.GoToState(this, VisualStateUtilities.StateIsLeadingOrTrailing, useTransitions);
			else
				VisualStateManager.GoToState(this, VisualStateUtilities.StateIsNotLeadingOrTrailing, useTransitions);

			this.SetProviderBrushes();

        }

        // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
        internal static void OnVisualStatePropertyChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)
        {
            CalendarItem calItem = target as CalendarItem;

            if (calItem != null)
                calItem.UpdateVisualStates();
        }

        // JJD 4/08/10 - NA2010 Vol 2 - Added support for VisualStateManager
        /// <summary>
        /// Called to set the visual states of the control
        /// </summary>
        internal protected void UpdateVisualStates()
        {
			bool isInitializing = this.InternalGetPropValue(PropFlags.IsInitializing);

			this.InternalSetPropValue(PropFlags.VisualStateDirty, isInitializing);

			if (!isInitializing )
				this.UpdateVisualStates(true);
        }

        /// <summary>
        /// Called to set the visual states of the control
        /// </summary>
        /// <param name="useTransitions">Determines whether transitions should be used.</param>
        protected void UpdateVisualStates(bool useTransitions)
        {

			if (false == this.InternalGetPropValue(PropFlags.HasVisualStateGroups))
			{
				this.SetProviderBrushes();
				return;
			}

            if (!this.InternalGetPropValue(PropFlags.IsInitialized))
                useTransitions = false;

            this.SetVisualState(useTransitions);
        }

        #endregion //VisualState... Methods	

		#endregion //Internal Methods
    
		#region Private Methods

		#region FormatContent

		private void FormatContent()
		{
			if (this.InternalGetPropValue(PropFlags.IsInitializing) ||
				!this.InternalGetPropValue(PropFlags.IsInitialized))
			{
				this.InternalSetPropValue(PropFlags.FormattedContentDirty, true);
				return;
			}

			this.FormatContentImpl();
		}

		private void FormatContentImpl()
		{
			this.InternalSetPropValue(PropFlags.FormattedContentDirty, false);

			string format;
			bool includeEndDate = false;

			switch (CalendarItemGroup.GetCurrentMode(this))
			{
				default:
				case CalendarZoomMode.Days:
					format = "{0:%d}";
					break;
				case CalendarZoomMode.Months:
					format = "{0:MMM}";
					break;
				case CalendarZoomMode.Years:
					format = "{0:yyyy}";
					break;
				case CalendarZoomMode.Decades:
				case CalendarZoomMode.Centuries:
					format = "{0:yyyy}-\n{1:yyyy}";
					includeEndDate = true;
					break;
			}

			if ( includeEndDate )
				this.Content = string.Format(CultureInfo.CurrentCulture.DateTimeFormat, format, this.StartDate, this.EndDate);
			else
				this.Content = string.Format(CultureInfo.CurrentCulture.DateTimeFormat, format, this.StartDate);
		}

		#endregion //FormatContent	
    
		#region OnIsFocusWithinChanged

		private static void OnIsFocusWithinChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
		{
			if (KnownBoxes.TrueBox.Equals(e.NewValue))
			{
                CalendarItem item = (CalendarItem)d;
                CalendarBase cal = CalendarUtilities.GetCalendar(item);

				if (null != cal)
                    cal.ActiveDate = item.StartDate;
			}
		}

		#endregion //OnIsFocusWithinChanged

		#endregion //Private Methods

		#endregion //Methods

        #region Base class overrides

        #region OnApplyTemplate

        /// <summary>
        /// Called when the template is applied.
        /// </summary>
        /// <remarks>
        /// <p class="body">
        /// OnApplyTemplate is a .NET framework method exposed by the FrameworkElement. This class overrides
        /// it to get the focus site from the control template whenever template gets applied to the control.
        /// </p>
        /// </remarks>
        public override void OnApplyTemplate()
        {
            base.OnApplyTemplate();


			this.InternalSetPropValue(PropFlags.HasVisualStateGroups, VisualStateUtilities.GetHasVisualStateGroups(this));


			this.InternalSetPropValue(PropFlags.IsInitialized, true);

			this.FormatContent();

            this.UpdateVisualStates(false);
        }

        #endregion //OnApplyTemplate
	
        #region OnCreateAutomationPeer

        /// <summary>
        /// Returns <see cref="CalendarItem"/> Automation Peer Class <see cref="CalendarItemAutomationPeer"/>
        /// </summary>
        /// <returns>AutomationPeer</returns>
        protected override AutomationPeer OnCreateAutomationPeer()
        {
            return new CalendarItemAutomationPeer(this);
        }

        #endregion //OnCreateAutomationPeer


        #region OnIsKeyboardFocusedChanged

        /// <summary>
        /// Called when the IsKeyboardFocusWithin property changes
        /// </summary>
        /// <param name="e"></param>
        protected override void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e)
        {
            base.OnIsKeyboardFocusWithinChanged(e);

			this.UpdateVisualStates();

        }

        #endregion //OnIsKeyboardFocusedChanged	

    
		#region OnInitialized


		/// <summary>
		/// Overriden. Raises the <see cref="FrameworkElement.Initialized"/> event. This method is invoked when the <see cref="FrameworkElement.IsInitialized"/> is set to true.
		/// </summary>
		/// <param name="e">Event arguments</param>
		protected override void OnInitialized(EventArgs e)



		{

			base.OnInitialized(e);


		}
		#endregion //OnInitialized
 
        #region OnMouseEnter
        /// <summary>
        /// Invoked when the mouse is moved within the bounds of the element.
        /// </summary>
        /// <param name="e">Provides information about the mouse position.</param>
        protected override void OnMouseEnter(MouseEventArgs e)
        {
            base.OnMouseEnter(e);


			this.InternalSetPropValue(PropFlags.IsMouseOver, true);


#region Infragistics Source Cleanup (Region)




#endregion // Infragistics Source Cleanup (Region)


			this.UpdateVisualStates();

        }
        #endregion //OnMouseEnter

        #region OnMouseLeave
        /// <summary>
        /// Invoked when the mouse is moved outside the bounds of the element.
        /// </summary>
        /// <param name="e">Provides information about the mouse position.</param>
        protected override void OnMouseLeave(MouseEventArgs e)
        {
            base.OnMouseLeave(e);


			this.InternalSetPropValue(PropFlags.IsMouseOver, false);


#region Infragistics Source Cleanup (Region)




#endregion // Infragistics Source Cleanup (Region)


			this.UpdateVisualStates();

        }
        #endregion //OnMouseLeave
    
        #region ToString

        /// <summary>
		/// Overriden. Returns the date range that the item represents
		/// </summary>
		/// <returns>A string containing the <see cref="StartDate"/> and <see cref="EndDate"/>.</returns>
		public override string ToString()
		{
			return string.Format(this.CalendarManager.DateTimeFormat, "CalendarItem {0:d}-{1:d}", this.StartDate, this.EndDate);
		}
		#endregion //ToString

		#endregion //Base class overrides

		#region ISelectableElement Members

		Infragistics.Controls.Primitives.ISelectableItem ISelectableElement.SelectableItem
		{
			get { return this; }
		}

		#endregion //ISelectableElement

		#region ISelectableItem Members

		bool ISelectableItem.IsDraggable
		{
			get { return false; }
		}

		bool ISelectableItem.IsSelectable
		{
			get { return this.IsEnabled; }
		}

		bool ISelectableItem.IsSelected
		{
			get { return this.IsSelected; }
		}

		bool ISelectableItem.IsTabStop
		{
			get { return this.IsEnabled; }
		}

		#endregion // ISelectableItem

		#region IResourceProviderClient Members

		void IResourceProviderClient.OnResourcesChanged()
		{
			this.InvalidateMeasure();
		}

		#endregion
		
		#region ISupportInitialize Members


#region Infragistics Source Cleanup (Region)





#endregion // Infragistics Source Cleanup (Region)

		#endregion

		#region PropFlags internal flagged enum

		[Flags()]
		internal enum PropFlags : ushort
		{
			ContainsSelectedDates			= 0x0001,
			ContainsToday					= 0x0002,
			IsActive						= 0x0004,
			IsHighlighted					= 0x0008,
			IsLeadingOrTrailingItem			= 0x0010,
			IsSelected						= 0x0020,
			IsSelectionActive				= 0x0040,
			IsToday							= 0x0080,
			IsWorkday						= 0x0100,
			
			IsMouseOver						= 0x0200,
			IsInitialized					= 0x0400,
			HasVisualStateGroups			= 0x0800,

			FormattedContentDirty			= 0x2000,
			IsInitializing					= 0x4000,
			VisualStateDirty				= 0x8000,
		}

		#endregion //PropFlags internal flagged enum
	}
}

#region Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved
/* ---------------------------------------------------------------------*
*                           Infragistics, Inc.                          *
*              Copyright (c) 2001-2012 All Rights reserved               *
*                                                                       *
*                                                                       *
* This file and its contents are protected by United States and         *
* International copyright laws.  Unauthorized reproduction and/or       *
* distribution of all or any portion of the code contained herein       *
* is strictly prohibited and will result in severe civil and criminal   *
* penalties.  Any violations of this copyright will be prosecuted       *
* to the fullest extent possible under law.                             *
*                                                                       *
* THE SOURCE CODE CONTAINED HEREIN AND IN RELATED FILES IS PROVIDED     *
* TO THE REGISTERED DEVELOPER FOR THE PURPOSES OF EDUCATION AND         *
* TROUBLESHOOTING. UNDER NO CIRCUMSTANCES MAY ANY PORTION OF THE SOURCE *
* CODE BE DISTRIBUTED, DISCLOSED OR OTHERWISE MADE AVAILABLE TO ANY     *
* THIRD PARTY WITHOUT THE EXPRESS WRITTEN CONSENT OF INFRAGISTICS, INC. *
*                                                                       *
* UNDER NO CIRCUMSTANCES MAY THE SOURCE CODE BE USED IN WHOLE OR IN     *
* PART, AS THE BASIS FOR CREATING A PRODUCT THAT PROVIDES THE SAME, OR  *
* SUBSTANTIALLY THE SAME, FUNCTIONALITY AS ANY INFRAGISTICS PRODUCT.    *
*                                                                       *
* THE REGISTERED DEVELOPER ACKNOWLEDGES THAT THIS SOURCE CODE           *
* CONTAINS VALUABLE AND PROPRIETARY TRADE SECRETS OF INFRAGISTICS,      *
* INC.  THE REGISTERED DEVELOPER AGREES TO EXPEND EVERY EFFORT TO       *
* INSURE ITS CONFIDENTIALITY.                                           *
*                                                                       *
* THE END USER LICENSE AGREEMENT (EULA) ACCOMPANYING THE PRODUCT        *
* PERMITS THE REGISTERED DEVELOPER TO REDISTRIBUTE THE PRODUCT IN       *
* EXECUTABLE FORM ONLY IN SUPPORT OF APPLICATIONS WRITTEN USING         *
* THE PRODUCT.  IT DOES NOT PROVIDE ANY RIGHTS REGARDING THE            *
* SOURCE CODE CONTAINED HEREIN.                                         *
*                                                                       *
* THIS COPYRIGHT NOTICE MAY NOT BE REMOVED FROM THIS FILE.              *
* --------------------------------------------------------------------- *
*/
#endregion Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved