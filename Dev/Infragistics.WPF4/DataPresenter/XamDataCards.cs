#region using ...

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Documents;
using System.Windows.Shapes;
using System.Windows.Navigation;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Automation;
using System.Windows.Automation.Provider;
using System.Windows.Threading;
using System.Diagnostics;
using System.Collections;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.Design.Serialization;
using System.Globalization;
using System.Reflection;
using System.Data;
using System.Xml;
using System.Windows.Markup;
using Infragistics.Shared;
using Infragistics.Windows.DataPresenter;
using Infragistics.Windows.Themes;
using Infragistics.Windows.Helpers;
using Infragistics.Windows.Resizing;
using Infragistics.Windows.Selection;
using Infragistics.Windows.Commands;
using Infragistics.Windows.Internal;
using Infragistics.Windows.Editors;
using Infragistics.Windows.Controls;
using Infragistics.Windows.DataPresenter.Events;
using Infragistics.Windows.Licensing;
using System.Windows.Automation.Peers;
using Infragistics.Windows.Automation.Peers;
using System.Text;

#endregion //using ...	
    
namespace Infragistics.Windows.DataPresenter
{
    /// <summary>
    /// A <see cref="DataPresenterBase"/> derived control that uses a <see cref="CardView"/> and an associated <see cref="CardViewPanel"/> to arrange <see cref="DataRecord"/>s inside 'cards' which are organized in a tabular layout.  
    /// </summary>
    /// <remarks>
    /// <p class="body">The XamDataCards control is essentially a <see cref="XamDataPresenter"/> that implements a single view i.e., a <see cref="CardView"/>.  It contains the same functionality
    /// as a <see cref="XamDataPresenter"/> that has its <see cref="XamDataPresenter.View"/> property set to an instance of a <see cref="CardView"/>, without the ability to dynamically switch between views.</p>
    /// <p class="body">If you need the card layout provided by a <see cref="CardView"/> and don't need the ability to dynamically switch to other views, you should use the
    /// XamDataCards control rather than the <see cref="XamDataPresenter"/>.  It's a bit more convenient to use than the <see cref="XamDataPresenter"/> since it exposes a <see cref="XamDataCards.ViewSettings"/> property
    /// of type <see cref="CardViewSettings"/> directly off the control for easy manipulation of the properties that control all aspects of the card layout.</p>
    /// <p class="body">Refer to the <see cref="CardViewSettings"/> topic for detailed information on all available properties.</p>
	/// </remarks>
    /// <seealso cref="XamDataPresenter"/>
    /// <seealso cref="XamDataPresenter.View"/>
    /// <seealso cref="CardView"/>
	/// <seealso cref="CardViewSettings"/>
	/// <seealso cref="DataRecord"/>
    [ContentProperty("DataItems")]
	[TemplatePart(Name = "PART_ContentSiteGrid", Type = typeof(Grid))]
	
	
	//[Description("A DataPresenterBase derived control that uses a CardViewPanel to arrange its items inside cards which are organized in a tabular layout, snaking either vertically or horizontally.  The XamDataCards control uses elements generated by the XamDataPresenterBase to display each item in the list.")]
	[InfragisticsFeature(FeatureName = FeatureInfo.FeatureName_CardView, Version = FeatureInfo.Version_10_1)]
	// AS 4/15/10 The base class has this set to false so DataPresenterBase doesn't show up but we need to set it back to true for the derived controls that should show up.
	[DesignTimeVisible(true)]	// JM 02-18-10 - DO NOT MOVE TO DESIGN ASSEMBLY!!!
	public class XamDataCards : DataPresenterBase
	{
		#region Member variables

		private UltraLicense							_license = null;
		private CardViewSettings						_viewSettings = new CardViewSettings();

		#endregion //Member variables	
    
		#region Constructor

		static XamDataCards()
		{
			FrameworkElement.DefaultStyleKeyProperty.OverrideMetadata(typeof(XamDataCards), new FrameworkPropertyMetadata(typeof(XamDataCards)));

			// JJD 05/11/12 - TFS110351
			// Default the new RecordContainerRetentionMode property to 'DiscardDeactivatedContainers' for XamDataCards
			DataPresenterBase.RecordContainerRetentionModeProperty.OverrideMetadata(typeof(XamDataCards), new FrameworkPropertyMetadata(RecordContainerRetentionMode.DiscardDeactivatedContainers));

			// Load our commands.  (Since our commands are defined as statics and static initializers are not called
			// until the class is accessed, call the convenience method 'LoadCommands' which will access the class
			// and force the loading of our static commands and register command bindings)
			DataPresenterCommands.LoadCommands();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="XamDataCards"/> class
		/// </summary>
		public XamDataCards()
		{
			// verify and cache the license
			//
			// Wrapped in a try/catch for a FileNotFoundException.
			// When the assembly is loaded dynamically, VS seems 
			// to be trying to reload a copy of Shared even though 
			// one is in memory. This generates a FileNotFoundException
			// when the dll is not in the gac and not in the AppBase
			// for the AppDomain.
			//
			// AS 11/7/07 BR21903
			// Always do the license checks.
			//
			//if (DesignerProperties.GetIsInDesignMode(this))
			{
				try
				{
					// We need to pass our type into the method since we do not want to pass in 
					// the derived type.
					this._license = LicenseManager.Validate(typeof(XamDataCards), this) as UltraLicense;
				}
				catch (System.IO.FileNotFoundException) { }
			}


			// Create our view and set it on DataPresenterBase.
			this.CurrentViewInternal = new CardView();
		}

		#endregion //Constructor

		#region Base class overrides

			#region OnInitialized

		/// <summary>
		/// Called after the element has been initialized.
		/// </summary>
		protected override void OnInitialized(EventArgs e)
		{
			base.OnInitialized(e);

			// Set the ViewSettings dependency property using the CLR property which will do a lazy create of the object.
            // Check for design mode first - if we are in design mode don't sync ViewSettings
            if (DesignerProperties.GetIsInDesignMode(this) == false)
                this.SetValue(XamDataCards.ViewSettingsProperty, this.ViewSettings);

			// Bind the current view's ViewSettings property to our ViewSettings property.
			this.CurrentViewInternal.SetBinding(CardView.ViewSettingsProperty, Utilities.CreateBindingObject(XamDataCards.ViewSettingsProperty, BindingMode.OneWay, this));
		}

			#endregion //OnInitialized	

			#region OnPropertyChanged

		/// <summary>
		/// Called when a dependency property has changed
		/// </summary>
		/// <param name="e">The arguments identifying the property and containing the new and old values.</param>
		protected override void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
		{
			base.OnPropertyChanged(e);

            if (e.Property == ViewSettingsProperty)
            {
					// Set our ViewSettings member variable.
					this._viewSettings = e.NewValue as CardViewSettings;
			}
		}

			#endregion //OnPropertyChanged	

		#endregion //Base class overrides

		#region Properties

			#region Public properties

				#region ViewSettings

		/// <summary>
		/// Identifies the <see cref="ViewSettings"/> dependency property
		/// </summary>
		public static readonly DependencyProperty ViewSettingsProperty = DependencyProperty.Register("ViewSettings",
			typeof(CardViewSettings), typeof(XamDataCards), new FrameworkPropertyMetadata(null, new CoerceValueCallback(OnCoerceViewSettings)));

		private static object OnCoerceViewSettings(DependencyObject d, object value)
		{
            if (value == null)
            {
                // Check for design mode first - only create a ViewSettings if we are in run mode 
                if (DesignerProperties.GetIsInDesignMode(d) == false)
                    return new CardViewSettings();
            }

			return value;
		}

		/// <summary>
		/// Returns/set the <see cref="CardViewSettings"/> object for this <see cref="XamDataCards"/> control.
		/// </summary>
        /// <remarks>
        /// <p class="body">The <see cref="CardViewSettings"/> object exposes properties that let you control all aspects of card layout.
        /// Refer to the <see cref="CardViewSettings"/> topic for detailed information on all available properties.</p>
        /// </remarks>
        /// <seealso cref="ViewSettingsProperty"/>
		//[Description("Returns/set the CardViewSettings object for this XamDataCards control.")]
		//[Category("Appearance")]
		[Bindable(true)]
		[TypeConverter(typeof(ExpandableObjectConverter))]
		public CardViewSettings ViewSettings
		{
			get
			{
                // Check for design mode first - if we are in design mode don't create an instance of the Settings object
                if (this._viewSettings == null &&
                    DesignerProperties.GetIsInDesignMode(this) == false)
                    this._viewSettings = new CardViewSettings();

				return this._viewSettings;
			}
			set
			{
				this.SetValue(XamDataCards.ViewSettingsProperty, value);
			}
		}

		/// <summary>
		/// Determines if the <see cref="ViewSettings"/> property needs to be serialized.
		/// </summary>
		/// <returns>True if the property should be serialized</returns>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public bool ShouldSerializeViewSettings()
		{
			return this.ViewSettings != (CardViewSettings)XamDataCards.ViewSettingsProperty.DefaultMetadata.DefaultValue;
		}

		/// <summary>
		/// Resets the <see cref="ViewSettings"/> property to its default value.
		/// </summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public void ResetViewSettings()
		{
			this.ViewSettings = (CardViewSettings)XamDataCards.ViewSettingsProperty.DefaultMetadata.DefaultValue;
		}

				#endregion //ViewSettings

			#endregion //Public properties

		#endregion //Properties
	}
}

#region Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved
/* ---------------------------------------------------------------------*
*                           Infragistics, Inc.                          *
*              Copyright (c) 2001-2012 All Rights reserved               *
*                                                                       *
*                                                                       *
* This file and its contents are protected by United States and         *
* International copyright laws.  Unauthorized reproduction and/or       *
* distribution of all or any portion of the code contained herein       *
* is strictly prohibited and will result in severe civil and criminal   *
* penalties.  Any violations of this copyright will be prosecuted       *
* to the fullest extent possible under law.                             *
*                                                                       *
* THE SOURCE CODE CONTAINED HEREIN AND IN RELATED FILES IS PROVIDED     *
* TO THE REGISTERED DEVELOPER FOR THE PURPOSES OF EDUCATION AND         *
* TROUBLESHOOTING. UNDER NO CIRCUMSTANCES MAY ANY PORTION OF THE SOURCE *
* CODE BE DISTRIBUTED, DISCLOSED OR OTHERWISE MADE AVAILABLE TO ANY     *
* THIRD PARTY WITHOUT THE EXPRESS WRITTEN CONSENT OF INFRAGISTICS, INC. *
*                                                                       *
* UNDER NO CIRCUMSTANCES MAY THE SOURCE CODE BE USED IN WHOLE OR IN     *
* PART, AS THE BASIS FOR CREATING A PRODUCT THAT PROVIDES THE SAME, OR  *
* SUBSTANTIALLY THE SAME, FUNCTIONALITY AS ANY INFRAGISTICS PRODUCT.    *
*                                                                       *
* THE REGISTERED DEVELOPER ACKNOWLEDGES THAT THIS SOURCE CODE           *
* CONTAINS VALUABLE AND PROPRIETARY TRADE SECRETS OF INFRAGISTICS,      *
* INC.  THE REGISTERED DEVELOPER AGREES TO EXPEND EVERY EFFORT TO       *
* INSURE ITS CONFIDENTIALITY.                                           *
*                                                                       *
* THE END USER LICENSE AGREEMENT (EULA) ACCOMPANYING THE PRODUCT        *
* PERMITS THE REGISTERED DEVELOPER TO REDISTRIBUTE THE PRODUCT IN       *
* EXECUTABLE FORM ONLY IN SUPPORT OF APPLICATIONS WRITTEN USING         *
* THE PRODUCT.  IT DOES NOT PROVIDE ANY RIGHTS REGARDING THE            *
* SOURCE CODE CONTAINED HEREIN.                                         *
*                                                                       *
* THIS COPYRIGHT NOTICE MAY NOT BE REMOVED FROM THIS FILE.              *
* --------------------------------------------------------------------- *
*/
#endregion Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved