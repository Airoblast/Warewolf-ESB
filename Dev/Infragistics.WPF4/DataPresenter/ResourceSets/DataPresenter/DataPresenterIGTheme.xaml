<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
	mc:Ignorable="d"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:editors="http://infragistics.com/Editors"
	xmlns:igDP="clr-namespace:Infragistics.Windows.DataPresenter"
	xmlns:themes="clr-namespace:Infragistics.Windows.Themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DataPresenterGeneric.xaml"/>
        <ResourceDictionary Source="../DataPresenterBrushes/DataPresenterIGTheme_Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- _________________________ FixedButton ______________________________________ -->
    <Style TargetType="{x:Type igDP:FixedFieldButton}">
        <Style.Resources>
            <Style TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <igWindows:CardPanel Background="{TemplateBinding Background}">
                                <ContentPresenter/>
                            </igWindows:CardPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type Menu}">
                <Setter Property="Background" Value="{StaticResource Brush_1009}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Menu}">
                            <Grid x:Name="Bd" Grid.IsSharedSizeScope="True">
                                <StackPanel IsItemsHost="True" ClipToBounds="True" VerticalAlignment="Center"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonBackgroundHover}}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightBackgroundBrushFillKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightOuterBorderBrushFillKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="3,2,3,2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid Background="{StaticResource Brush_1010}">
                                <Border x:Name="Hover" Visibility="Collapsed" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                <Grid Margin="{TemplateBinding Padding}">
                                    <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentSource="Header" RecognizesAccessKey="True"/>
                                    <Popup x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="-2" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Focusable="False">
                                        <Border x:Name="SubMenuBorder" Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBackground}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBorder}}" BorderThickness="1">
                                            <Border Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupInnerBackground}}" CornerRadius="3" Margin="2">
                                                <ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}" CanContentScroll="True" Margin="1">
                                                    <ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
                                                </ScrollViewer>
                                            </Border>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Role" Value="SubmenuItem"/>
                                        <Condition Property="IsHighlighted" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Hover" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightTextBrushFillKey}}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="FixToFarEdgePrompt" Value="{Binding Path=Value, Source={x:Static igDP:Resources.FieldFixToFarEdgePrompt}}"/>
        <Setter Property="FixToNearEdgePrompt" Value="{Binding Path=Value, Source={x:Static igDP:Resources.FieldFixToNearEdgePrompt}}"/>
        <Setter Property="UnfixPrompt" Value="{Binding Path=Value, Source={x:Static igDP:Resources.FieldUnfixPrompt}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FixedFieldButton}">
                    <Border x:Name="bd" Background="{StaticResource Brush_1011}">
                        <igWindows:CardPanel>
                            <ToggleButton x:Name="toggleButton" Focusable="False" CommandParameter="{TemplateBinding Field}" Background="{StaticResource Brush_1012}">
                                <Grid>
                                    <Path
										x:Name="btnFixedGlyph"
										Visibility="Collapsed"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="10"
										Width="7"
										Stretch="Fill"
										Opacity="1"
										Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
										Fill="{TemplateBinding Foreground}" />
                                    <Path
										x:Name="btnUnfixedGlyph"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="7"
										Width="10"
										Stretch="Fill"
										Opacity="1"
										Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
										Fill="{TemplateBinding Foreground}" />
                                </Grid>
                            </ToggleButton>
                            <Menu x:Name="menu" Visibility="Collapsed" IsMainMenu="False">
                                <MenuItem Padding="0" VerticalAlignment="Center">
                                    <MenuItem.Header>
                                        <igWindows:CardPanel>
                                            <Grid Margin="3,0" VerticalAlignment="Center">
                                                <Path
													x:Name="menuFixedGlyph"
													Visibility="Collapsed"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="10"
													Width="7"
													Stretch="Fill"
													Opacity="1"
													Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
													Fill="{TemplateBinding Foreground}" />
                                                <Path
													x:Name="MenuUnfixedGlyph"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="7"
													Width="10"
													Stretch="Fill"
													Opacity="1"
													Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
													Fill="{TemplateBinding Foreground}" />
                                            </Grid>
                                        </igWindows:CardPanel>
                                    </MenuItem.Header>
                                    <MenuItem x:Name="unfix"   Header="{TemplateBinding UnfixPrompt}"			Command="igDP:DataPresenterCommands.UnfixField" CommandParameter="{TemplateBinding Field}"/>
                                    <MenuItem x:Name="fixNear" Header="{TemplateBinding FixToNearEdgePrompt}"	Command="igDP:DataPresenterCommands.FixFieldNear" CommandParameter="{TemplateBinding Field}"/>
                                    <MenuItem x:Name="fixFar"  Header="{TemplateBinding FixToFarEdgePrompt}"	Command="igDP:DataPresenterCommands.FixFieldFar" CommandParameter="{TemplateBinding Field}"/>
                                </MenuItem>
                            </Menu>
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Set the correct image depending on the FixedLocation-->
                        <DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToNearEdge">
                            <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToFarEdge">
                            <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>

                        <!-- Show/hide the menu and the toggleButton -->
                        <DataTrigger Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="NearOrFar">
                            <Setter TargetName="menu" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>

                        <!-- If AllowFixingResolved is set to Near or set to Far, set the appropriate command on the toggleButton depending on the current FixedLocation -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="Near"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldNear"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToNearEdge">
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="Far"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldFar"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToFarEdge">
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField"/>
                        </DataTrigger>

                        <!-- If AllowFixingResolved is set to NearOrFar, hide/show the appropriate menu items depending on the current FixedLocation -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="NearOrFar"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="unfix" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="NearOrFar"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToNearEdge" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="fixNear" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="NearOrFar"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToFarEdge" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="fixFar" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ FixedRecordButton ______________________________________ -->
    <Style TargetType="{x:Type igDP:FixedRecordButton}">
        <Style.Resources>
            <Style TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <igWindows:CardPanel Background="{TemplateBinding Background}">
                                <ContentPresenter/>
                            </igWindows:CardPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type Menu}">
                <Setter Property="Background" Value="{StaticResource Brush_1013}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Menu}">
                            <Grid Grid.IsSharedSizeScope="True">
                                <StackPanel IsItemsHost="True" ClipToBounds="True"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightBackgroundBrushFillKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightOuterBorderBrushFillKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="3,2,3,2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid Background="{StaticResource Brush_1014}">
                                <Border x:Name="Hover" Visibility="Collapsed" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                <Grid Margin="{TemplateBinding Padding}">
                                    <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentSource="Header" RecognizesAccessKey="True"/>
                                    <Popup x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="-2" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Focusable="False">
                                        <Border x:Name="SubMenuBorder" Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBackground}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBorder}}" BorderThickness="1">
                                            <ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}" CanContentScroll="True" Margin="1">
                                                <ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
                                            </ScrollViewer>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Role" Value="SubmenuItem"/>
                                        <Condition Property="IsHighlighted" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Hover" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightTextBrushFillKey}}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="FixToBottomPrompt" Value="{Binding Path=Value, Source={x:Static igDP:Resources.RecordFixToBottomPrompt}}"/>
        <Setter Property="FixToTopPrompt" Value="{Binding Path=Value, Source={x:Static igDP:Resources.RecordFixToTopPrompt}}"/>
        <Setter Property="UnfixPrompt" Value="{Binding Path=Value, Source={x:Static igDP:Resources.RecordUnfixPrompt}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedRecordGlyphBrush}}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FixedRecordButton}">
                    <Border Background="{StaticResource Brush_1015}">
                        <igWindows:CardPanel>
                            <!-- Set the background to transparent so it is Hit Testable.  This will ensure that the button receives mouse clicks and the associated command is executed even when the user does not click directly on the embedded Path elements. -->
                            <ToggleButton x:Name="toggleButton" Focusable="False" CommandParameter="{Binding}" Background="{StaticResource Brush_1016}">
                                <Grid>
                                    <Path
										x:Name="btnFixedGlyph"
										Visibility="Collapsed"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="10"
										Width="7"
										Stretch="Fill"
										Opacity="1"
										Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
										Fill="{TemplateBinding Foreground}" />
                                    <Path
										x:Name="btnUnfixedGlyph"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="7"
										Width="10"
										Stretch="Fill"
										Opacity="1"
										Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
										Fill="{TemplateBinding Foreground}" />
                                </Grid>
                            </ToggleButton>

                            <Menu x:Name="menu" Visibility="Collapsed" IsMainMenu="False">
                                <MenuItem Padding="0">
                                    <MenuItem.Header>
                                        <igWindows:CardPanel>
                                            <Grid Width="12" Height="12">
                                                <Path
													x:Name="menuFixedGlyph"
													Visibility="Collapsed"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="10"
													Width="7"
													Stretch="Fill"
													Opacity="1"
													Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
													Fill="{TemplateBinding Foreground}" />
                                                <Path
													x:Name="MenuUnfixedGlyph"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="7"
													Width="10"
													Stretch="Fill"
													Opacity="1"
													Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
													Fill="{TemplateBinding Foreground}" />
                                            </Grid>
                                        </igWindows:CardPanel>
                                    </MenuItem.Header>
                                    <MenuItem x:Name="unfix"   Header="{TemplateBinding UnfixPrompt}"		Command="igDP:DataPresenterCommands.UnfixRecord" CommandParameter="{Binding}"/>
                                    <MenuItem x:Name="fixTop" Header="{TemplateBinding FixToTopPrompt}"	Command="igDP:DataPresenterCommands.FixRecordTop" CommandParameter="{Binding}"/>
                                    <MenuItem x:Name="fixBottom"  Header="{TemplateBinding FixToBottomPrompt}"	Command="igDP:DataPresenterCommands.FixRecordBottom" CommandParameter="{Binding}"/>
                                </MenuItem>
                            </Menu>
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Set the correct image depending on the FixedLocation-->
                        <DataTrigger Binding="{Binding Path=FixedLocation}" Value="FixedToTop">
                            <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=FixedLocation}" Value="FixedToBottom">
                            <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>

                        <!-- Show/hide the menu and the toggleButton -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFixedOnTopAllowed" Value ="True"/>
                                <Condition Property="IsFixedOnBottomAllowed" Value ="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="menu" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>

                        <!-- If AllowRecordFixingResolved is set to Top or set to Bottom, set the appropriate command on the toggleButton depending on the current FixedLocation -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixRecordTop"/>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding Path=FixedLocation}" Value="FixedToTop">
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixRecord"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=FixedLocation}" Value="FixedToBottom">
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixRecord"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixRecordBottom"/>
                        </MultiDataTrigger>

                        <!-- If AllowRecordFixingResolved is set to TopOrBottom, hide/show the appropriate menu items depending on the current FixedLocation -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="unfix" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="FixedToTop" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="fixTop" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="FixedToBottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="fixBottom" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igDP:CardHeaderPresenter}">
        <Setter Property="MinHeight"
                Value="{DynamicResource {x:Static SystemParameters.SmallCaptionHeightKey}}" />
        <Setter Property="TextBlock.TextTrimming"
                Value="CharacterEllipsis" />
        <Setter Property="Background"
                Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundNormalBrushKey}}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBorderBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="0,1" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextNormalBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CardHeaderPresenter}">
                    <Grid>
                        <Border x:Name="Bd"
                                Background="{TemplateBinding Background}"
                                CornerRadius="2,2,0,0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="CardHeader"
                                                  Content="{TemplateBinding Content}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Stretch"
                                                  Margin="5,0" />
                                <Border BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardChromeBorderBrushKey}}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Grid.ColumnSpan="3"
                                        CornerRadius="2,2,0,0" />
                                <!-- Button to Collapse/Uncollapse Empty Cells -->
                                <Button x:Name="ToggleEmptyCellsCollapsedStateButton"
                                        Command="{x:Static igDP:DataPresenterCommands.ToggleEmptyCardCellsCollapsedState}"
                                        CommandParameter="{Binding}"
                                        Visibility="{Binding Path=Card.CollapseEmptyCellsButtonVisibility, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}"
                                        Margin="2,0"
                                        Grid.Column="1"
                                        Style="{DynamicResource {x:Static igDP:CardHeaderPresenter.CollapseEmptyCellsButtonStyleKey}}" />
                                <!-- Button to Collapse/Uncollapse the Card -->
                                <Button x:Name="ToggleCollapsedStateButton"
                                        Command="{x:Static igDP:DataPresenterCommands.ToggleCardCollapsedState}"
                                        CommandParameter="{Binding}"
                                        Visibility="{Binding Path=Card.CollapseCardButtonVisibility, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}"
                                        Margin="2,0,5,0"
                                        Grid.Column="2"
                                        Style="{DynamicResource {x:Static igDP:CardHeaderPresenter.CollapseCardButtonStyleKey}}" />
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsActive, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                         Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                               Value="True" />
                    <Condition Binding="{Binding Path=IsAddRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="FontWeight"
                            Value="Bold" />
                    <Setter Property="Background"
                            Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
                    <Setter Property="Foreground"
                            Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                               Value="True" />
                    <Condition Binding="{Binding Path=IsAddRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                               Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background"
                            Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
                    <Setter Property="Foreground"
                            Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <!--<DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                             Value="True">
                    <Setter Property="Background"
                            Value="{StaticResource Brush_026}" />
                            Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
                    <Setter Property="Foreground"
                            Value="{StaticResource Brush_027}" />
                            Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
                </DataTrigger>-->
            <!--<DataTrigger Binding="{Binding Path=IsAddRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                             Value="True">
                    <Setter Property="FontWeight"
                            Value="Bold" />
                </DataTrigger>-->
            <DataTrigger Binding="{Binding Path=IsFilterRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                         Value="True">
                <Setter Property="FontWeight"
                        Value="Bold" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type igDP:CardViewCard}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBackgroundBrushKey}}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBorderBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Visibility"
                Value="{Binding Path=VisibilityResolved}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CardViewCard}">
                    <Border x:Name="Bd"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="2">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <!-- Element to simulate CardHeaderPresenter when HeaderVisibilty=Hidden -->
                            <Border x:Name="HeaderBgWhenVisHidden"
                                    Background="{Binding ElementName=CardHeaderPresenter,Path=Background}"
                                    Visibility="Collapsed"
                                    CornerRadius="2,2,0,0" />
                            <!-- Card Header -->
                            <igDP:CardHeaderPresenter x:Name="CardHeaderPresenter"
                                                     Content="{Binding Path=Header, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                                     ContentTemplate="{Binding Path=HeaderTemplate, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                                     ContentTemplateSelector="{Binding Path=HeaderTemplateSelector, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                                     Visibility="{Binding Path=HeaderVisibility, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                                     Card="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Rectangle x:Name="captionStroke"
                                       Fill="{TemplateBinding BorderBrush}"
                                       Height="1"
                                       Grid.Row="1" />
                            <Rectangle x:Name="outerBd"
                                       Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardChromeBorderBrushKey}}"
                                       Grid.Row="2" />
                            <Border x:Name="innerBd"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1,0,1,1"
                                    Grid.Row="2"
                                    Margin="1,0,1,1">
                                <!-- Card Content -->
                                <ScrollViewer x:Name="CardContentScrollViewer"
                                              Focusable="False"
                                              CanContentScroll="False"
                                              HorizontalScrollBarVisibility="Auto"
                                              VerticalScrollBarVisibility="Auto">
                                    <ContentControl x:Name="CardContent"
                                                    Content="{TemplateBinding Content}"
                                                    ContentTemplate="{TemplateBinding ContentTemplate}" />
                                </ScrollViewer>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsCollapsed"
                                 Value="True">
                            <Setter TargetName="innerBd"
                                    Property="Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="Bd"
                                    Property="VerticalAlignment"
                                    Value="Top" />
                            <Setter TargetName="captionStroke"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HeaderVisibility"
                                 Value="Collapsed">
                            <Setter TargetName="captionStroke"
                                    Property="Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="innerBd"
                                    Property="Margin"
                                    Value="1" />
                            <Setter TargetName="innerBd"
                                    Property="BorderThickness"
                                    Value="1" />
                        </Trigger>
                        <Trigger Property="HeaderVisibility"
                                 Value="Hidden">
                            <Setter TargetName="HeaderBgWhenVisHidden"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelected"
                                 Value="True" />
                        <Trigger Property="IsActive"
                                 Value="True" />
                        <Trigger Property="IsFilterRecord"
                                 Value="True">
                            <Setter TargetName="CardHeaderPresenter"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordHeaderBrushKey}}" />
                            <Setter TargetName="outerBd"
                                    Property="Fill"
                                    Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordCardChromeBrushKey}}" />
                            <Setter TargetName="CardHeaderPresenter"
                                    Property="Foreground"
                                    Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- AS 7/8/11 Excel Style Filtering -->
    <Style x:Key="RootMenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource Brush_1018}"/>
        <Setter Property="IsMainMenu" Value="False"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <igWindows:CardPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- AS 7/8/11 Excel Style Filtering -->
    <ControlTemplate x:Key="subMenuItemTemplate" TargetType="{x:Type igDP:FieldMenuItem}">
        <igWindows:CardPanel Background="{StaticResource Brush_1019}">
            <Border x:Name="Highlight" BorderThickness="1" CornerRadius="2" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackOuterBorderBrushKey}}" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackInnerBorderBrushKey}}" SnapsToDevicePixels="True" Margin="1" Visibility="Collapsed">
                <Border x:Name="HighlightInner" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackFillBrushKey}}" CornerRadius="1"/>
            </Border>
            <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconArea"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <!-- Icon Area Background -->
                <Border x:Name="IconAreaBackground" Grid.Column="0" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemIconAreaBrushKey}}" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemIconAreaBorderBrushKey}}" BorderThickness="0,0,1,0" Margin="-2,-2,-2,-2"/>
                <!-- Icon Area -->
                <Border x:Name="IconArea" Grid.Column="0" Margin="0,-1,0,-1">
                    <Border x:Name="OrangeCheckBox" SnapsToDevicePixels="True" BorderThickness="1" CornerRadius="2" HorizontalAlignment="Center" VerticalAlignment="Center" Padding="1">
                        <igWindows:CardPanel Width="16" Height="16">
                            <!-- Small check mark -->
                            <igWindows:CardPanel x:Name="GlyphPanel" Visibility="Collapsed" FlowDirection="LeftToRight" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <igWindows:CardPanel SnapsToDevicePixels="True" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Path Margin="0.946,0.008,0,0" Height="11.069" Width="7.026" Stretch="Fill" Data="M 27.9883975982666,68.03516387939453 C27.9883975982666,68.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.01433563232422,61.019805908203125 35.01433563232422,61.019805908203125 " Stroke="{StaticResource Brush_1028}" StrokeThickness="1"/>
                                    <Path Margin="-0.054,0.393,0,0" Height="10.684" Width="8.459" Stretch="Fill" Opacity="1" Data="M 26.9883975982666,67.03516387939453 C26.9883975982666,67.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.44744110107422,61.404788970947266 35.44744110107422,61.404788970947266 " Stroke="{StaticResource Brush_1029}" StrokeThickness="1"/>
                                    <Path Margin="0.946,0.008,0,0" Height="9.069" Width="6.026" Stretch="Fill" Opacity="1" Data="M 27.9883975982666,68.03516387939453 C27.9883975982666,68.03516387939453 30.490787506103516,70.08806610107422 30.490787506103516,70.08806610107422 30.490787506103516,70.08806610107422 34.01433563232422,61.019805908203125 34.01433563232422,61.019805908203125 " Stroke="{StaticResource Brush_1030}" StrokeThickness="1"/>
                                    <Path Margin="0.946,0.393,0,0" Height="10.684" Width="7.459" Stretch="Fill" Opacity="1" Data="M 27.9883975982666,67.03516387939453 C27.9883975982666,67.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.44744110107422,61.404788970947266 35.44744110107422,61.404788970947266 " Stroke="{StaticResource Brush_1031}" StrokeThickness="1"/>
                                    <Path Margin="0.75,0.24,0,0" Height="9.862" Width="6.785" Stretch="Fill" Stroke="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemCheckMarkStrokeBrushKey}}" Data="M27.561812,66.880152 C27.561812,66.880152 30.275803,71.118003 30.275803,71.118003 30.275803,71.118003 34.457825,61.276845 34.457825,61.276845" StrokeThickness="1"/>
                                    <Path Height="9.899" Width="6.908" Stretch="Fill" Data="M27.616231,66.205115 C27.616231,66.205115 30.445511,71.297952 30.445511,71.297952 30.445511,71.297952 34.499006,61.29204 34.499006,61.29204" Stroke="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemCheckMarkStrokeBrushKey}}" StrokeThickness="1" Margin="0.627,0.363,0,0"/>
                                </igWindows:CardPanel>
                            </igWindows:CardPanel>
                            <!-- icon -->
                            <igWindows:AutoDisabledImage x:Name="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{Binding ImageSource}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </igWindows:CardPanel>
                    </Border>
                </Border>
                <!-- Header -->
                <ContentPresenter x:Name="Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" Margin="7,0,0,0" Grid.Column="2"/>
                <!-- Separator Line -->
                <Rectangle x:Name="Separator" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemSeparatorBrushKey}}" Height="1" Grid.Column="2" Grid.ColumnSpan="2"/>
                <!-- Glyph Arrow-->
                <Grid x:Name="Menu_Arrow" Margin="7,0,5,0" Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed">
                    <Path x:Name="Glyph_Arrow" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemDropDownArrowBrushKey}}" SnapsToDevicePixels="True" Stretch="None" Data="M0,0L0,7 4,3.5z" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center"/>
                </Grid>
            </Grid>
            <!-- Popup -->
            <Popup Name="PART_Popup" AllowsTransparency="true" Placement="Right" Focusable="false" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <AdornerDecorator>
                    <Border CornerRadius="1" BorderThickness="1" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemPopupOuterBorderBrushKey}}" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemPopupFillBrushKey}}">
                        <igWindows:PopupResizerDecorator x:Name="resizeDecorator" Grid.IsSharedSizeScope="true">
                            <igWindows:XamPager CanContentScroll="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                                <ItemsPresenter Grid.ColumnSpan="2" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </igWindows:XamPager>
                        </igWindows:PopupResizerDecorator>
                    </Border>
                </AdornerDecorator>
            </Popup>
        </igWindows:CardPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="OrangeCheckBox" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemIsCheckedFillBrushKey}}"/>
                <Setter TargetName="OrangeCheckBox" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemIsCheckedBorderBrushKey}}"/>
            </Trigger>
            <DataTrigger Binding="{Binding HasResizableItems}" Value="True">
                <Setter TargetName="resizeDecorator" Property="ResizeMode" Value="Both"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsResizable}" Value="True">
                <Setter TargetName="IconArea" Property="VerticalAlignment" Value="Top"/>
            </DataTrigger>
            <Trigger Property="IsSubmenuOpen" Value="False">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter TargetName="Menu_Arrow" Property="Visibility" Value="Visible"/>
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsSeparator}" Value="True">
                <Setter TargetName="IconArea" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="Header" Property="Grid.Column" Value="2"/>
                <Setter TargetName="Menu_Arrow" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="Separator" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Separator" Property="Margin" Value="3,0,0,0"/>
            </DataTrigger>
            <Trigger Property="HasHeader" Value="False">
                <Setter TargetName="Separator" Property="Margin" Value="7,0,0,0"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsHighlighted, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <!-- Don't highlight items like the tree -->
                    <Condition Binding="{Binding IsControlHost}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="Highlight" Property="Visibility" Value="Visible"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemIconAreaBrushKey}}"/>
                <Setter TargetName="Glyph_Arrow" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackDropDownArrowBrushKey}}"/>
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                <Setter TargetName="Glyph_Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Icon" Property="Source" Value="{x:Null}"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- AS 7/8/11 Excel Style Filtering -->
    <!-- Custom MenuItem to be used with FieldMenuDataItem -->
    <Style TargetType="{x:Type igDP:FieldMenuItem}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemForegroundBrushKey}}"/>
        <Setter Property="CommandParameter" Value="{Binding CommandParameter}"/>
        <!-- Note make sure to set the command after the command parameter since menu items only re-evaluate the canexecute when the command changes -->
        <Setter Property="Command" Value="{Binding Command}"/>
        <Setter Property="IsChecked" Value="{Binding IsChecked}"/>
        <Setter Property="IsCheckable" Value="{Binding IsCheckable}"/>
        <Setter Property="Header" Value="{Binding Header}"/>
        <Setter Property="Icon" Value="{Binding ImageSource}"/>
        <Setter Property="ItemsSource" Value="{Binding Items}"/>
        <Setter Property="StaysOpenOnClick" Value="{Binding StaysOpenOnClick}"/>
        <Setter Property="igWindows:PopupResizerStackPanel.IsResizable" Value="{Binding IsResizable}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template" Value="{StaticResource subMenuItemTemplate}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <igWindows:PopupResizerStackPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource topLevelMenuItemTemplate}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource topLevelMenuItemTemplate}"/>
            </Trigger>
            <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsResizable}" Value="True">
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- AS 7/8/11 Excel Style Filtering -->
    <ControlTemplate x:Key="excelFilterButtonTemplate" TargetType="{x:Type igDP:FilterButton}">
        <ControlTemplate.Resources>
        </ControlTemplate.Resources>
        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
            <Menu SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{StaticResource RootMenuStyle}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <igDP:FieldMenuItem x:Name="PART_FilterMenu" IsSubmenuOpen="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
                    <igDP:FieldMenuItem.DataContext>
                        <!-- This is a temporary item to avoid binding errors before its hooked up -->
                        <igDP:FieldMenuDataItem/>
                    </igDP:FieldMenuItem.DataContext>
                    <igDP:FieldMenuItem.Header>
                        <igWindows:AutoDisabledImage x:Name="BtnImage" Stretch="None" igWindows:Utilities.SnapElementToDevicePixels="True" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <igWindows:AutoDisabledImage.Source>
                                <BitmapImage UriSource="..\..\Images\Filter.png"/>
                            </igWindows:AutoDisabledImage.Source>
                        </igWindows:AutoDisabledImage>
                    </igDP:FieldMenuItem.Header>
                </igDP:FieldMenuItem>
            </Menu>
        </Border>
    </ControlTemplate>

    <!--JJD 1/06/09 RecordFiltering Feature -->
    <!-- _________________________ FilterButton ______________________________________ -->
    <!-- AS 7/8/11 Excel Style Filtering - Moved FilterButton Style to a base style -->
    <Style x:Key="FilterButtonStyleBase" TargetType="{x:Type igDP:FilterButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{StaticResource Brush_1020}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FilterButton}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" IsHitTestVisible="True">
                        <igWindows:CardPanel IsHitTestVisible="False" Margin="{TemplateBinding Padding}">
                            <igWindows:AutoDisabledImage x:Name="BtnImage" Stretch="None" igWindows:Utilities.SnapElementToDevicePixels="True" VerticalAlignment="{TemplateBinding HorizontalContentAlignment}" HorizontalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <igWindows:AutoDisabledImage.Source>
                                    <BitmapImage UriSource="..\..\Images\Filter.png"/>
                                </igWindows:AutoDisabledImage.Source>
                            </igWindows:AutoDisabledImage>
                            <editors:XamComboEditor MinDropDownWidth="150" DropDownResizeMode="None" Opacity="0" ItemsSource="{Binding Path=Operands, RelativeSource={RelativeSource TemplatedParent}}" SelectedItem="{Binding Path=SelectedOperand, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDropDownOpen="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="1" Height="{Binding Path=ActualHeight, ElementName=BtnImage}"/>
                        </igWindows:CardPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="DropDownType" Value="MultiSelectExcelStyle">
                <Setter Property="Template" Value="{StaticResource excelFilterButtonTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- _________________________ FilterButton ______________________________________ -->
    <!-- AS 7/8/11 Excel Style Filtering - Moved FilterButton Style to a base style -->
    <Style TargetType="{x:Type igDP:FilterButton}" BasedOn="{StaticResource FilterButtonStyleBase}">
        <Setter Property="Padding" Value="3,0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonBackgroundHover}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
