<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
	mc:Ignorable="d"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:editors="http://infragistics.com/Editors"
	xmlns:igDP="clr-namespace:Infragistics.Windows.DataPresenter">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="DataPresenterGeneric.xaml"/>
		<ResourceDictionary Source="../DataPresenterBrushes/DataPresenterLunaNormal_Brushes.xaml"/>
	</ResourceDictionary.MergedDictionaries>

	<!--JM 1/14/09 FixedFields Feature -->
	<!--HC 1/19/09 Theme-Specific Addition -->
	<!-- _________________________ FixedButton ______________________________________ -->
	<Style TargetType="{x:Type igDP:FixedFieldButton}">
		<Style.Resources>
			<Style TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<igWindows:CardPanel Background="{TemplateBinding Background}">
								<ContentPresenter/>
							</igWindows:CardPanel>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style TargetType="{x:Type Menu}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderThickness" Value="0"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Menu}">
							<Grid Grid.IsSharedSizeScope="True">
								<StackPanel IsItemsHost="True" ClipToBounds="True"/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style TargetType="{x:Type MenuItem}">
				<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightBackgroundBrushFillKey}}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightOuterBorderBrushFillKey}}"/>
				<Setter Property="Padding" Value="3,2,3,2"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type MenuItem}">
							<ControlTemplate.Resources>
								<Storyboard x:Key="Hover">
									<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
										<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>
								<Storyboard x:Key="HoverOff">
									<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
										<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>
							</ControlTemplate.Resources>
							<Grid>
								<Border x:Name="Hover" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0"/>
								<Grid Margin="{TemplateBinding Padding}">
									<!-- JM 03-06-09 TFS15005 - Cannot use 3.5 SP1 feature ContentStringFormat!!  (plus, there is no need to use this here anyway since ContentSource is being set) -->
									<!--<ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="True"/>-->
									<ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentSource="Header" RecognizesAccessKey="True"/>
									<Popup x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="-2" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Focusable="False">
									<Border x:Name="SubMenuBorder" Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBackground}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBorder}}" BorderThickness="1">
										<ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}" CanContentScroll="True" Margin="2">
											<ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
										</ScrollViewer>
									</Border>
								</Popup>
								</Grid>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsSuspendingPopupAnimation" Value="True">
									<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="Role" Value="SubmenuItem"/>
										<Condition Property="IsHighlighted" Value="True"/>
									</MultiTrigger.Conditions>
									<MultiTrigger.EnterActions>
										<BeginStoryboard x:Name="Hover_BeginStoryboard" Storyboard="{StaticResource Hover}"/>
									</MultiTrigger.EnterActions>
									<MultiTrigger.ExitActions>
										<BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
									</MultiTrigger.ExitActions>
									<Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightTextBrushFillKey}}"/>
								</MultiTrigger>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</Style.Resources>
        <Setter Property="FixToFarEdgePrompt" Value="{Binding Path=Value, Source={x:Static igDP:Resources.FieldFixToFarEdgePrompt}}"/>
        <Setter Property="FixToNearEdgePrompt" Value="{Binding Path=Value, Source={x:Static igDP:Resources.FieldFixToNearEdgePrompt}}"/>
        <Setter Property="UnfixPrompt" Value="{Binding Path=Value, Source={x:Static igDP:Resources.FieldUnfixPrompt}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonForeground}}"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:FixedFieldButton}">
					<Border Background="Transparent">
						<igWindows:CardPanel>
							<!-- JM 01-29-09 TFS13209 - Set the background to transparent so it is Hit Testable.  This will ensure that the button receives mouse clicks and the associated command is executed even when the user does not click directly on the embedded Path elements. -->
              <!-- JJD 3/16/11 - TFS24163
                      instead of using routed commands set in triggers that incur quite a bit of overhead,
                      bind to the new CurrentCommand property that
                      returns a non-routed command that is much more efficient -->
              <ToggleButton x:Name="toggleButton"
                            Focusable="False"
                            Command="{TemplateBinding CurrentCommand}"
                            CommandParameter="{TemplateBinding Field}"
                            Background="Transparent">
								<Grid Width="12" Height="12">
									<Path
										x:Name="btnFixedGlyph"
										Visibility="Collapsed"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="10"
										Width="7"
										Stretch="Fill"
										Opacity="1"
										Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
										Fill="{TemplateBinding Foreground}" />
									<Path
										x:Name="btnUnfixedGlyph"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="7"
										Width="10"
										Stretch="Fill"
										Opacity="1"
										Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
										Fill="{TemplateBinding Foreground}" />
								</Grid>
							</ToggleButton>

							<Menu x:Name="menu" Visibility="Collapsed" IsMainMenu="False">
								<MenuItem Padding="0">
									<MenuItem.Header>
										<igWindows:CardPanel>
											<Grid Width="12" Height="12">
												<Path
													x:Name="menuFixedGlyph"
													Visibility="Collapsed"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="10"
													Width="7"
													Stretch="Fill"
													Opacity="1"
													Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
													Fill="{TemplateBinding Foreground}" />
												<Path
													x:Name="MenuUnfixedGlyph"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="7"
													Width="10"
													Stretch="Fill"
													Opacity="1"
													Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
													Fill="{TemplateBinding Foreground}" />
											</Grid>
										</igWindows:CardPanel>
									</MenuItem.Header>
                  <!-- JJD 3/16/11 - TFS24163
                      instead of using routed commands that incur quite a bit of overhead, bind to the new command properties that
                      return non-routed commands that are much more efficient
									<MenuItem x:Name="unfix"   Header="{TemplateBinding UnfixPrompt}"			Command="igDP:DataPresenterCommands.UnfixField" CommandParameter="{TemplateBinding Field}"/>
									<MenuItem x:Name="fixNear" Header="{TemplateBinding FixToNearEdgePrompt}"	Command="igDP:DataPresenterCommands.FixFieldNear" CommandParameter="{TemplateBinding Field}"/>
									<MenuItem x:Name="fixFar"  Header="{TemplateBinding FixToFarEdgePrompt}"	Command="igDP:DataPresenterCommands.FixFieldFar" CommandParameter="{TemplateBinding Field}"/> -->
                  <MenuItem x:Name="unfix"   Header="{TemplateBinding UnfixPrompt}"			Command="{TemplateBinding UnfixCommand}" CommandParameter="{TemplateBinding Field}"/>
                  <MenuItem x:Name="fixNear" Header="{TemplateBinding FixToNearEdgePrompt}"	Command="{TemplateBinding FixToNearEdgeCommand}" CommandParameter="{TemplateBinding Field}"/>
                  <MenuItem x:Name="fixFar"  Header="{TemplateBinding FixToFarEdgePrompt}"	Command="{TemplateBinding FixToFarEdgeCommand}" CommandParameter="{TemplateBinding Field}"/>
                </MenuItem>
							</Menu>
						</igWindows:CardPanel>
					</Border>
					<ControlTemplate.Triggers>
						<!-- Set the correct image depending on the FixedLocation-->
						<DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToNearEdge">
							<Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToFarEdge">
							<Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>

						<!-- Show/hide the menu and the toggleButton -->
						<DataTrigger Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="NearOrFar">
							<Setter TargetName="menu" Property="Visibility" Value="Visible"/>
							<Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>

            <!-- JJD 3/16/11 - TFS24163
                      instead of using routed commands set in triggers that incur quite a bit of overhead,
                      bind to the new command properties that
                      returns a non-routed command that is much more efficient -->
            <!-- If AllowFixingResolved is set to Near or set to Far, set the appropriate command on the toggleButton depending on the current FixedLocation -->
						<!--<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="Near"/>
								<Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldNear"/>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToNearEdge">
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField"/>
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="Far"/>
								<Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldFar"/>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToFarEdge">
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField"/>
						</DataTrigger>-->

						<!-- If AllowFixingResolved is set to NearOrFar, hide/show the appropriate menu items depending on the current FixedLocation -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="NearOrFar"/>
								<Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="unfix" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="NearOrFar"/>
								<Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToNearEdge" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="fixNear" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="NearOrFar"/>
								<Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToFarEdge" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="fixFar" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>