using System;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.Windows.Data;
using Infragistics.Controls.Editors.Primitives;
using System.ComponentModel;

namespace Infragistics.Controls.Editors
{
    /// <summary>
    /// An abstract objet that represents a field in the underlying data of whats bound to the <see cref="XamMultiColumnComboEditor"/>
    /// </summary>

	[InfragisticsFeature(FeatureName = FeatureInfo.FeatureName_MultiColumnCombo, Version = FeatureInfo.Version_11_2)]

	public abstract class ComboColumn : DependencyObjectNotifier
    {
        #region Members

        double _actualWidth;
		DataTemplate _headerTemplate;
		Style _headerStyle;
        bool _isFixable;
        ComboColumnFixedState _isFixed;

        #endregion // Memberes

        #region Properties

        #region Public

        #region Key

        /// <summary>
        /// Identifies the <see cref="Key"/> dependency property. 
        /// </summary>
        public static readonly DependencyProperty KeyProperty = DependencyProperty.Register("Key", typeof(string), typeof(ComboColumn), new PropertyMetadata(new PropertyChangedCallback(KeyChanged)));

        /// <summary>
        /// Gets/sets a string that identifies the <see cref="ComboColumn"/>.
        /// </summary>
        public string Key
        {
            get { return (string)this.GetValue(KeyProperty); }
            set { this.SetValue(KeyProperty, value); }
        }

        private static void KeyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
        {

        }

        #endregion // Key

        #region DataType
        /// <summary>
        /// The DataType that the column's data is derived from.
        /// </summary>
        public virtual Type DataType
        {
            get;
            protected internal set;
        }
        #endregion

        #region IsAutoGenerated

        /// <summary>
        /// Gets whether or not the <see cref="ComboColumn"/> was predefined, or generated by the <see cref="XamMultiColumnComboEditor"/> based on the 
        /// underlying data. 
        /// </summary>
        public bool IsAutoGenerated
        {
            get;
            protected internal set;
        }

        #endregion // IsAutoGenerated

        #region ValueConverter

        /// <summary>
        /// Identifies the <see cref="ValueConverter"/> dependency property. 
        /// </summary>
        public static readonly DependencyProperty ValueConverterProperty = DependencyProperty.Register("ValueConverter", typeof(IValueConverter), typeof(ComboColumn), new PropertyMetadata(new PropertyChangedCallback(ValueConverterChanged)));

        /// <summary>
        /// Gets/sets the <see cref="IValueConverter"/> that will be used to display the value in the column.
        /// </summary>
        public IValueConverter ValueConverter
        {
            get { return (IValueConverter)this.GetValue(ValueConverterProperty); }
            set { this.SetValue(ValueConverterProperty, value); }
        }

        private static void ValueConverterChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
        {
          
        }

        #endregion // ValueConverter

        #region ValueConverterParameter

        /// <summary>
        /// Identifies the <see cref="ValueConverterParameter"/> dependency property. 
        /// </summary>
        public static readonly DependencyProperty ValueConverterParameterProperty = DependencyProperty.Register("ValueConverterParameter", typeof(object), typeof(ComboColumn), new PropertyMetadata(new PropertyChangedCallback(ValueConverterParameterChanged)));

        /// <summary>
        /// Gets/sets the parameter that will be used with the <see cref="ValueConverter"/> property.
        /// </summary>
        public object ValueConverterParameter
        {
            get { return (object)this.GetValue(ValueConverterParameterProperty); }
            set { this.SetValue(ValueConverterParameterProperty, value); }
        }

        private static void ValueConverterParameterChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
        {
         
        }

        #endregion // ValueConverterParameter

        #region CellStyle

        /// <summary>
        /// Gets/Sets the <see cref="Style"/> that will be used for all <see cref="ComboCellControl"/> objects on this <see cref="ComboColumn"/>.
        /// </summary>
        public Style CellStyle
        {
            get;
            set;
        }

        #endregion // CellStyle

        #region ActualWidth
        /// <summary>
        /// Gets the Actual width of the column. 
        /// </summary>
        /// <remarks>Note: this value is only available when the column is rendered.</remarks>
        public double ActualWidth
        {
            get
            {
                return this._actualWidth;
            }
            internal set
            {
                if (this._actualWidth != value)
                {
                    this._actualWidth = value;
                    this.OnPropertyChanged("ActualWidth");
                }
            }
        }
        #endregion // ActualWidth

        #region MinimumWidth

        /// <summary>
        /// Identifies the <see cref="MinimumWidth"/> dependency property. 
        /// </summary>
        public static readonly DependencyProperty MinimumWidthProperty = DependencyProperty.Register("MinimumWidth", typeof(double), typeof(ComboColumn), new PropertyMetadata(0.0, new PropertyChangedCallback(MinimumWidthChanged)));

        /// <summary>
        /// Gets/sets the minimum width the column is allowed to be.
        /// </summary>
        public virtual double MinimumWidth
        {
            get { return (double)this.GetValue(MinimumWidthProperty); }
            set { this.SetValue(MinimumWidthProperty, value); }
        }

        private static void MinimumWidthChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
        {
            ComboColumn cb = (ComboColumn)obj;
            cb.OnPropertyChanged("MinimumWidth");
        }

        #endregion // MinimumWidth

        #region MaximumWidth

        /// <summary>
        /// Identifies the <see cref="MaximumWidth"/> dependency property. 
        /// </summary>
        public static readonly DependencyProperty MaximumWidthProperty = DependencyProperty.Register("MaximumWidth", typeof(double), typeof(ComboColumn), new PropertyMetadata(Double.PositiveInfinity, new PropertyChangedCallback(MaximumWidthChanged)));

        /// <summary>
        /// Gets/sets the maximum width the column is allowed to be.
        /// </summary>
        public virtual double MaximumWidth
        {
            get { return (double)this.GetValue(MaximumWidthProperty); }
            set { this.SetValue(MaximumWidthProperty, value); }
        }

        private static void MaximumWidthChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
        {
            ComboColumn cb = (ComboColumn)obj;
            cb.OnPropertyChanged("MaximumWidth");
        }

        #endregion // MaximumWidth

		#region HeaderText

		/// <summary>
		/// Identifies the <see cref="HeaderText"/> dependency property. 
		/// </summary>
		public static readonly DependencyProperty HeaderTextProperty = DependencyProperty.Register("HeaderText", typeof(string), typeof(ComboColumn), new PropertyMetadata(new PropertyChangedCallback(HeaderTextChanged)));

		/// <summary>
		/// Gets/Sets the text that will be displayed in the Header.
		/// </summary>
		/// <remarks>If the <see cref="ComboColumn.HeaderTemplate"/> is set, this property will have no effect.</remarks>
		public string HeaderText
		{
			get { return (string)this.GetValue(HeaderTextProperty); }
			set { this.SetValue(HeaderTextProperty, value); }
		}

		private static void HeaderTextChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
		{
			ComboColumn col = (ComboColumn)obj;

			col.OnPropertyChanged("HeaderText");
		}

		#endregion // HeaderText

		#region HeaderTextResolved

		/// <summary>
		/// Gets a string that describes the Column. If the HeaderText property is not set, the Column's Key is returned.
		/// </summary>
		public string HeaderTextResolved
		{
			get
			{
				if (string.IsNullOrEmpty(this.HeaderText))
					return this.Key;
				else
					return this.HeaderText;
			}
		}

		#endregion // HeaderTextResolved

		#region HeaderTemplate

		/// <summary>
		/// Gets/Sets the <see cref="DataTemplate"/> used to define the Content of the Header of the <see cref="ComboColumn"/>.
		/// </summary>
		public DataTemplate HeaderTemplate
		{
			get { return this._headerTemplate; }
			set
			{
				this._headerTemplate = value;
				this.OnPropertyChanged("HeaderTemplate");
			}
		}

		#endregion // HeaderTemplate

		#region HeaderStyle

		/// <summary>
		/// Gets/Sets the <see cref="Style"/> that will be used for all <see cref="ComboHeaderCellControl"/> objects on this <see cref="ComboColumn"/>.
		/// </summary>
		public Style HeaderStyle
		{
			get
			{
				return this._headerStyle;
			}
			set
			{
				if (this._headerStyle != value)
				{
					this._headerStyle = value;

					
					//this.OnStyleChanged();

					this.OnPropertyChanged("HeaderStyle");
				}
			}
		}

		#endregion // HeaderStyle

        #region Width

        /// <summary>
        /// Identifies the <see cref="Width"/> dependency property. 
        /// </summary>
		// JM 01-10-12 TFS98627 - Made the property public
		public static readonly DependencyProperty WidthProperty = DependencyProperty.Register("Width", typeof(ComboColumnWidth?), typeof(ComboColumn), new PropertyMetadata(null, new PropertyChangedCallback(WidthChanged)));

        /// <summary>
        /// Gets/sets the <see cref="ComboColumnWidth"/> of the <see cref="ComboColumn"/>
        /// </summary>
		// JM 01-10-12 TFS98627 - Added ComboColumnWidthTypeConverter attribute and made the property public.
		[TypeConverter(typeof(ComboColumnWidthTypeConverter))]
		[Bindable(true)]
		public virtual ComboColumnWidth? Width
        {
            get { return (ComboColumnWidth?)this.GetValue(WidthProperty); }
            set { this.SetValue(WidthProperty, value); }
        }

        private static void WidthChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
        {
            ComboColumn col = (ComboColumn)obj;
            col.ActualWidth = 0;
            col.OnPropertyChanged("Width");
        }

        #endregion // Width

        #region WidthResolved

        /// <summary>
        /// Resolves the <see cref="ComboColumnWidth"/> that is being applied to this <see cref="ComboColumn"/>
        /// </summary>
        internal virtual ComboColumnWidth WidthResolved
        {
            get
            {
                if (this.Width == null)
                    return this.ComboEditor.ColumnWidth;
                else
                    return (ComboColumnWidth)this.Width;
            }

        }

        #endregion // WidthResolved

        #region Visibility

        /// <summary>
        /// Identifies the <see cref="Visibility"/> dependency property. 
        /// </summary>
        public static readonly DependencyProperty VisibilityProperty = DependencyProperty.Register("Visibility", typeof(Visibility), typeof(ComboColumn), new PropertyMetadata(new PropertyChangedCallback(VisibilityChanged)));

        /// <summary>
        /// Gets/Sets the Visibility of the <see cref="ComboColumn"/>
        /// </summary>
        public Visibility Visibility
        {
            get { return (Visibility)this.GetValue(VisibilityProperty); }
            set { this.SetValue(VisibilityProperty, value); }
        }

        private static void VisibilityChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
        {
            ComboColumn col = (ComboColumn)obj;
            col.OnVisibilityChanged();

			// JM 9-27-11 TFS88306
			if (col.ComboEditor != null)
				col.ComboEditor.Columns.InvalidateColumnsCollections(true);
        }

        /// <summary>
        /// Raised when the Visiblity of a <see cref="ComboColumn"/> has changed.
        /// </summary>
        protected virtual void OnVisibilityChanged()
        {
            this.OnPropertyChanged("Visibility");
        }
        #endregion // Visibility

		#endregion // Public

		#region Protected

		#region DataField

		/// <summary>
        /// Gets/Sets the <see cref="DataField"/> associated with this particular <see cref="ComboColumn"/>
        /// </summary>
        protected internal DataField DataField
        {
            get;
            set;
        }

        #endregion // DataField

        #region ComboEditor

        /// <summary>
        /// Gets/sets the <see cref="XamMultiColumnComboEditor"/> that owns this Column
        /// </summary>
        protected internal XamMultiColumnComboEditor ComboEditor
        {
            get;
            set;
        }

        #endregion ComboEditor

        #endregion /// Protected

        #region Internal

        #region IsFixed

        /// <summary>
        /// Gets/Sets if a <see cref="ComboColumn"/> should be unpinned or pinned to the Left or Right side of the <see cref="XamMultiColumnComboEditor"/>.
        /// </summary>
        internal ComboColumnFixedState IsFixed
        {
            get { return this._isFixed; }
            set
            {
                if (this._isFixed != value)
                {
                    this.SetFixedColumnState(value);
                }
            }
        }

        #endregion // IsFixed

        #region IsFixable

        /// <summary>
        /// Gets/Sets if a Column can be fixed. 
        /// </summary>
        internal virtual bool IsFixable
        {
            get
            {
                return this._isFixable;
            }
            set
            {
                if (this._isFixable != value)
                {
                    this._isFixable = value;
                    this.OnPropertyChanged("IsFixable");
                }
            }
        }

        #endregion IsFixable

        internal bool IsInitialAutoSet
        {
            get;
            set;
        }

        #endregion // Internal

        #endregion // Properties

        #region Methods

        #region Protected

        #region GenerateCell

        /// <summary>
        /// Based on the type of row that is passed in, this method generates a new <see cref="ComboCellBase"/> object.
        /// </summary>
        /// <param propertyName="row">The row in which the cell should be created for.</param>
        /// <returns></returns>
        protected internal virtual ComboCellBase GenerateCell(ComboRowBase row)
        {
			switch (row.RowType)
			{
				case RowType.HeaderRow:
					return this.GenerateHeaderCell(row);
				default:
					return this.GenerateDataCell(row);
			}
        }

        #endregion // GenerateCell

		#region GenerateHeaderCell

		/// <summary>
		/// Returns a new instance of a <see cref="ComboHeaderCell"/>
		/// </summary>
		/// <param propertyName="row"></param>
		/// <returns></returns>
		protected virtual ComboHeaderCell GenerateHeaderCell(ComboRowBase row)
		{
			return new ComboHeaderCell(row, this);
		}

		#endregion // GenerateHeaderCell

		#region GenerateDataCell

		/// <summary>
		/// Returns a new instance of a <see cref="ComboCell"/>
		/// </summary>
		/// <param propertyName="row"></param>
		/// <returns></returns>
		protected virtual ComboCell GenerateDataCell(ComboRowBase row)
		{
			return new ComboCell(row, this);
		}

		#endregion // GenerateDataCell

		#region GenerateContentProvider

		/// <summary>
        /// Generates a new <see cref="ComboColumnContentProviderBase"/> that will be used to generate conent for <see cref="ComboCellBase"/> objects for this <see cref="ComboColumn"/>.
        /// </summary>
        /// <returns></returns>
        protected internal abstract ComboColumnContentProviderBase GenerateContentProvider();

        #endregion // GenerateContentProvider

        #endregion // Protected

        #region Internal

        #region SetFixedColumnState

        internal bool SetFixedColumnState(ComboColumnFixedState state)
        {
            ComboColumnFixedState previous = this._isFixed;
            this._isFixed = state;

            if (this.ComboEditor != null)
            {
                if (state == ComboColumnFixedState.Left)
                {
                    this.ComboEditor.Columns.FixedColumnsLeft.AddItemSilently(this);
                    this.ComboEditor.Columns.FixedColumnsRight.RemoveItemSilently(this);
                }
                else if (state == ComboColumnFixedState.NotFixed)
                {
                    this.ComboEditor.Columns.FixedColumnsRight.RemoveItemSilently(this);
                    this.ComboEditor.Columns.FixedColumnsLeft.RemoveItemSilently(this);
                }
                else if (state == ComboColumnFixedState.Right)
                {
                    this.ComboEditor.Columns.FixedColumnsRight.AddItemSilently(this);
                    this.ComboEditor.Columns.FixedColumnsLeft.RemoveItemSilently(this);
                }
            }

            this.OnPropertyChanged("IsFixed");

            return false;
        }

        #endregion // SetFixedColumnState

        #endregion // Internal

        #endregion // Methods
    }
}

#region Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved
/* ---------------------------------------------------------------------*
*                           Infragistics, Inc.                          *
*              Copyright (c) 2001-2012 All Rights reserved               *
*                                                                       *
*                                                                       *
* This file and its contents are protected by United States and         *
* International copyright laws.  Unauthorized reproduction and/or       *
* distribution of all or any portion of the code contained herein       *
* is strictly prohibited and will result in severe civil and criminal   *
* penalties.  Any violations of this copyright will be prosecuted       *
* to the fullest extent possible under law.                             *
*                                                                       *
* THE SOURCE CODE CONTAINED HEREIN AND IN RELATED FILES IS PROVIDED     *
* TO THE REGISTERED DEVELOPER FOR THE PURPOSES OF EDUCATION AND         *
* TROUBLESHOOTING. UNDER NO CIRCUMSTANCES MAY ANY PORTION OF THE SOURCE *
* CODE BE DISTRIBUTED, DISCLOSED OR OTHERWISE MADE AVAILABLE TO ANY     *
* THIRD PARTY WITHOUT THE EXPRESS WRITTEN CONSENT OF INFRAGISTICS, INC. *
*                                                                       *
* UNDER NO CIRCUMSTANCES MAY THE SOURCE CODE BE USED IN WHOLE OR IN     *
* PART, AS THE BASIS FOR CREATING A PRODUCT THAT PROVIDES THE SAME, OR  *
* SUBSTANTIALLY THE SAME, FUNCTIONALITY AS ANY INFRAGISTICS PRODUCT.    *
*                                                                       *
* THE REGISTERED DEVELOPER ACKNOWLEDGES THAT THIS SOURCE CODE           *
* CONTAINS VALUABLE AND PROPRIETARY TRADE SECRETS OF INFRAGISTICS,      *
* INC.  THE REGISTERED DEVELOPER AGREES TO EXPEND EVERY EFFORT TO       *
* INSURE ITS CONFIDENTIALITY.                                           *
*                                                                       *
* THE END USER LICENSE AGREEMENT (EULA) ACCOMPANYING THE PRODUCT        *
* PERMITS THE REGISTERED DEVELOPER TO REDISTRIBUTE THE PRODUCT IN       *
* EXECUTABLE FORM ONLY IN SUPPORT OF APPLICATIONS WRITTEN USING         *
* THE PRODUCT.  IT DOES NOT PROVIDE ANY RIGHTS REGARDING THE            *
* SOURCE CODE CONTAINED HEREIN.                                         *
*                                                                       *
* THIS COPYRIGHT NOTICE MAY NOT BE REMOVED FROM THIS FILE.              *
* --------------------------------------------------------------------- *
*/
#endregion Copyright (c) 2001-2012 Infragistics, Inc. All Rights Reserved