<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LE_InvalidOperationException_3" xml:space="preserve">
    <value>Enum has not been started</value>
  </data>
  <data name="LE_InvalidOperationException_4" xml:space="preserve">
    <value>Enum has finished</value>
  </data>
  <data name="LE_InvalidOperationException_25" xml:space="preserve">
    <value>Enumerator has not been started</value>
  </data>
  <data name="LE_InvalidOperationException_26" xml:space="preserve">
    <value>Enumerator has finished</value>
  </data>
  <data name="Qat_QuickCustomizeMenu_MinimizeRibbon" xml:space="preserve">
    <value>Minimize the Ribbon</value>
  </data>
  <data name="Qat_QuickCustomizeMenu_ShowAboveRibbon" xml:space="preserve">
    <value>Show Above the Ribbon</value>
  </data>
  <data name="Qat_QuickCustomizeMenu_ShowBelowRibbon" xml:space="preserve">
    <value>Show Below the Ribbon</value>
  </data>
  <data name="Qat_QuickCustomizeMenu_Title" xml:space="preserve">
    <value>Customize Quick Access Toolbar</value>
  </data>
  <data name="ToolContextMenu_AddGalleryToQat" xml:space="preserve">
    <value>Add Gallery to Quick Access Toolbar</value>
  </data>
  <data name="ToolContextMenu_AddToQat" xml:space="preserve">
    <value>Add to Quick Access Toolbar</value>
  </data>
  <data name="ToolContextMenu_MinimizeRibbon" xml:space="preserve">
    <value>Minimize the Ribbon</value>
  </data>
  <data name="ToolContextMenu_RemoveFromQat" xml:space="preserve">
    <value>Remove from Quick Access Toolbar</value>
  </data>
  <data name="ToolContextMenu_ShowQatAboveRibbon" xml:space="preserve">
    <value>Show Quick Access Toolbar Above the Ribbon</value>
  </data>
  <data name="ToolContextMenu_ShowQatBelowRibbon" xml:space="preserve">
    <value>Show Quick Access Toolbar Below the Ribbon</value>
  </data>
  <data name="ApplicationMenuDefaultKeyTip" xml:space="preserve">
    <value>F</value>
  </data>
  <data name="QuickCustomizeOverflowButtonKeyTip" xml:space="preserve">
    <value>00</value>
  </data>
  <data name="RibbonGroupAutoGeneratePrefix" xml:space="preserve">
    <value>Z</value>
  </data>
  <data name="ContextualTabGroupTabAutoGeneratePrefix" xml:space="preserve">
    <value>J</value>
  </data>
  <data name="LE_NotSupportedException_1" xml:space="preserve">
    <value>GalleryTools can only be placed on tools that derive from MenuTool!</value>
  </data>
	<data name="LE_Office2007UIRequirements" xml:space="preserve">
    <value>See the topic "Installing Microsoft Office 2007 UI Capabilities" in the NetAdvantage for WPF help for more information.</value>
  </data>
	<data name="LE_ApplicationMenuRecentItemsPanelMissing" xml:space="preserve">
    <value>The ApplicationMenuItemsPanel cannot work without the ApplicationMenuRecentItemsPanel being defined in the same template of the ApplicationMenuPresenter template.</value>
  </data>
	<data name="ContextualTabGroupString" xml:space="preserve">
    <value>ContextualTabGroup - Key: {0}, Caption: {1}</value>
  </data>
	<data name="LE_DuplicateKey" xml:space="preserve">
    <value>Duplicate Key '{0}'. Items must have unique values for their Key property.</value>
  </data>
	<data name="LE_ContextualTabGroupKeyMissing" xml:space="preserve">
    <value>A ContextualTabGroup with the specified key does not exist.</value>
  </data>
	<data name="LE_InvalidGalleryItemKey" xml:space="preserve">
    <value>The Key of a 'GalleryItem' cannot be null or string.Empty.</value>
  </data>
	<data name="LE_InvalidMenuToolPanelOrientation" xml:space="preserve">
    <value>'MenuToolPanel' only supports vertical orientation.</value>
  </data>
	<data name="LE_InvalidQatItemType" xml:space="preserve">
    <value>Item of type '{0}' cannot be added directly to the QuickAccessToolbar. Only QatPlaceholderTools and SeparatorTools can be added directly to the Qat.  To add another tool type to the Qat, add a QatPlaceholderTool with a ToolId that references the actual tool you would like to add.</value>
  </data>
	<data name="LE_QatOverflowPanelMissing" xml:space="preserve">
    <value>Could not find required part 'PART_QuickAccessToolbarOverflowPanel' in the template for the QuickAccessToolbar.</value>
  </data>
	<data name="LE_InvalidRibbonButtonChromeParent" xml:space="preserve">
    <value>A RibbonButtonChrome element can only be used from within the template of an 'IRibbonTool'.</value>
  </data>
	<data name="LE_IRibbonToolProxyIsNull" xml:space="preserve">
    <value>The ribbon tool must have an associated 'RibbonToolProxy'. IRibbonTool implementors must return a proxy.</value>
  </data>
	<data name="LE_ToolIsAlreadyDialogBoxLauncherTool" xml:space="preserve">
    <value>The specified tool is already the 'DialogBoxLauncherTool' of another RibbonGroup.</value>
  </data>
	<data name="LE_DoubleNanNotAllowed" xml:space="preserve">
    <value>The value cannot be 'double.NaN'.</value>
  </data>
	<data name="LE_InvalidParameterType" xml:space="preserve">
    <value>The '{0}' must be of type {1}.</value>
  </data>
	<data name="LE_InvalidRibbonWindowBorderParent" xml:space="preserve">
    <value>A 'RibbonWindowBorder' can only be used from within the template of a 'RibbonWindowContentHost'.</value>
  </data>
	<data name="LE_ToolRegisteredWithSameId" xml:space="preserve">
    <value>Tool with Id '{0}' already exists. Cannot add multiple tool instances with the same Id.</value>
  </data>
	<data name="LE_MismatchedToolTypeForId" xml:space="preserve">
    <value>Tool cannot be registered because its type does not match existing tool(s) with the same ID.</value>
  </data>
	<data name="LE_ArgumentLessThanZero" xml:space="preserve">
    <value>The value must be greater than or equal to zero.</value>
  </data>
	<data name="LE_OnlyOneGalleryToolAllowed" xml:space="preserve">
    <value>There can only be one 'GalleryTool' contained in a 'MenuTool'.</value>
  </data>
	<data name="LE_MenuItemNotAllowed" xml:space="preserve">
    <value>A 'MenuItem' can not be inserted into a MenuToolBase or RibbonContextMenu, use a 'ToolMenuItem' instead.</value>
  </data>
	<data name="LE_InvalidQatPlaceholderParent" xml:space="preserve">
    <value>A QatPlaceholderTool can only be used on the QuickAccessToolbar.</value>
  </data>
	<data name="LE_QatItemWithTargetNotInRibbon" xml:space="preserve">
    <value>An item with the specified TargetId '{0}' being added to the QuickAccessToolbar is not registered with the associated XamRibbon.</value>
  </data>
	<data name="LE_QatToolNotIRibbonTool" xml:space="preserve">
    <value>Tool being added to the QuickAccessToolbar does not implement the IRibbonTool interface. All tools that are added to the QuickAccessToolbar must implement the IRibbonTool interface.</value>
  </data>
	<data name="LE_CannotAddToolToQat" xml:space="preserve">
    <value>The Tool type '{0}' does not support being added to the QuickAccessToolbar.</value>
  </data>
	<data name="LE_KeyTipTooLong" xml:space="preserve">
    <value>A keytip cannot be more than 3 characters.</value>
  </data>
	<data name="LE_InvalidKeyTipCharacters" xml:space="preserve">
    <value>The keytip cannot include whitespace or control characters.</value>
  </data>
	<data name="LE_GroupRegisteredWithSameId" xml:space="preserve">
    <value>A RibbonGroup with the Id '{0}' already exists. Cannot add multiple groups with the same Id.</value>
  </data>
  <data name="LE_InvalidRibbonWindowRootElement" xml:space="preserve">
    <value>Root element of the XamRibbonWindow must be a FrameworkElement.</value>
  </data>
</root>